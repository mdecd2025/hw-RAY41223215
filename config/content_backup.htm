<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站: <span> </span><a class="Link--inTextBlock" href="https://mdecd2025.github.io/hw-RAY41223215/">https://mdecd2025.github.io/hw-RAY41223215/</a></p>
<p>學員作業倉儲:<a href="https://github.com/mdecd2025/hw-RAY41223215">https://github.com/mdecd2025/hw-RAY41223215</a></p>
<p></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h2>list</h2>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document, ajax

# 設定學員資料的 URL
url = "https://mde.tw/list/2b.txt"

# 定義載入資料的回呼函式
def on_data(response):
    if response.status != 200:
        print("資料載入失敗，請檢查網絡或 URL 是否正確")
        return
    
    data = response.text.strip().splitlines()
    if not data or len(data) &lt; 2:
        print("學員資料格式異常，請檢查來源文件")
        return

    all_stud = data[1:]  # 跳過標題行
    print(f"總共有 {len(all_stud)} 名學員")

    # 取得網頁中的 brython_div1
    brython_div1 = document["brython_div1"]
    brython_div1.clear()
    
    # 插入標題
    title = html.H3("學員 GitHub 作業列表", Class="title")
    brython_div1 &lt;= title
    
    # 建立無序清單
    ul = html.UL(Class="student-list")
    
    for i, student in enumerate(all_stud, 1):
        student_data = student.split(None, 1)  # 只分割一次，確保學號和 GitHub 帳號正確
        if len(student_data) &lt; 2:
            continue

        student_id, github_account = student_data  # 取得學號 和 GitHub 帳號
        
        # 創建學號的超連結，指向 GitHub Repo
        student_link = html.A(student_id, href=f"https://github.com/mdecd2025/hw-{github_account}", target="_blank", Class="student-id-link")

        # 創建 repo 的超連結，指向 GitHub.io
        repo_link = html.A("repo", href=f"https://mdecd2025.github.io/hw-{github_account}", target="_blank", Class="repo-link")

        # 建立列表項目，格式為 學號 (repo)
        list_item = html.LI()
        list_item &lt;= student_link  # 超連結學號
        list_item &lt;= " ("  # 在學號和 repo 之間加上括號
        list_item &lt;= repo_link  # 超連結 repo
        list_item &lt;= ")"  # 關閉括號

        ul &lt;= list_item  # 加入清單
    
    brython_div1 &lt;= ul

# 發送 AJAX 請求
request = ajax.ajax()
request.bind('complete', on_data)
request.open('GET', url, True)
request.send()

# 加入 CSS 樣式
style = html.STYLE("""
    .title {
        font-size: 24px;
        font-weight: bold;
        text-align: center;
        margin-bottom: 15px;
    }
    .student-list {
        list-style-type: none;
        padding: 0;
        text-align: center;
    }
    .student-list li {
        font-size: 18px;
        margin: 5px 0;
    }
    .student-id-link {
        color: #0366d6;
        text-decoration: none;
        font-weight: bold;
    }
    .student-id-link:hover {
        text-decoration: underline;
    }
    .repo-link {
        color: #28a745;
        text-decoration: none;
        font-weight: bold;
    }
    .repo-link:hover {
        text-decoration: underline;
    }
""")
document &lt;= style</pre>
<p><a href="https://mdecd2025.github.io/hw-RAY41223215/content/Brython.html?src=https://gist.githubusercontent.com/RAY41223215/fff007f1cd9af22772417666609b3c59/raw/fcb20d6228e9bdb1a7584334ceea3e45e67cfa6e/list">全部學員的作業網址</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document, ajax

# 設定學員資料的 URL
url = "https://mde.tw/list/2b.txt"

# 定義載入資料的回呼函式
def on_data(response):
    if response.status != 200:
        print("資料載入失敗，請檢查網絡或 URL 是否正確")
        return
    
    data = response.text.strip().splitlines()
    if not data or len(data) &lt; 2:
        print("學員資料格式異常，請檢查來源文件")
        return

    all_stud = data[1:]  # 跳過標題行
    print(f"總共有 {len(all_stud)} 名學員")

    # 要顯示的學號列表
    target_ids = ["41223206", "41223215", "41223226", "41223227", "41223228", "41223235"]

    # 取得網頁中的 brython_div1
    brython_div1 = document["brython_div1"]
    brython_div1.clear()
    
    # 插入標題
    title = html.H3("學員 GitHub 作業列表", Class="title")
    brython_div1 &lt;= title
    
    # 建立無序清單
    ul = html.UL(Class="student-list")
    
    for student in all_stud:
        student_data = student.split(None, 1)  # 只分割一次，確保學號和 GitHub 帳號正確
        if len(student_data) &lt; 2:
            continue

        student_id, github_account = student_data  # 取得學號 和 GitHub 帳號
        
        # 只顯示目標學號
        if student_id not in target_ids:
            continue
        
        # 創建學號的超連結，指向 GitHub Repo
        student_link = html.A(student_id, href=f"https://github.com/mdecd2025/hw-{github_account}", target="_blank", Class="student-id-link")

        # 創建 repo 的超連結，指向 GitHub.io
        repo_link = html.A("repo", href=f"https://mdecd2025.github.io/hw-{github_account}", target="_blank", Class="repo-link")

        # 建立列表項目，格式為 學號 (repo)
        list_item = html.LI()
        list_item &lt;= student_link  # 超連結學號
        list_item &lt;= " ("  # 在學號和 repo 之間加上括號
        list_item &lt;= repo_link  # 超連結 repo
        list_item &lt;= ")"  # 關閉括號

        ul &lt;= list_item  # 加入清單
    
    brython_div1 &lt;= ul

# 發送 AJAX 請求
request = ajax.ajax()
request.bind('complete', on_data)
request.open('GET', url, True)
request.send()

# 加入 CSS 樣式
style = html.STYLE("""
    .title {
        font-size: 24px;
        font-weight: bold;
        text-align: center;
        margin-bottom: 15px;
    }
    .student-list {
        list-style-type: none;
        padding: 0;
        text-align: center;
    }
    .student-list li {
        font-size: 18px;
        margin: 5px 0;
    }
    .student-id-link {
        color: #0366d6;
        text-decoration: none;
        font-weight: bold;
    }
    .student-id-link:hover {
        text-decoration: underline;
    }
    .repo-link {
        color: #28a745;
        text-decoration: none;
        font-weight: bold;
    }
    .repo-link:hover {
        text-decoration: underline;
    }
""")
document &lt;= style</pre>
<p><br/><br/></p>
<p><a href="https://mdecd2025.github.io/hw-RAY41223215/content/Brython.html?src=https://gist.githubusercontent.com/RAY41223215/e512179916cfdf2a1ab88879ca679fc3/raw/909bcd1cd871f62ef84c8c5f26ccd496bb7732d6/wwww">組員連結</a></p>
<p></p>
<p><a href="https://youtu.be/MdnhEDDBYv4">製作影片</a></p>
<p><a href="https://www.youtube.com/watch?v=M2NspNrVsJY">ipv6製作影片</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 學員編號列表 (您提供的編號)
student_numbers = [
    "40923137", "41023114", "41023205", "41023206", "41023210", "41023213", "41023215", "41023216",
    "41023218", "41023232", "41023237", "41071202", "41071203", "41071204", "41223201", "41223202",
    "41223203", "41223205", "41223206", "41223207", "41223208", "41223209", "41223210", "41223211",
    "41223212", "41223214", "41223215", "41223216", "41223217", "41223218", "41223219", "41223220",
    "41223221", "41223222", "41223223", "41223224", "41223225", "41223226", "41223227", "41223228",
    "41223229", "41223230", "41223231", "41223232", "41223233", "41223234", "41223235", "41223236",
    "41223237", "41223239", "41223240", "41223242", "41223243", "41223244", "41223245", "41223246",
    "41223247", "41223248", "41223249", "41223250", "41223251", "41223252", "41223253", "41271217",
    "41271236", "41271237"
]

# 使用學號生成連結
for i, student_id in enumerate(student_numbers, 1):  # 從 1 開始計數
    # 格式化序號為三位數 (001-066)
    student_num = f"{i:03d}"
    
    # 完整的 IPv6 位址
    full_ip = f"{base_ip}{student_num}"  # 使用學號的最後三個數字生成IPv6地址
    # 完整的 URL
    url = f"http://[{full_ip}]:{port}"
    
    # 建立連結元素
    link = html.A(f"{student_id}", href=url, target="_blank")  # 顯示學員的學號
    # 每個連結後加入換行
    div &lt;= link
    div &lt;= html.BR()</pre>
<p><a href="https://mdecd2025.github.io/hw-RAY41223215/content/Brython.html?src=https://gist.githubusercontent.com/RAY41223215/b3e708c9f19a1c9aa4c27025aec91345/raw/e006078b80ae9f2b7fd802966f0807605c98723f/wcnmm.py">全學員ipv6列表</a></p>
<p></p>
<h1>Tasks</h1>
<h2>task1</h2>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/XWijwHBjfmw" target="_blank">https://youtu.be/XWijwHBjfmw</a></p>
<p><img alt="" height="131" src="/images/w1.png" width="400"/></p>
<p><img alt="" height="209" src="/images/w1-1.png" width="400"/></p>
<p>設定python </p>
<h2>task2</h2>
<p>模擬webot選轉測試 利用老師給的範例 一步一步照著用 成功組出2根可以連在一起的桿子</p>
<p><a href="/downloads/link test.7z">作品</a>  &lt;------</p>
<p><a href="https://youtu.be/o4F-YeB33VU">影片連結</a> \</p>
<p><img alt="" height="152" src="/images/explorer_Tvci9NzZzb.png" width="400"/></p>
<h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號</p>
<p></p>
<p></p>
<p><a href="/downloads/123.zip">/downloads/123.zip</a> 連桿繪製 <a class="style-scope ytcp-video-info" href="https://youtu.be/xX6v5inBloc" target="_blank">https://youtu.be/xX6v5inBloc</a></p>
<p></p>
<p><a href="https://youtu.be/IA5rdrzHWRs">webot練習影片</a> </p>
<p><a href="/downloads/practice-1.7z">/downloads/practice-1.7z</a></p>
<p></p>
<p></p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/aH4og_k_Luo" target="_blank">https://youtu.be/aH4og_k_Luo</a> 模擬影片</p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/yXgJ8hmfr7c" target="_blank">https://youtu.be/yXgJ8hmfr7c</a> 詳細製作影片</p>
<p><a href="/downloads/fourbox_link_41223215.7z">/downloads/fourbox_link_41223215.7z</a> 檔案位置</p>
<p><img alt="" height="225" src="/images/fourbox.png" width="400"/></p><h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號</p>
<p><img alt="" height="225" src="/images/1.png" width="400"/></p>
<p><img alt="" height="225" src="/images/2.png" width="400"/></p>
<p><img alt="" height="225" src="/images/3.png" width="400"/></p>
<p><img alt="" height="316" src="/images/4.png" width="400"/></p>
<p><img alt="" height="227" src="/images/5.png" width="400"/></p>
<p><img alt="" height="225" src="/images/6.png" width="400"/></p>
<p><img alt="" height="225" src="/images/www.png" width="400"/></p>
<p><a href="https://youtu.be/uAxIZECWl6E">sovlespace 連桿繪製影片</a></p>
<p><a href="/downloads/practice1.7z">sovlespace 檔案</a></p>
<p><a href="/downloads/moni.7z">連桿檔案</a></p>
<p><a href="https://youtu.be/xfxZenH9mKE">webot匯入cad檔案影片</a></p>
<p>----------------------------------------------------</p>
<p>如何將stl轉成obj檔並且拆解</p>
<p>需先在環境中安裝numpy </p>
<p>在cmd裡打<strong>pip install numpy</strong>即可安裝</p>
<p>然後就可以用.py檔拆stl</p>
<p><a href="https://medium.com/@chiukevin08/numpy%E4%BB%8B%E7%B4%B9-61eb7f288b8d">numpy模組介紹</a></p>
<p><a href="https://youtu.be/I0H4Ixl0gM4">操作影片</a></p>
<p><img alt="" height="244" src="/images/chrome_egtjAuDdo3.png" width="400"/></p>
<p><a href="/downloads/split_stl py.7z">/downloads/split_stl py.7z</a> 拆開的檔案</p>
<p>----------------------------------------------------------------</p>
<p><a href="https://youtu.be/kQ_DBrLn2M0">模擬影片</a></p>
<p>連桿檔案<a href="/downloads/worlds.7z">/downloads/worlds.7z</a></p>
<p><a href="/downloads/fourbar_slvs-2.7z">/downloads/fourbar_slvs-2.7z</a></p>
<p><img alt="" height="138" src="/images/webots-bin_1orlBpw2oy.png" width="400"/></p>
<p>連接好的圖片</p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/ksVo3IAzcmE" target="_blank">https://youtu.be/ksVo3IAzcmE</a> 詳細製作過程</p>
<p>robot的資料夾下children裡有三個檔案</p>
<p>solid-1 (基座一)</p>
<p>solid-2 (基座二)</p>
<p>hingejoint 連接桿 (中間那三根的特徵)</p>
<p>物理性質記得開 不然不會跑 </p>
<p></p><h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p><a href="https://youtu.be/JqqnqCkwVis">hw3繪製零件</a></p>
<p><a href="/downloads/41223215 shooter.7z">/downloads/41223215 shooter.7z</a></p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/DddqK8xxv5s" target="_blank">https://youtu.be/DddqK8xxv5s</a> 半成品模擬影片</p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/5rvXEyfOqPw" target="_blank">https://youtu.be/5rvXEyfOqPw</a> 完成品模擬影片</p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/EJ3XKhpBrUM" target="_blank">https://youtu.be/EJ3XKhpBrUM</a> webot製作</p>
<p><a href="/downloads/shooter-2.7z">/downloads/shooter-2.7z</a>檔案</p>
<p><img alt="" height="174" src="/images/webots-bin_b6D52V4UPz.png" width="400"/></p>
<p>過程 </p>
<p>sovlespace繪製出零件 繪製出設計圖 再根據設計圖的形狀組配</p>
<p>組配完進行拆解轉檔(obj)(拆解過程會把尺寸縮小0.01倍)</p>
<p>進入webot 建robot 建出三個子特徵 solid(base) 兩個hingejoint(一個進行組裝 一個鎖點)</p>
<p>組裝過程續注意座標軸(會根據你繪圖起始的地方做原點) 可以進入sovlespace進行測量</p>
<p>測量鎖點點位 過程跟前面四連桿一樣 可以在過程中進行測試 看看點位有沒有準</p>
<p>鎖好之後模擬(我有發現老師給的設計圖因為角度會讓球沒辦法射那麼遠 所以我自己改良了程式 在發射前程式會先畜力)</p>
<p>加入球體(shape) 給定物理性質</p>
<p>加入地板(floor) </p>
<p>加入籃框(我在畫籃框時 匯入webot有個問題 因為沒有轉檔(沒必要)所以尺寸是正常的100倍 所以我自己又改了老師的分解檔案 去掉拆開的部分 只保留鎖小跟轉檔的能力)</p>
<p>之後模擬就成功了 </p>
<p>以下為鎖小功能py檔</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
STL to OBJ converter with scaling support
"""

import struct
import numpy as np
from pathlib import Path

class STLConverter:
    def __init__(self, filename, scale=0.001):
        self.filename = filename
        self.scale = scale
        self.is_binary = self._check_if_binary()
        
    def _check_if_binary(self):
        with open(self.filename, 'rb') as f:
            header = f.read(5).decode('utf-8', errors='ignore')
            return not header.startswith('solid')
    
    def _read_binary_stl(self):
        with open(self.filename, 'rb') as f:
            f.seek(80)
            triangle_count = struct.unpack('I', f.read(4))[0]
            
            triangles = []
            normals = []
            
            for _ in range(triangle_count):
                nx, ny, nz = struct.unpack('fff', f.read(12))
                normals.append([nx, ny, nz])
                
                triangle = []
                for _ in range(3):
                    x, y, z = struct.unpack('fff', f.read(12))
                    triangle.append([x * self.scale, y * self.scale, z * self.scale])
                triangles.append(triangle)
                
                f.seek(2, 1)
                
        return np.array(triangles), np.array(normals)
    
    def _read_ascii_stl(self):
        triangles = []
        normals = []
        current_triangle = []
        
        with open(self.filename, 'r') as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                    
                parts = line.split()
                if not parts:
                    continue
                
                if parts[0] == 'facet' and parts[1] == 'normal':
                    normals.append([float(parts[2]), float(parts[3]), float(parts[4])])
                elif parts[0] == 'vertex':
                    current_triangle.append([
                        float(parts[1]) * self.scale,
                        float(parts[2]) * self.scale,
                        float(parts[3]) * self.scale
                    ])
                elif parts[0] == 'endfacet':
                    if current_triangle:
                        triangles.append(current_triangle)
                        current_triangle = []
        
        return np.array(triangles), np.array(normals)

    def _write_mtl(self, filename, material_name):
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"newmtl {material_name}\n")
            f.write("Ka 0.2 0.2 0.2\n")
            f.write("Kd 0.8 0.8 0.8\n")
            f.write("Ks 0.5 0.5 0.5\n")
            f.write("Ns 50.0\n")
            f.write("d 1.0\n")
            f.write("illum 2\n")

    def _write_obj(self, filename, triangles, normals):
        vertex_dict = {}
        vertex_list = []
        normal_list = []
        faces = []
        
        for triangle, normal in zip(triangles, normals):
            face_indices = []
            
            for vertex in triangle:
                vertex_tuple = tuple(vertex)
                if vertex_tuple not in vertex_dict:
                    vertex_dict[vertex_tuple] = len(vertex_list) + 1
                    vertex_list.append(vertex)
                face_indices.append(vertex_dict[vertex_tuple])
            
            normal_list.append(normal)
            faces.append(face_indices)
        
        material_name = filename.stem
        mtl_filename = filename.with_suffix('.mtl')
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"mtllib {mtl_filename.name}\n")
            f.write(f"usemtl {material_name}\n\n")
            
            for v in vertex_list:
                f.write(f"v {v[0]} {v[1]} {v[2]}\n")
            
            for n in normal_list:
                f.write(f"vn {n[0]} {n[1]} {n[2]}\n")
            
            for i, face in enumerate(faces):
                f.write(f"f {face[0]}//{i+1} {face[1]}//{i+1} {face[2]}//{i+1}\n")
        
        self._write_mtl(mtl_filename, material_name)
    
    def convert(self, output_path):
        if self.is_binary:
            triangles, normals = self._read_binary_stl()
        else:
            triangles, normals = self._read_ascii_stl()
        
        output_path = Path(output_path)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        self._write_obj(output_path, triangles, normals)
        print(f"轉換完成：{output_path}")
        print(f"材質檔：{output_path.with_suffix('.mtl')}")

# 使用範例
try:
    input_stl = "籃框.stl"
    output_obj = "output/籃框.obj"
    scale = 0.005

    converter = STLConverter(input_stl, scale=scale)
    converter.convert(output_obj)
except Exception as e:
    print(f"錯誤: {e}")
</pre>
<p></p>
<p>以下為畜力控制器</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot
import time

def run_robot():
    # Create the Robot instance
    robot = Robot()

    # Get simulation time step
    timestep = int(robot.getBasicTimeStep())

    # Get motor and keyboard devices
    motor = robot.getDevice('motor1')
    keyboard = robot.getKeyboard()
    keyboard.enable(timestep)

    # Convert degrees to radians
    def deg2rad(deg):
        return deg * 3.14159 / 180

    # Set initial motor position to -5 degrees (蓄力)
    motor.setPosition(deg2rad(-10))
    # Wait for a short time (e.g., 1 second) to complete the back movement
    for _ in range(int(300 / timestep)):  # wait ~1 second
        if robot.step(timestep) == -1:
            return

    # Main control loop
    while robot.step(timestep) != -1:
        # Move to 38 degrees
        motor.setPosition(deg2rad(38))

if __name__ == "__main__":
    run_robot()
</pre>
<p></p><h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:1-4周 製作全學員連結 python設定 基礎webot環境架設 </p>
<p>4-9 webot連桿練習 sovlespace連桿繪製 製作fourbox作業</p>
<p>各週網頁內容:</p>
<p>期中心得:webot相比較上學期的coppeliasim 過程比較不直覺 建立樹狀圖的時候 要思考該特徵該放在哪 </p>
<p>製作四連桿也真的花我非常多的時間 但還是靠著老師和同學的範例成功做出</p>
<p>期中自評影片:<a class="style-scope ytcp-video-info" href="https://youtu.be/L8rq-KgBeBE" target="_blank">https://youtu.be/L8rq-KgBeBE</a></p>
<p></p>
<p style="padding-left: 30px;"></p><h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號</p>
<p><a href="/downloads/exam1.7z">/downloads/exam1.7z</a> 檔案位置</p>
<p><img alt="" height="226" src="/images/S06W2XUWAM.png" width="400"/></p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/qAJXMU16JTI" target="_blank">https://youtu.be/qAJXMU16JTI</a>操作影片</p>
<p></p><h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號</p>
<p><a href="/downloads/exam2.7z">/downloads/exam2.7z</a> 檔案位置</p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/wh4V2bo3kp8" target="_blank">https://youtu.be/wh4V2bo3kp8</a> 操作影片</p>
<p><img alt="" height="225" src="/images/vpco5rr2GQ.png" width="400"/></p>
<p>總體非常簡單 就跟hw2一樣 只是中見那塊大塊的要注意碰撞體積 太重他會掉下去 所以建議用pose建立box來避免</p><h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/F-Upcd2lmss" target="_blank">https://youtu.be/F-Upcd2lmss</a> exam-1 製作過程</p>
<p>以下為說明</p>
<p>先進入網路控制台 設定ipv6</p>
<p>以我的為範例 我的地址和dns為 </p>
<p><span>2001:288:6004:17:fff1:cd25:0000:b025 </span></p>
<p>修改好之後 打開cmd 輸入webotsw --stream "D:你的wbt檔案位置</p>
<p>&gt;&gt;&gt;!!!重點 必須把時間歸零 不然後續無法正常運作!!!&lt;&lt;&lt;</p>
<p>之後打開http://localhost:1234/index.html就可以看到你正在模擬的東西了</p>
<p>如果是要組員查看的話 就把localhost改成組員的ipv6地址就好 </p>
<p>以我的為範例<span>http://[2001:288:6004:17:fff1:cd25:0000:b025]:1234</span></p>
<p>以上</p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/kq6IF4TgTJc" target="_blank">https://youtu.be/kq6IF4TgTJc</a> exam3-2 製作過程 </p>
<p>跟上面exma3-1大差不差 利用老師給的七段顯示器檔案開啟</p>
<p>以上</p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/4AlfZEP8vVg" target="_blank">https://youtu.be/4AlfZEP8vVg</a> 製作過程</p>
<p>也是一樣用同樣的方式開啟程式 利用老師給的wbt來模擬</p>
<p>以上</p><h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<p><br/><br/></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;">
<div class="line number1 index0 alt2"><code class="js preprocessor"></code></div>
</div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>