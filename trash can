不知道我檔案要存在哪 就放這邊吧
#!/usr/bin/env python3
#encoding=utf-8
# 'seleniumwire' and 'selenium 4' raise error when running python 2.x
# PS: python 2.x will be removed in future.
#執行方式：python chrome_tixcraft.py 或 python3 chrome_tixcraft.py
import os
import sys
import platform
import json
import random

from selenium import webdriver
# for close tab.
from selenium.common.exceptions import NoSuchWindowException
from selenium.common.exceptions import UnexpectedAlertPresentException
from selenium.common.exceptions import NoAlertPresentException
from selenium.common.exceptions import WebDriverException
# for alert 2
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
# for selenium 4
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.action_chains import ActionChains
# for wait #1
import time
import re
from datetime import datetime
# for error output
import logging
logging.basicConfig()
logger = logging.getLogger('logger')
# for check reg_info
import requests
import warnings
from urllib3.exceptions import InsecureRequestWarning
warnings.simplefilter('ignore',InsecureRequestWarning)

# ocr
import base64
try:
    import ddddocr
except Exception as exc:
    pass

import ssl
ssl._create_default_https_context = ssl._create_unverified_context

CONST_APP_VERSION = u"MaxBot (2023.01.12)3版"

CONST_HOMEPAGE_DEFAULT = "https://tixcraft.com"

CONST_FROM_TOP_TO_BOTTOM = u"from top to bottom"
CONST_FROM_BOTTOM_TO_TOP = u"from bottom to top"
CONST_RANDOM = u"random"
CONST_SELECT_ORDER_DEFAULT = CONST_FROM_TOP_TO_BOTTOM
CONST_SELECT_OPTIONS_DEFAULT = (CONST_FROM_TOP_TO_BOTTOM, CONST_FROM_BOTTOM_TO_TOP, CONST_RANDOM)
CONST_SELECT_OPTIONS_ARRAY = [CONST_FROM_TOP_TO_BOTTOM, CONST_FROM_BOTTOM_TO_TOP, CONST_RANDOM]

CONT_STRING_1_SEATS_REMAINING = [u'@1 seat(s) remaining',u'剩餘 1@',u'@1 席残り']

def get_app_root():
    # 讀取檔案裡的參數值
    basis = ""
    if hasattr(sys, 'frozen'):
        basis = sys.executable
    else:
        basis = sys.argv[0]
    app_root = os.path.dirname(basis)
    return app_root

def get_config_dict():
    config_json_filename = 'settings.json'
    app_root = get_app_root()
    config_filepath = os.path.join(app_root, config_json_filename)
    config_dict = None
    if os.path.isfile(config_filepath):
        with open(config_filepath) as json_data:
            config_dict = json.load(json_data)
    return config_dict

def format_keyword_string(keyword):
    if not keyword is None:
        if len(keyword) > 0:
            keyword = keyword.replace('／','/')
            keyword = keyword.replace('　','')
            keyword = keyword.replace(',','')
            keyword = keyword.replace('，','')
            keyword = keyword.replace('$','')
            keyword = keyword.replace(' ','').lower()
    return keyword

def find_continuous_number(text):
    chars = "0123456789"
    return find_continuous_pattern(chars, text)

def find_continuous_text(text):
    chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    return find_continuous_pattern(chars, text)

def find_continuous_pattern(allowed_char, text):
    ret = ""
    is_allowed_char_start = False
    for char in text:
        #print("char:", char)
        if char in allowed_char:
            if len(ret)==0 and not is_allowed_char_start:
                is_allowed_char_start = True
            if is_allowed_char_start:
                ret += char
        else:
            # make not continuous
            is_allowed_char_start = False
    return ret

def get_favoriate_extension_path(webdriver_path):
    no_google_analytics_path = os.path.join(webdriver_path,"no_google_analytics_1.1.0.0.crx")
    no_ad_path = os.path.join(webdriver_path,"Adblock_3.15.2.0.crx")
    return no_google_analytics_path, no_ad_path

def get_chromedriver_path(webdriver_path):
    chromedriver_path = os.path.join(webdriver_path,"chromedriver")
    if platform.system().lower()=="windows":
        chromedriver_path = os.path.join(webdriver_path,"chromedriver.exe")
    return chromedriver_path

def load_chromdriver_normal(webdriver_path, driver_type, adblock_plus_enable):
    chrome_options = webdriver.ChromeOptions()

    chromedriver_path = get_chromedriver_path(webdriver_path)

    # some windows cause: timed out receiving message from renderer
    if adblock_plus_enable:
        # PS: this is ocx version.
        no_google_analytics_path, no_ad_path = get_favoriate_extension_path(webdriver_path)

        if os.path.exists(no_google_analytics_path):
            chrome_options.add_extension(no_google_analytics_path)
        if os.path.exists(no_ad_path):
            chrome_options.add_extension(no_ad_path)

    chrome_options.add_argument('--disable-features=TranslateUI')
    chrome_options.add_argument('--disable-translate')
    chrome_options.add_argument('--lang=zh-TW')

    # for navigator.webdriver
    chrome_options.add_experimental_option("excludeSwitches", ['enable-automation'])
    # Deprecated chrome option is ignored: useAutomationExtension
    #chrome_options.add_experimental_option('useAutomationExtension', False)
    chrome_options.add_experimental_option("prefs", {"credentials_enable_service": False, "profile.password_manager_enabled": False})

    #caps = DesiredCapabilities().CHROME
    caps = chrome_options.to_capabilities()

    #caps["pageLoadStrategy"] = u"normal"  #  complete
    caps["pageLoadStrategy"] = u"eager"  #  interactive
    #caps["pageLoadStrategy"] = u"none"

    #caps["unhandledPromptBehavior"] = u"dismiss and notify"  #  default
    #caps["unhandledPromptBehavior"] = u"ignore"
    #caps["unhandledPromptBehavior"] = u"dismiss"
    caps["unhandledPromptBehavior"] = u"accept"

    chrome_service = Service(chromedriver_path)

    # method 6: Selenium Stealth
    driver = webdriver.Chrome(service=chrome_service, options=chrome_options, desired_capabilities=caps)

    if driver_type=="stealth":
        from selenium_stealth import stealth
        # Selenium Stealth settings
        stealth(driver,
              languages=["zh-TW", "zh"],
              vendor="Google Inc.",
              platform="Win32",
              webgl_vendor="Intel Inc.",
              renderer="Intel Iris OpenGL Engine",
              fix_hairline=True,
          )
    #print("driver capabilities", driver.capabilities)

    return driver

def load_chromdriver_uc(webdriver_path, adblock_plus_enable):
    import undetected_chromedriver as uc

    chromedriver_path = get_chromedriver_path(webdriver_path)

    options = uc.ChromeOptions()
    options.page_load_strategy="eager"

    #print("strategy", options.page_load_strategy)

    if adblock_plus_enable:
        no_google_analytics_path, no_ad_path = get_favoriate_extension_path(webdriver_path)
        no_google_analytics_folder_path = no_google_analytics_path.replace('.crx','')
        no_ad_folder_path = no_ad_path.replace('.crx','')
        load_extension_path = ""
        if os.path.exists(no_google_analytics_folder_path):
            load_extension_path += "," + no_google_analytics_folder_path
        if os.path.exists(no_ad_folder_path):
            load_extension_path += "," + no_ad_folder_path
        if len(load_extension_path) > 0:
            options.add_argument('--load-extension=' + load_extension_path[1:])

    options.add_argument('--disable-features=TranslateUI')
    options.add_argument('--disable-translate')
    options.add_argument('--lang=zh-TW')

    options.add_argument("--password-store=basic")
    options.add_experimental_option("prefs", {"credentials_enable_service": False, "profile.password_manager_enabled": False})

    caps = options.to_capabilities()
    caps["unhandledPromptBehavior"] = u"accept"

    driver = None
    if os.path.exists(chromedriver_path):
        print("Use user driver path:", chromedriver_path)
        #driver = uc.Chrome(service=chrome_service, options=options, suppress_welcome=False)
        is_local_chrome_browser_lower = False
        try:
            driver = uc.Chrome(executable_path=chromedriver_path, options=options, desired_capabilities=caps, suppress_welcome=False)
        except Exception as exc:
            if "cannot connect to chrome" in str(exc):
                if "This version of ChromeDriver only supports Chrome version" in str(exc):
                    is_local_chrome_browser_lower = True
            print(exc)
            pass

        if is_local_chrome_browser_lower:
            print("Use local user downloaded chromedriver to lunch chrome browser.")
            driver_type = "selenium"
            driver = load_chromdriver_normal(webdriver_path, driver_type, adblock_plus_enable)
    else:
        print("Oops! web driver not on path:",chromedriver_path )
        print('let uc automatically download chromedriver.')
        driver = uc.Chrome(options=options, desired_capabilities=caps, suppress_welcome=False)

    if driver is None:
        print("create web drive object fail!")
    else:
        download_dir_path="."
        params = {
            "behavior": "allow",
            "downloadPath": os.path.realpath(download_dir_path)
        }
        #print("assign setDownloadBehavior.")
        driver.execute_cdp_cmd("Page.setDownloadBehavior", params)
    #print("driver capabilities", driver.capabilities)

    return driver

def close_browser_tabs(driver):
    if not driver is None:
        try:
            window_handles_count = len(driver.window_handles)
            if window_handles_count > 1:
                driver.switch_to.window(driver.window_handles[1])
                driver.close()
                driver.switch_to.window(driver.window_handles[0])
        except Exception as excSwithFail:
            pass

def get_driver_by_config(config_dict, driver_type):
    global driver

    homepage = None
    browser = None
    language = "English"
    ticket_number = "2"

    auto_press_next_step_button = False     # default not checked.
    auto_fill_ticket_number = False         # default not checked.
    auto_guess_options = False              # default not checked.

    kktix_area_auto_select_mode = ""
    kktix_area_keyword = ""
    kktix_date_keyword = ""

    pass_1_seat_remaining_enable = False        # default not checked.
    pass_date_is_sold_out_enable = False        # default not checked.
    auto_reload_coming_soon_page_enable = True  # default checked.

    area_keyword_1 = ""
    area_keyword_2 = ""
    area_keyword_3 = ""
    area_keyword_4 = ""

    date_keyword = ""

    date_auto_select_enable = None
    date_auto_select_mode = ""

    area_auto_select_enable = None
    area_auto_select_mode = ""

    debugMode = False

    # read config.
    homepage = config_dict["homepage"]
    browser = config_dict["browser"]

    # output debug message in client side.
    debugMode = config_dict["debug"]
    ticket_number = str(config_dict["ticket_number"])
    pass_1_seat_remaining_enable = config_dict["pass_1_seat_remaining"]

    # for ["kktix"]
    auto_press_next_step_button = config_dict["kktix"]["auto_press_next_step_button"]
    auto_fill_ticket_number = config_dict["kktix"]["auto_fill_ticket_number"]
    kktix_area_auto_select_mode = config_dict["kktix"]["area_mode"].strip()
    if not kktix_area_auto_select_mode in CONST_SELECT_OPTIONS_ARRAY:
        kktix_area_auto_select_mode = CONST_SELECT_ORDER_DEFAULT

    kktix_area_keyword_1 = config_dict["kktix"]["area_keyword_1"].strip()
    kktix_area_keyword_1_and = config_dict["kktix"]["area_keyword_1_and"].strip()
    kktix_area_keyword_2 = config_dict["kktix"]["area_keyword_2"].strip()
    kktix_area_keyword_2_and = config_dict["kktix"]["area_keyword_2_and"].strip()

    # disable password brute force attack
    # PS: because of the question is always variable.

    auto_guess_options = config_dict["kktix"]["auto_guess_options"]

    # for ["tixcraft"]
    date_auto_select_enable = config_dict["tixcraft"]["date_auto_select"]["enable"]
    date_auto_select_mode = config_dict["tixcraft"]["date_auto_select"]["mode"]
    if not date_auto_select_mode in CONST_SELECT_OPTIONS_ARRAY:
        date_auto_select_mode = CONST_SELECT_ORDER_DEFAULT

    date_keyword = config_dict["tixcraft"]["date_auto_select"]["date_keyword"].strip()

    area_auto_select_enable = config_dict["tixcraft"]["area_auto_select"]["enable"]
    area_auto_select_mode = config_dict["tixcraft"]["area_auto_select"]["mode"]
    if not area_auto_select_mode in CONST_SELECT_OPTIONS_ARRAY:
        area_auto_select_mode = CONST_SELECT_ORDER_DEFAULT

    area_keyword_1 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_1"].strip()
    area_keyword_2 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_2"].strip()
    area_keyword_3 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_3"].strip()
    area_keyword_4 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_4"].strip()

    pass_date_is_sold_out_enable = config_dict["tixcraft"]["pass_date_is_sold_out"]
    auto_reload_coming_soon_page_enable = config_dict["tixcraft"]["auto_reload_coming_soon_page"]

    # output config:
    print("maxbot app version", CONST_APP_VERSION)
    print("python version", platform.python_version())
    print("platform", platform.platform())
    print("homepage", homepage)
    print("browser", browser)
    print("ticket_number", ticket_number)
    print("pass_1_seat_remaining", pass_1_seat_remaining_enable)

    # for kktix
    print("==[kktix]==")
    print("auto_press_next_step_button", auto_press_next_step_button)
    print("auto_fill_ticket_number", auto_fill_ticket_number)
    print("kktix_area_keyword_1", kktix_area_keyword_1)
    print("kktix_area_keyword_1_and", kktix_area_keyword_1_and)
    print("kktix_area_keyword_2", kktix_area_keyword_2)
    print("kktix_area_keyword_2_and", kktix_area_keyword_2_and)
    print("auto_guess_options", auto_guess_options)

    # for tixcraft
    print("==[tixcraft]==")
    print("date_auto_select_enable", date_auto_select_enable)
    print("date_auto_select_mode", date_auto_select_mode)
    print("date_keyword", date_keyword)
    print("pass_date_is_sold_out", pass_date_is_sold_out_enable)
    print("auto_reload_coming_soon_page", auto_reload_coming_soon_page_enable)

    print("area_auto_select_enable", area_auto_select_enable)
    print("area_auto_select_mode", area_auto_select_mode)
    print("area_keyword_1", area_keyword_1)
    print("area_keyword_2", area_keyword_2)
    print("area_keyword_3", area_keyword_3)
    print("area_keyword_4", area_keyword_4)

    print("presale_code", config_dict["tixcraft"]["presale_code"])
    print("ocr_captcha", config_dict['ocr_captcha'])
    print("==[advanced]==")
    print("play_captcha_sound", config_dict["advanced"]["play_captcha_sound"]["enable"])
    print("sound file path", config_dict["advanced"]["play_captcha_sound"]["filename"])
    print("adblock_plus_enable", config_dict["advanced"]["adblock_plus_enable"])
    print("debug Mode", debugMode)

    # entry point
    if homepage is None:
        homepage = ""
    if len(homepage) == 0:
        homepage = CONST_HOMEPAGE_DEFAULT

    Root_Dir = get_app_root()
    webdriver_path = os.path.join(Root_Dir, "webdriver")
    print("platform.system().lower():", platform.system().lower())

    adblock_plus_enable = config_dict["advanced"]["adblock_plus_enable"]
    print("adblock_plus_enable:", adblock_plus_enable)

    if browser == "chrome":
        # method 6: Selenium Stealth
        if driver_type != "undetected_chromedriver":
            driver = load_chromdriver_normal(webdriver_path, driver_type, adblock_plus_enable)
        else:
            # method 5: uc
            # multiprocessing not work bug.
            if platform.system().lower()=="windows":
                if hasattr(sys, 'frozen'):
                    from multiprocessing import freeze_support
                    freeze_support()
            driver = load_chromdriver_uc(webdriver_path, adblock_plus_enable)

    if browser == "firefox":
        # default os is linux/mac
        chromedriver_path = os.path.join(webdriver_path,"geckodriver")
        if platform.system().lower()=="windows":
            chromedriver_path = os.path.join(webdriver_path,"geckodriver.exe")

        firefox_service = Service(chromedriver_path)
        driver = webdriver.Firefox(service=firefox_service)

    #print("try to close opened tabs.")
    '''
    time.sleep(1.0)
    for i in range(1):
        close_browser_tabs(driver)
    '''

    if driver is None:
        print("create web driver object fail @_@;")
    else:
        try:
            print("goto url:", homepage)
            if homepage=="https://tixcraft.com":
                homepage="https://tixcraft.com/user/changeLanguage/lang/zh_tw"
            driver.get(homepage)
            input("請在瀏覽器中手動完成登入與驗證，完成後按 Enter 鍵繼續...")
        except WebDriverException as exce2:
            print('oh no not again, WebDriverException')
            print('WebDriverException:', exce2)
        except Exception as exce1:
            print('get URL Exception:', exec1)
            pass

    return driver

# common functions.
def find_between( s, first, last ):
    try:
        start = s.index( first ) + len( first )
        end = s.index( last, start )
        return s[start:end]
    except ValueError:
        return ""

# convert web string to reg pattern
def convert_string_to_pattern(my_str, dynamic_length=True):
    my_hint_anwser_length = len(my_str)
    my_formated = ""
    if my_hint_anwser_length > 0:
        my_anwser_symbols = u"()[]<>{}-"
        for idx in range(my_hint_anwser_length):
            char = my_str[idx:idx+1]

            if char in my_anwser_symbols:
                my_formated += (u'\\' + char)
                continue

            pattern = re.compile(u"[A-Z]")
            match_result = pattern.match(char)
            #print("match_result A:", match_result)
            if not match_result is None:
                my_formated += u"[A-Z]"

            pattern = re.compile(u"[a-z]")
            match_result = pattern.match(char)
            #print("match_result a:", match_result)
            if not match_result is None:
                my_formated += u"[a-z]"

            pattern = re.compile(r"[\d]")
            match_result = pattern.match(char)
            #print("match_result d:", match_result)
            if not match_result is None:
                my_formated += r"[\d]"

        # for dynamic length
        if dynamic_length:
            for i in range(10):
                my_formated = my_formated.replace(u"[A-Z][A-Z]",u"[A-Z]")
                my_formated = my_formated.replace(u"[a-z][a-z]",u"[a-z]")
                my_formated = my_formated.replace(r"[\d][\d]",r"[\d]")

            my_formated = my_formated.replace(u"[A-Z]",u"[A-Z]+")
            my_formated = my_formated.replace(u"[a-z]",u"[a-z]+")
            my_formated = my_formated.replace(r"[\d]",r"[\d]+")
    return my_formated

def guess_answer_list_from_multi_options(tmp_text):
    options_list = None
    if options_list is None:
        if u'【' in tmp_text and u'】' in tmp_text:
            options_list = re.findall(u'【.*?】', tmp_text)
            if len(options_list) <= 2:
                options_list = None

    if options_list is None:
        if u'(' in tmp_text and u')' in tmp_text:
            options_list = re.findall(r'\(.*?\)', tmp_text)
            if len(options_list) <= 2:
                options_list = None

    if options_list is None:
        if u'[' in tmp_text and u']' in tmp_text:
            options_list = re.findall(u'[.*?]', tmp_text)
            if len(options_list) <= 2:
                options_list = None

    return_list = None
    if not options_list is None:
        options_list_length = len(options_list)
        if options_list_length > 2:
            is_all_options_same_length = True
            for i in range(options_list_length-1):
                if len(options_list[i]) != len(options_list[i]):
                    is_all_options_same_length = False

            if is_all_options_same_length:
                return_list = []
                for each_option in options_list:
                    return_list.append(each_option[1:-1])
    return return_list

#PS: this may get a wrong answer list. XD
def guess_answer_list_from_symbols(captcha_text_div_text):
    return_list = None
    # need replace to space to get first options.
    tmp_text = captcha_text_div_text
    tmp_text = tmp_text.replace(u'?',u' ')
    tmp_text = tmp_text.replace(u'？',u' ')
    tmp_text = tmp_text.replace(u'。',u' ')

    delimitor_symbols_left = [u"(",u"[",u"{", " ", " ", " ", " "]
    delimitor_symbols_right = [u")",u"]",u"}", ":", ".", ")", "-"]
    idx = -1
    for idx in range(len(delimitor_symbols_left)):
        symbol_left = delimitor_symbols_left[idx]
        symbol_right = delimitor_symbols_right[idx]
        if symbol_left in tmp_text and symbol_right in tmp_text and u'半形' in tmp_text:
            hint_list = re.findall(u'\\'+ symbol_left + u'[\\w]+\\'+ symbol_right , tmp_text)
            #print("hint_list:", hint_list)
            if not hint_list is None:
                if len(hint_list) > 1:
                    return_list = []
                    my_answer_delimitor = symbol_right
                    for options in hint_list:
                        if len(options) > 2:
                            my_anwser = options[1:-1]
                            #print("my_anwser:",my_anwser)
                            if len(my_anwser) > 0:
                                return_list.append(my_anwser)

        if not return_list is None:
            break
    return return_list

def get_offical_hint_string_from_symbol(symbol, tmp_text):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    offical_hint_string = ""
    if symbol in tmp_text:
        # start to guess offical hint
        if offical_hint_string == "":
            if u'【' in tmp_text and u'】' in tmp_text:
                hint_list = re.findall(u'【.*?】', tmp_text)
                if not hint_list is None:
                    if show_debug_message:
                        print("【.*?】hint_list:", hint_list)
                    for hint in hint_list:
                        if symbol in hint:
                            offical_hint_string = hint[1:-1]
                            break
        if offical_hint_string == "":
            if u'(' in tmp_text and u')' in tmp_text:
                hint_list = re.findall(r'\(.*?\)', tmp_text)
                if not hint_list is None:
                    if show_debug_message:
                        print(r"\(.*?\)hint_list:", hint_list)
                    for hint in hint_list:
                        if symbol in hint:
                            offical_hint_string = hint[1:-1]
                            break
        if offical_hint_string == "":
            if u'[' in tmp_text and u']' in tmp_text:
                hint_list = re.findall(u'[.*?]', tmp_text)
                if not hint_list is None:
                    if show_debug_message:
                        print("[.*?]hint_list:", hint_list)
                    for hint in hint_list:
                        if symbol in hint:
                            offical_hint_string = hint[1:-1]
                            break
        if offical_hint_string == "":
            offical_hint_string = tmp_text
    return offical_hint_string

def guess_answer_list_from_hint(CONST_EXAMPLE_SYMBOL, captcha_text_div_text):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    CONST_INPUT_SYMBOL = '輸入'

    return_list = None

    tmp_text = format_question_string(CONST_EXAMPLE_SYMBOL, captcha_text_div_text)

    my_question = ""
    my_options = ""
    offical_hint_string = ""
    offical_hint_string_anwser = ""
    my_anwser_formated = ""
    my_answer_delimitor = ""

    if my_question == "":
        if u"?" in tmp_text:
            question_index = tmp_text.find(u"?")
            my_question = tmp_text[:question_index+1]
    if my_question == "":
        if u"。" in tmp_text:
            question_index = tmp_text.find(u"。")
            my_question = tmp_text[:question_index+1]
    if my_question == "":
        my_question = tmp_text
    #print(u"my_question:", my_question)

    # ps: hint_list is not options list

    if offical_hint_string == "":
        offical_hint_string = get_offical_hint_string_from_symbol(CONST_EXAMPLE_SYMBOL, tmp_text)
        if len(offical_hint_string) > 0:
            right_part = offical_hint_string.split(CONST_EXAMPLE_SYMBOL)[1]
            if len(offical_hint_string) == len(tmp_text):
                offical_hint_string = right_part

            new_hint = find_continuous_text(right_part)
            if len(new_hint) > 0:
                offical_hint_string_anwser = new_hint

    if offical_hint_string == "":
        # for: 若你覺得答案為 a，請輸入 a
        if '答案' in tmp_text and CONST_INPUT_SYMBOL in tmp_text:
            offical_hint_string = get_offical_hint_string_from_symbol(CONST_INPUT_SYMBOL, tmp_text)
        if len(offical_hint_string) > 0:
            right_part = offical_hint_string.split(CONST_INPUT_SYMBOL)[1]
            if len(offical_hint_string) == len(tmp_text):
                offical_hint_string = right_part

            new_hint = find_continuous_text(right_part)
            if len(new_hint) > 0:
                # TODO: 答案為B需填入Bb)
                #if u'答案' in offical_hint_string and CONST_INPUT_SYMBOL in offical_hint_string:
                offical_hint_string_anwser = new_hint

    if show_debug_message:
        print("offical_hint_string:",offical_hint_string)

    # try rule4:
    # get hint from rule 3: without '(' & '), but use "*"
    if len(offical_hint_string) == 0:
        target_symbol = u"*"
        if target_symbol in tmp_text :
            star_index = tmp_text.find(target_symbol)
            space_index = tmp_text.find(u" ", star_index + len(target_symbol))
            offical_hint_string = tmp_text[star_index: space_index]

    # is need to merge next block
    if len(offical_hint_string) > 0:
        target_symbol = offical_hint_string + u" "
        if target_symbol in tmp_text :
            star_index = tmp_text.find(target_symbol)
            next_block_index = star_index + len(target_symbol)
            space_index = tmp_text.find(u" ", next_block_index)
            next_block = tmp_text[next_block_index: space_index]
            if CONST_EXAMPLE_SYMBOL in next_block:
                offical_hint_string += u' ' + next_block

    # try rule5:
    # get hint from rule 3: n個半形英文大寫
    if len(offical_hint_string) == 0:
        target_symbol = u"個半形英文大寫"
        if target_symbol in tmp_text :
            star_index = tmp_text.find(target_symbol)
            space_index = tmp_text.find(u" ", star_index)
            answer_char_count = tmp_text[star_index-1:star_index]
            if answer_char_count.isnumeric():
                star_index -= 1
                offical_hint_string_anwser = u'A' * int(answer_char_count)
            offical_hint_string = tmp_text[star_index: space_index]

        target_symbol = u"個英文大寫"
        if target_symbol in tmp_text :
            star_index = tmp_text.find(target_symbol)
            space_index = tmp_text.find(u" ", star_index)
            answer_char_count = tmp_text[star_index-1:star_index]
            if answer_char_count.isnumeric():
                star_index -= 1
                offical_hint_string_anwser = u'A' * int(answer_char_count)
            offical_hint_string = tmp_text[star_index: space_index]

        target_symbol = u"個半形英文小寫"
        if target_symbol in tmp_text :
            star_index = tmp_text.find(target_symbol)
            space_index = tmp_text.find(u" ", star_index)
            answer_char_count = tmp_text[star_index-1:star_index]
            if answer_char_count.isnumeric():
                star_index -= 1
                offical_hint_string_anwser = u'a' * int(answer_char_count)
            offical_hint_string = tmp_text[star_index: space_index]

        target_symbol = u"個英文小寫"
        if target_symbol in tmp_text :
            star_index = tmp_text.find(target_symbol)
            space_index = tmp_text.find(u" ", star_index)
            answer_char_count = tmp_text[star_index-1:star_index]
            if answer_char_count.isnumeric():
                star_index -= 1
                offical_hint_string_anwser = u'a' * int(answer_char_count)
            offical_hint_string = tmp_text[star_index: space_index]

        target_symbol = u"個英數半形字"
        if target_symbol in tmp_text :
            star_index = tmp_text.find(target_symbol)
            space_index = tmp_text.find(u" ", star_index)
            answer_char_count = tmp_text[star_index-1:star_index]
            if answer_char_count.isnumeric():
                star_index -= 1
                my_anwser_formated = r'[A-Za-z\d]' * int(answer_char_count)
            offical_hint_string = tmp_text[star_index: space_index]

        target_symbol = u"個半形"
        if target_symbol in tmp_text :
            star_index = tmp_text.find(target_symbol)
            space_index = tmp_text.find(u" ", star_index)
            answer_char_count = tmp_text[star_index-1:star_index]
            if answer_char_count.isnumeric():
                star_index -= 1
                my_anwser_formated = r'[A-Za-z\d]' * int(answer_char_count)
            offical_hint_string = tmp_text[star_index: space_index]

    if len(offical_hint_string) > 0:
        #print("offical_hint_string_anwser:", offical_hint_string_anwser)
        my_anwser_formated = convert_string_to_pattern(offical_hint_string_anwser)

    my_options = tmp_text
    if len(my_question) < len(tmp_text):
        my_options = my_options.replace(my_question,u"")
    my_options = my_options.replace(offical_hint_string,u"")
    #print("tmp_text:", tmp_text)
    #print("my_options:", my_options)
    #print("offical_hint_string:", offical_hint_string)

    # try rule7:
    # check is chinese/english in question, if match, apply my_options rule.
    if len(offical_hint_string) > 0:
        tmp_text_org = captcha_text_div_text
        if CONST_EXAMPLE_SYMBOL in tmp_text:
            tmp_text_org = tmp_text_org.replace(u'Ex:','ex:')
            target_symbol = u"ex:"
            if target_symbol in tmp_text_org :
                star_index = tmp_text_org.find(target_symbol)
                my_options = tmp_text_org[star_index-1:]

    #print(u"my_options:", my_options)

    if len(my_anwser_formated) > 0:
        allow_delimitor_symbols = ")].: }"
        pattern = re.compile(my_anwser_formated)
        search_result = pattern.search(my_options)
        if not search_result is None:
            (span_start, span_end) = search_result.span()
            if len(my_options) > (span_end+1)+1:
                maybe_delimitor = my_options[span_end+0:span_end+1]
            if maybe_delimitor in allow_delimitor_symbols:
                my_answer_delimitor = maybe_delimitor
    #print(u"my_answer_delimitor:", my_answer_delimitor)

    if len(my_anwser_formated) > 0:
        #print("text:" , re.findall('\([\w]+\)', tmp_text))
        new_pattern = my_anwser_formated
        if len(my_answer_delimitor) > 0:
            new_pattern = my_anwser_formated + u'\\' + my_answer_delimitor
        return_list = re.findall(new_pattern, my_options)

        if not return_list is None:
            if len(return_list) == 1:
                # re-sample for this case.
                return_list = re.findall(my_anwser_formated, my_options)

    return return_list

def format_question_string(CONST_EXAMPLE_SYMBOL, captcha_text_div_text):
    CONST_INPUT_SYMBOL = '輸入'

    tmp_text = captcha_text_div_text
    tmp_text = tmp_text.replace(u'  ',u' ')
    tmp_text = tmp_text.replace(u'：',u':')
    # for hint
    tmp_text = tmp_text.replace(u'*',u'*')

    # replace ex.
    tmp_text = tmp_text.replace(u'例如', CONST_EXAMPLE_SYMBOL)
    tmp_text = tmp_text.replace(u'如:', CONST_EXAMPLE_SYMBOL)
    tmp_text = tmp_text.replace(u'舉例', CONST_EXAMPLE_SYMBOL)
    if not CONST_EXAMPLE_SYMBOL in tmp_text:
        tmp_text = tmp_text.replace(u'例', CONST_EXAMPLE_SYMBOL)
    # important, maybe 例 & ex occurs at same time.
    tmp_text = tmp_text.replace(u'ex:', CONST_EXAMPLE_SYMBOL)
    tmp_text = tmp_text.replace(u'Ex:', CONST_EXAMPLE_SYMBOL)

    #若你覺得
    #PS:這個，可能會造成更多問題，呵呵。
    SYMBOL_IF_LIST = ['假設','如果','若']
    for symbol_if in SYMBOL_IF_LIST:
        if symbol_if in tmp_text and '答案' in tmp_text:
            tmp_text = tmp_text.replace('覺得', '')
            tmp_text = tmp_text.replace('認為', '')
            tmp_text = tmp_text.replace(symbol_if + '你答案', CONST_EXAMPLE_SYMBOL + '答案')
            tmp_text = tmp_text.replace(symbol_if + '答案', CONST_EXAMPLE_SYMBOL + '答案')

    tmp_text = tmp_text.replace(u'填入', CONST_INPUT_SYMBOL)

    #tmp_text = tmp_text.replace(u'[',u'(')
    #tmp_text = tmp_text.replace(u']',u')')
    tmp_text = tmp_text.replace(u'？',u'?')

    tmp_text = tmp_text.replace(u'（',u'(')
    tmp_text = tmp_text.replace(u'）',u')')

    return tmp_text

def get_answer_list_by_question(CONST_EXAMPLE_SYMBOL, captcha_text_div_text):
    return_list = None

    tmp_text = format_question_string(CONST_EXAMPLE_SYMBOL, captcha_text_div_text)

    # guess answer list from multi-options: 【】() []
    if return_list is None:
        return_list = guess_answer_list_from_multi_options(tmp_text)
        pass

    if return_list is None:
        return_list = guess_answer_list_from_hint(CONST_EXAMPLE_SYMBOL, captcha_text_div_text)

    # try rule8:
    if return_list is None:
        return_list = guess_answer_list_from_symbols(captcha_text_div_text)

    return return_list

# close some div on home url.
def tixcraft_home(driver):
    accept_all_cookies_btn = None
    try:
        accept_all_cookies_btn = driver.find_element(By.ID, 'onetrust-accept-btn-handler')
    except Exception as exc:
        #print("find accept_all_cookies_btn fail")
        pass

    if accept_all_cookies_btn is not None:
        is_visible = False
        try:
            if accept_all_cookies_btn.is_enabled() and accept_all_cookies_btn.is_displayed():
                is_visible = True
        except Exception as exc:
            pass

        if is_visible:
            try:
                accept_all_cookies_btn.click()
            except Exception as exc:
                print("try to click accept_all_cookies_btn fail")
                try:
                    driver.execute_script("arguments[0].click();", accept_all_cookies_btn)
                except Exception as exc:
                    pass

    close_all_alert_btns = None
    try:
        close_all_alert_btns = driver.find_elements(By.CSS_SELECTOR, "[class='close-alert']")
    except Exception as exc:
        print("find close_all_alert_btns fail")

    if close_all_alert_btns is not None:
        #print('alert count:', len(close_all_alert_btns))
        for alert_btn in close_all_alert_btns:
            # fix bug: Message: stale element reference: element is not attached to the page document
            is_visible = False
            try:
                if alert_btn.is_enabled() and alert_btn.is_displayed():
                    is_visible = True
            except Exception as exc:
                pass

            if is_visible:
                try:
                    alert_btn.click()
                except Exception as exc:
                    print("try to click alert_btn fail")
                    try:
                        driver.execute_script("arguments[0].click();", alert_btn)
                    except Exception as exc:
                        pass

# from detail to game
def tixcraft_redirect(driver, url):
    ret = False

    game_name = ""

    # get game_name from url
    url_split = url.split("/")
    if len(url_split) >= 6:
        game_name = url_split[5]

    if "/activity/detail/%s" % (game_name,) in url:
        # to support teamear
        entry_url = url.replace("/activity/detail/","/activity/game/")
        print("redirec to new url:", entry_url)
        try:
            driver.get(entry_url)
        except Exception as exec1:
            pass
        ret = True

    return ret

def tixcraft_date_auto_select(driver, url, config_dict):
    show_debug_message = True    # debug.
    show_debug_message = False   # online

    # read config.
    date_auto_select_mode = config_dict["tixcraft"]["date_auto_select"]["mode"]
    date_keyword = config_dict["tixcraft"]["date_auto_select"]["date_keyword"].strip()
    pass_date_is_sold_out_enable = config_dict["tixcraft"]["pass_date_is_sold_out"]
    auto_reload_coming_soon_page_enable = config_dict["tixcraft"]["auto_reload_coming_soon_page"]

    # PS: for big events, check sold out text maybe not helpful, due to database is too busy.
    sold_out_text_list = ["選購一空","No tickets available","空席なし"]

    game_name = ""

    if "/activity/game/" in url:
        url_split = url.split("/")
        if len(url_split) >= 6:
            game_name = url_split[5]

    if show_debug_message:
        print('get date game_name:', game_name)
        print("date_auto_select_mode:", date_auto_select_mode)
        print("date_keyword:", date_keyword)

    check_game_detail = False
    # choose date
    if "/activity/game/%s" % (game_name,) in url:
        if show_debug_message:
            if len(date_keyword) == 0:
                print("date keyword is empty.")
            else:
                print("date keyword:", date_keyword)
        check_game_detail = True

    date_list = None
    if check_game_detail:
        try:
            date_list = driver.find_elements(By.CSS_SELECTOR, '#gameList > table > tbody > tr')
        except Exception as exc:
            print("find #gameList fail")

    is_coming_soon = False
    coming_soon_condictions_list = ['開賣','剩餘','天','小時','分鐘','秒','0',':','/']
    
    button_list = None
    if date_list is not None:
        button_list = []
        for row in date_list:
            # step 1: check keyword.
            is_match_keyword_row = False

            row_text = ""
            try:
                row_text = row.text
            except Exception as exc:
                print("get text fail")
                # should use continue or break?
                break

            if row_text is None:
                row_text = ""

            if len(row_text) > 0:
                is_match_all_coming_soon_condiction = True
                for condiction_string in coming_soon_condictions_list:
                    if not condiction_string in row_text:
                        is_match_all_coming_soon_condiction = False
                        break
                if is_match_all_coming_soon_condiction:
                    is_coming_soon = True
                    break

                if len(date_keyword) == 0:
                    # no keyword, match all.
                    is_match_keyword_row = True
                else:
                    # check keyword.
                    if date_keyword in row_text:
                        is_match_keyword_row = True

            # step 2: check sold out.
            if is_match_keyword_row:
                if pass_date_is_sold_out_enable:
                    for sold_out_item in sold_out_text_list:
                        row_text_right_part = row_text[(len(sold_out_item)+5)*-1:]
                        if show_debug_message:
                            print("check right part text:", row_text_right_part)
                        if sold_out_item in row_text_right_part:
                            is_match_keyword_row = False

                            if show_debug_message:
                                print("match sold out text: %s, skip this row." % (sold_out_item))

                            # no need check next language item.
                            break

            # step 3: add to list.
            if is_match_keyword_row:
                el = None
                try:
                    el = row.find_element(By.CSS_SELECTOR, '.btn-next')
                except Exception as exc:
                    if show_debug_message:
                        print("find .btn-next fail")
                    pass

                if el is not None:
                    button_list.append(el)
                    if date_auto_select_mode == CONST_FROM_TOP_TO_BOTTOM:
                        # only need one row.
                        if show_debug_message:
                            print("match date row, only need first row, start to break")
                        break

    is_date_selected = False
    if button_list is not None:
        if len(button_list) > 0:
            # default first row.
            target_row_index = 0

            if date_auto_select_mode == CONST_FROM_BOTTOM_TO_TOP:
                target_row_index = len(button_list) - 1

            if date_auto_select_mode == CONST_RANDOM:
                target_row_index = random.randint(0,len(button_list)-1)

            if show_debug_message:
                print("clicking row:", target_row_index+1)

            try:
                el = button_list[target_row_index]
                el.click()
                is_date_selected = True
            except Exception as exc:
                print("try to click .btn-next fail")
                try:
                    driver.execute_script("arguments[0].click();", el)
                except Exception as exc:
                    pass

        # PS: Is this case need to reload page?
        #   (A)user input keywords, with matched text, but no hyperlink to click.
        #   (B)user input keywords, but not no matched text with hyperlink to click.

    # [PS]: current reload condition only when 
    if auto_reload_coming_soon_page_enable:
        if is_coming_soon:
            # case 2: match one row is coming soon.
            try:
                driver.refresh()
            except Exception as exc:
                pass
        else:
            if not is_date_selected:
                # case 1: No hyperlink button.
                el_list = None
                try:
                    el_list = driver.find_elements(By.CSS_SELECTOR, '.btn-next')
                    if el_list is None:
                        driver.refresh()
                    else:
                        if len(el_list) == 0:
                            driver.refresh()
                except Exception as exc:
                    pass

    return is_date_selected

# PURPOSE: get target area list.
# RETURN:
#   is_need_refresh
#   matched_blocks
# PS: matched_blocks will be None, if length equals zero.
def get_tixcraft_target_area(el, area_keyword, area_auto_select_mode, pass_1_seat_remaining_enable):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    is_need_refresh = False
    matched_blocks = None

    area_list = None
    area_list_count = 0
    if el is not None:
        try:
            area_list = el.find_elements(By.TAG_NAME, 'a')
        except Exception as exc:
            #print("find area list a tag fail")
            pass

        if area_list is not None:
            area_list_count = len(area_list)
            if area_list_count == 0:
                print("area list is empty, do refresh!")
                is_need_refresh = True
        else:
            print("area list is None, do refresh!")
            is_need_refresh = True

    if area_list_count > 0:
        matched_blocks = []
        for row in area_list:
            row_is_enabled=False
            try:
                row_is_enabled = row.is_enabled()
            except Exception as exc:
                pass

            row_text = ""
            if row_is_enabled:
                try:
                    row_text = row.text
                except Exception as exc:
                    print("get text fail")
                    break

            if row_text is None:
                row_text = ""

            if len(row_text) > 0:
                # clean stop word.
                row_text = format_keyword_string(row_text)

                is_append_this_row = False

                if len(area_keyword) > 0:
                    # clean stop word.
                    area_keyword = format_keyword_string(area_keyword)

                # allow only input stop word in keyword fields.
                # for keyword#2 to select all.
                if len(area_keyword) > 0:
                    # must match keyword.
                    if area_keyword in row_text:
                        is_append_this_row = True
                else:
                    # without keyword.
                    is_append_this_row = True

                if is_append_this_row:
                    if show_debug_message:
                        print("pass_1_seat_remaining_enable:", pass_1_seat_remaining_enable)
                    if pass_1_seat_remaining_enable:
                        area_item_font_el = None
                        try:
                            #print('try to find font tag at row:', row_text)
                            area_item_font_el = row.find_element(By.TAG_NAME, 'font')
                            if not area_item_font_el is None:
                                font_el_text = area_item_font_el.text
                                if font_el_text is None:
                                    font_el_text = ""
                                font_el_text = "@%s@" % (font_el_text)
                                if show_debug_message:
                                    print('font tag text:', font_el_text)
                                    pass
                                for check_item in CONT_STRING_1_SEATS_REMAINING:
                                    if check_item in font_el_text:
                                        if show_debug_message:
                                            print("match pass 1 seats remaining 1 full text:", row_text)
                                            print("match pass 1 seats remaining 2 font text:", font_el_text)
                                        is_append_this_row = False
                            else:
                                #print("row withou font tag.")
                                pass
                        except Exception as exc:
                            #print("find font text in a tag fail:", exc)
                            pass

                if show_debug_message:
                    print("is_append_this_row:", is_append_this_row)

                if is_append_this_row:
                    matched_blocks.append(row)

                    if area_auto_select_mode == CONST_FROM_TOP_TO_BOTTOM:
                        print("only need first item, break area list loop.")
                        break
                    if show_debug_message:
                        print("row_text:" + row_text)
                        print("match:" + area_keyword)

        if len(matched_blocks) == 0:
            matched_blocks = None
            is_need_refresh = True

    return is_need_refresh, matched_blocks

# PS: auto refresh condition 1: no keyword + no hyperlink.
# PS: auto refresh condition 2: with keyword + no hyperlink.
def tixcraft_area_auto_select(driver, url, config_dict):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    # read config.
    area_keyword_1 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_1"].strip()
    area_keyword_2 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_2"].strip()
    area_keyword_3 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_3"].strip()
    area_keyword_4 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_4"].strip()
    area_auto_select_mode = config_dict["tixcraft"]["area_auto_select"]["mode"]

    pass_1_seat_remaining_enable = config_dict["pass_1_seat_remaining"]
    # disable pass 1 seat remaining when target ticket number is 1.
    ticket_number = config_dict["ticket_number"]
    if ticket_number == 1:
        pass_1_seat_remaining_enable = False

    if show_debug_message:
        print("area_keyword_1, area_keyword_2:", area_keyword_1, area_keyword_2)
        print("area_keyword_3, area_keyword_4:", area_keyword_3, area_keyword_4)

    if '/ticket/area/' in url:
        #driver.switch_to.default_content()

        el = None
        try:
            el = driver.find_element(By.CSS_SELECTOR, '.zone')
        except Exception as exc:
            print("find .zone fail, do nothing.")

        if el is not None:
            is_need_refresh, areas = get_tixcraft_target_area(el, area_keyword_1, area_auto_select_mode, pass_1_seat_remaining_enable)
            if show_debug_message:
                print("is_need_refresh for keyword1:", is_need_refresh)

            if is_need_refresh:
                if areas is None:
                    if show_debug_message:
                        print("use area keyword #2", area_keyword_2)

                    # only when keyword#2 filled to query.
                    if len(area_keyword_2) > 0 :
                        is_need_refresh, areas = get_tixcraft_target_area(el, area_keyword_2, area_auto_select_mode, pass_1_seat_remaining_enable)
                        if show_debug_message:
                            print("is_need_refresh for keyword2:", is_need_refresh)

            if is_need_refresh:
                if areas is None:
                    if show_debug_message:
                        print("use area keyword #3", area_keyword_3)

                    # only when keyword#3 filled to query.
                    if len(area_keyword_3) > 0 :
                        is_need_refresh, areas = get_tixcraft_target_area(el, area_keyword_3, area_auto_select_mode, pass_1_seat_remaining_enable)
                        if show_debug_message:
                            print("is_need_refresh for keyword3:", is_need_refresh)

            if is_need_refresh:
                if areas is None:
                    if show_debug_message:
                        print("use area keyword #4", area_keyword_4)

                    # only when keyword#4 filled to query.
                    if len(area_keyword_4) > 0 :
                        is_need_refresh, areas = get_tixcraft_target_area(el, area_keyword_4, area_auto_select_mode, pass_1_seat_remaining_enable)
                        if show_debug_message:
                            print("is_need_refresh for keyword4:", is_need_refresh)

            area_target = None
            if areas is not None:
                #print("area_auto_select_mode", area_auto_select_mode)
                #print("len(areas)", len(areas))
                if len(areas) > 0:
                    target_row_index = 0

                    if area_auto_select_mode == CONST_FROM_TOP_TO_BOTTOM:
                        pass

                    if area_auto_select_mode == CONST_FROM_BOTTOM_TO_TOP:
                        target_row_index = len(areas)-1

                    if area_auto_select_mode == CONST_RANDOM:
                        target_row_index = random.randint(0,len(areas)-1)

                    #print("target_row_index", target_row_index)
                    area_target = areas[target_row_index]

            if area_target is not None:
                try:
                    #print("area text:", area_target.text)
                    area_target.click()
                except Exception as exc:
                    print("click area a link fail, start to retry...")
                    try:
                        driver.execute_script("arguments[0].click();", area_target)
                    except Exception as exc:
                        print("click area a link fail, after reftry still fail.")
                        print(exc)
                        pass

            # auto refresh for area list page.
            if is_need_refresh:
                try:
                    driver.refresh()
                except Exception as exc:
                    pass

'''
        el_selectSeat_iframe = None
        try:
            el_selectSeat_iframe = driver.find_element_by_xpath("//iframe[contains(@src,'/ticket/selectSeat/')]")
        except Exception as exc:
            #print("find seat iframe fail")
            pass

        if el_selectSeat_iframe is not None:
            driver.switch_to.frame(el_selectSeat_iframe)

            # click one seat
            el_seat = None
            try:
                el_seat = driver.find_element(By.CSS_SELECTOR, '.empty')
                if el_seat is not None:
                    try:
                        el_seat.click()
                    except Exception as exc:
                        #print("click area button fail")
                        pass
            except Exception as exc:
                print("find empty seat fail")


            # click submit button
            el_confirm_seat = None
            try:
                el_confirm_seat = driver.find_element(By.ID, 'submitSeat')
                if el_confirm_seat is not None:
                    try:
                        el_confirm_seat.click()
                    except Exception as exc:
                        #print("click area button fail")
                        pass
            except Exception as exc:
                print("find submitSeat fail")
'''

def tixcraft_ticket_agree(driver):
    click_plan = "A"
    #click_plan = "B"

    # check agree
    form_checkbox = None
    if click_plan == "A":
        try:
            form_checkbox = driver.find_element(By.ID, 'TicketForm_agree')
        except Exception as exc:
            print("find TicketForm_agree fail")

    is_finish_checkbox_click = False
    if form_checkbox is not None:
        try:
            # TODO: check the status: checked.
            if form_checkbox.is_enabled():
                if not form_checkbox.is_selected():
                    form_checkbox.click()
                is_finish_checkbox_click = True
        except Exception as exc:
            print("click TicketForm_agree fail")
            pass

    # 使用 plan B.
    #if not is_finish_checkbox_click:
    # alway not use Plan B.
    if False:
        try:
            print("use plan_b to check TicketForm_agree.")
            driver.execute_script("$(\"input[type='checkbox']\").prop('checked', true);")
            #driver.execute_script("document.getElementById(\"TicketForm_agree\").checked;")
            is_finish_checkbox_click = True
        except Exception as exc:
            print("javascript check TicketForm_agree fail")
            print(exc)
            pass

    return is_finish_checkbox_click

def tixcraft_ticket_number_auto_fill(driver, select_obj, ticket_number):
    is_ticket_number_assigned = False
    if select_obj is not None:
        try:
            # target ticket number
            select_obj.select_by_visible_text(ticket_number)
            #select.select_by_value(ticket_number)
            #select.select_by_index(int(ticket_number))
            is_ticket_number_assigned = True
        except Exception as exc:
            print("select_by_visible_text ticket_number fail")
            print(exc)

            try:
                # target ticket number
                select_obj.select_by_visible_text(ticket_number)
                #select.select_by_value(ticket_number)
                #select.select_by_index(int(ticket_number))
                is_ticket_number_assigned = True
            except Exception as exc:
                print("select_by_visible_text ticket_number fail...2")
                print(exc)

                # try buy one ticket
                try:
                    select_obj.select_by_visible_text("1")
                    #select.select_by_value("1")
                    #select.select_by_index(int(ticket_number))
                    is_ticket_number_assigned = True
                except Exception as exc:
                    print("select_by_visible_text 1 fail")
                    pass

    # Plan B.
    # if not is_ticket_number_assigned:
    if False:
        if select is not None:
            try:
                # target ticket number
                #select.select_by_visible_text(ticket_number)
                print("assign ticker number by jQuery:",ticket_number)
                driver.execute_script("$(\"input[type='select']\").val(\""+ ticket_number +"\");")
                is_ticket_number_assigned = True
            except Exception as exc:
                print("jQuery select_by_visible_text ticket_number fail (after click.)")
                print(exc)

    return is_ticket_number_assigned

def tixcraft_verify(driver, presale_code):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    ret = False

    inferred_answer_string = None
    if len(presale_code) > 0:
        inferred_answer_string = presale_code

    form_select = None
    try:
        form_select = driver.find_element(By.CSS_SELECTOR, '.zone-verify')
    except Exception as exc:
        print("find verify textbox fail")
        pass

    question_text = None
    if form_select is not None:
        try:
            question_text = form_select.text
        except Exception as exc:
            print("get text fail")

    html_text = ""
    if question_text is not None:
        if len(question_text) > 0:
            # format question text.
            html_text = question_text
            html_text = html_text.replace(u'「',u'【')
            html_text = html_text.replace(u'〔',u'【')
            html_text = html_text.replace(u'［',u'【')
            html_text = html_text.replace(u'〖',u'【')
            html_text = html_text.replace(u'[',u'【')

            html_text = html_text.replace(u'」',u'】')
            html_text = html_text.replace(u'〕',u'】')
            html_text = html_text.replace(u'］',u'】')
            html_text = html_text.replace(u'〗',u'】')
            html_text = html_text.replace(u']',u'】')

            if u'【' in html_text and u'】' in html_text:
                # PS: 這個太容易沖突，因為問題類型太多，不能直接使用。
                #inferred_answer_string = find_between(html_text, u"【", u"】")
                pass

    if show_debug_message:
        print("html_text:", html_text)

    is_options_in_question = False

    # 請輸入"YES"，代表您已詳閱且瞭解並同意。
    if inferred_answer_string is None:
        if u'輸入"YES"' in html_text:
            if u'已詳閱' in html_text or '請詳閱' in html_text:
                if u'同意' in html_text:
                    inferred_answer_string = 'YES'

    # 購票前請詳閱注意事項，並於驗證碼欄位輸入【同意】繼續購票流程。
    if inferred_answer_string is None:
        if '驗證碼' in html_text or '驗證欄位' in html_text:
            if '已詳閱' in html_text or '請詳閱' in html_text:
                if '輸入【同意】' in html_text:
                    inferred_answer_string = '同意'

    if show_debug_message:
        print("inferred_answer_string:", inferred_answer_string)


    form_input = None
    try:
        form_input = driver.find_element(By.CSS_SELECTOR, '#checkCode')
    except Exception as exc:
        print("find verify code fail")
        pass

    default_value = None
    if form_input is not None:
        try:
            default_value = form_input.get_attribute('value')
        except Exception as exc:
            print("find verify code fail")
            pass

    if default_value is None:
        default_value = ""

    if not inferred_answer_string is None:
        is_password_sent = False
        if len(default_value)==0:
            try:
                # PS: sometime may send key twice...
                form_input.clear()
                form_input.send_keys(inferred_answer_string)
                is_password_sent = True
                if show_debug_message:
                    print("sent password by bot.")
            except Exception as exc:
                pass

        if default_value == inferred_answer_string:
            if show_debug_message:
                print("sent password by previous time.")
            is_password_sent = True

        if is_password_sent:
            submit_btn = None
            try:
                submit_btn = driver.find_element(By.ID, 'submitButton')
            except Exception as exc:
                if show_debug_message:
                    print("find submit button fail")
                    print(exc)
                pass

            is_submited = False
            if not submit_btn is None:
                for i in range(3):
                    try:
                        if submit_btn.is_enabled():
                            submit_btn.click()
                            is_submited = True
                            if show_debug_message:
                                print("press submit button at time #", i+1)
                    except Exception as exc:
                        pass

                    if is_submited:
                        break

            if is_submited:
                for i in range(3):
                    time.sleep(0.1)
                    alert_ret = check_pop_alert(driver)
                    if alert_ret:
                        if show_debug_message:
                            print("press accept button at time #", i+1)                    
                        break
    else:
        if len(default_value)==0:
            try:
                form_input.click()
            except Exception as exc:
                pass

    return ret

def tixcraft_change_captcha(driver,url):
    try:
        driver.execute_script(f"document.querySelector('.verify-img').children[0].setAttribute('src','{url}');")
    except Exception as exc:
        print("edit captcha element fail")

def tixcraft_toast(driver, message):
    toast_element = None
    try:
        my_css_selector = ".remark-word"
        toast_element = driver.find_element(By.CSS_SELECTOR, my_css_selector)
        if not toast_element is None:
            driver.execute_script("arguments[0].innerHTML='%s';" % message, toast_element)
    except Exception as exc:
        print("find toast element fail")

def  tixcraft_keyin_captcha_code(driver, answer = "", auto_submit = False):
    is_verifyCode_editing = False
    is_form_sumbited = False

    # manually keyin verify code.
    # start to input verify code.
    form_verifyCode = None
    try:
        form_verifyCode = driver.find_element(By.ID, 'TicketForm_verifyCode')
    except Exception as exc:
        print("find form_verifyCode fail")

    if form_verifyCode is not None:
        is_visible = False
        try:
            if form_verifyCode.is_enabled():
                is_visible = True
        except Exception as exc:
            pass

        if is_visible:
            try:
                form_verifyCode.click()
                is_verifyCode_editing = True
            except Exception as exc:
                print("click form_verifyCode fail, tring to use javascript.")
                # plan B
                try:
                    driver.execute_script("document.getElementById(\"TicketForm_verifyCode\").focus();")
                    is_verifyCode_editing = True
                except Exception as exc:
                    print("click form_verifyCode fail.")

            #print("start to fill answer.")
            try:
                if len(answer) > 0:
                    form_verifyCode.send_keys(answer)
                if auto_submit:
                    form_verifyCode.send_keys(Keys.ENTER)
                    is_verifyCode_editing = False
                    is_form_sumbited = True
                else:
                    driver.execute_script("document.getElementById(\"TicketForm_verifyCode\").select();")
                    if len(answer) > 0:
                        tixcraft_toast(driver, "※ 按 Enter 如果答案是: " + answer)
            except Exception as exc:
                print("send_keys ocr answer fail.")

    return is_verifyCode_editing, is_form_sumbited

def tixcraft_reload_captcha(driver):
    # manually keyin verify code.
    # start to input verify code.
    ret = False
    form_captcha = None
    try:
        form_captcha = driver.find_element(By.ID, 'yw0')
        if not form_captcha is None:
            form_captcha.click()
            ret = True
    except Exception as exc:
        print("find form_captcha fail")

    return ret

#PS: credit to LinShihJhang's share
def tixcraft_auto_ocr(driver, ocr, ocr_captcha_with_submit, ocr_captcha_force_submit, previous_answer):
    print("start to ddddocr")
    from NonBrowser import NonBrowser

    is_need_redo_ocr = False
    is_form_sumbited = False

    orc_answer = None
    if not ocr is None:
        Non_Browser = NonBrowser()
        Non_Browser.Set_cookies(driver.get_cookies())
        img_base64 = base64.b64decode(Non_Browser.Request_Captcha())
        try:
            orc_answer = ocr.classification(img_base64)
        except Exception as exc:
            pass
    else:
        print("ddddocr is None")
        
    if not orc_answer is None:
        orc_answer = orc_answer.strip()
        print("orc_answer:", orc_answer)
        if len(orc_answer)==4:
            who_care_var, is_form_sumbited = tixcraft_keyin_captcha_code(driver, answer = orc_answer, auto_submit = ocr_captcha_with_submit)
        else:
            if not ocr_captcha_force_submit:
                tixcraft_keyin_captcha_code(driver)
                tixcraft_toast(driver, "※ Ocr fail...")
            else:
                is_need_redo_ocr = True
                if previous_answer != orc_answer:
                    previous_answer = orc_answer
                    print("click captcha again")
                    tixcraft_reload_captcha(driver)
                    time.sleep(0.3)
    else:
        print("orc_answer is None")
        print("previous_answer:", previous_answer)
        if previous_answer is None:
            tixcraft_keyin_captcha_code(driver)
        else:
            # page is not ready, retry again.
            is_need_redo_ocr = True

    return is_need_redo_ocr, previous_answer, is_form_sumbited

def tixcraft_ticket_main(driver, config_dict, ocr):
    auto_check_agree = config_dict["auto_check_agree"]
    
    ocr_captcha_enable = config_dict["ocr_captcha"]["enable"]
    ocr_captcha_with_submit = config_dict["ocr_captcha"]["auto_submit"]
    ocr_captcha_force_submit = config_dict["ocr_captcha"]["force_submit"]

    if auto_check_agree:
        tixcraft_ticket_agree(driver)

    # allow agree not enable to assign ticket number.
    form_select = None
    try:
        #form_select = driver.find_element(By.TAG_NAME, 'select')
        #PS: select box may appear many in the page with different price.
        form_select = driver.find_element(By.CSS_SELECTOR, '.mobile-select')
    except Exception as exc:
        print("find select fail")
        pass

    select_obj = None
    if form_select is not None:
        is_visible = False
        try:
            if form_select.is_enabled():
                is_visible = True
        except Exception as exc:
            pass
        if is_visible:
            try:
                select_obj = Select(form_select)
            except Exception as exc:
                pass

    is_ticket_number_assigned = False
    if not select_obj is None:
        row_text = None
        try:
            row_text = select_obj.first_selected_option.text
        except Exception as exc:
            pass
        if not row_text is None:
            if len(row_text) > 0:
                if row_text != "0":
                    # ticket assign.
                    is_ticket_number_assigned = True

    is_verifyCode_editing = False

    # must wait select object ready to assign ticket number.
    if not is_ticket_number_assigned:
        # only this case:"ticket number changed by bot" to play sound!
        # PS: I assume each time assign ticket number will succufully changed, so let sound play first.
        check_and_play_sound_for_captcha(config_dict)

        ticket_number = str(config_dict["ticket_number"])
        is_ticket_number_assigned = tixcraft_ticket_number_auto_fill(driver, select_obj, ticket_number)

        # must wait ticket number assign to focus captcha.
        if is_ticket_number_assigned:
            if not ocr_captcha_enable:
                is_verifyCode_editing =  tixcraft_keyin_captcha_code(driver)
            else:
                previous_answer = None
                is_verifyCode_editing = True
                for redo_ocr in range(999):
                    is_need_redo_ocr, previous_answer, is_form_sumbited = tixcraft_auto_ocr(driver, ocr, ocr_captcha_with_submit, ocr_captcha_force_submit, previous_answer)
                    if is_form_sumbited:
                        # start next loop.
                        is_verifyCode_editing = False
                        break
                    if not ocr_captcha_force_submit:
                        break
                    if not is_need_redo_ocr:
                        break

    if is_verifyCode_editing:
        print("goto is_verifyCode_editing == True")

    return is_verifyCode_editing

# PS: There are two "Next" button in kktix.
#   : 1: /events/xxx
#   : 2: /events/xxx/registrations/new
#   : This is ONLY for case-1, because case-2 lenght >5
def kktix_events_press_next_button(driver):
    ret = False

    # let javascript to enable button.
    time.sleep(0.1)

    wait = WebDriverWait(driver, 1)
    next_step_button = None
    try:
        # method #3 wait
        next_step_button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, 'div.tickets a.btn-point')))
        if not next_step_button is None:
            if next_step_button.is_enabled():
                next_step_button.click()
                ret = True
    except Exception as exc:
        print("wait form-actions div wait to be clickable Exception:")
        #print(exc)
        pass

        if not next_step_button is None:
            is_visible = False
            try:
                if next_step_button.is_enabled():
                    is_visible = True
            except Exception as exc:
                pass

            if is_visible:
                try:
                    driver.execute_script("arguments[0].click();", next_step_button)
                    ret = True
                except Exception as exc:
                    pass

    return ret

#   : This is for case-2 next button.
def kktix_press_next_button(driver):
    ret = False

    wait = WebDriverWait(driver, 1)
    next_step_button = None
    try:
        # method #1
        #form_actions_div = None
        #form_actions_div = driver.find_element(By.ID, 'registrationsNewApp')
        #next_step_button = form_actions_div.find_element(By.CSS_SELECTOR, 'div.form-actions button.btn-primary')

        # method #2
        # next_step_button = driver.find_element(By.CSS_SELECTOR, '#registrationsNewApp div.form-actions button.btn-primary')

        # method #3 wait
        next_step_button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, '#registrationsNewApp div.form-actions button.btn-primary')))
        if not next_step_button is None:
            if next_step_button.is_enabled():
                next_step_button.click()
                ret = True

    except Exception as exc:
        print("wait form-actions div wait to be clickable Exception:")
        print(exc)
        #pass

        if not next_step_button is None:
            is_visible = False
            try:
                if next_step_button.is_enabled():
                    is_visible = True
            except Exception as exc:
                pass

            if is_visible:
                try:
                    driver.execute_script("arguments[0].click();", next_step_button)
                    ret = True
                except Exception as exc:
                    pass
    return ret

def kktix_captcha_text_value(captcha_inner_div):
    ret = ""

    if captcha_inner_div is not None:
        try:
            captcha_password_text = captcha_inner_div.find_element(By.TAG_NAME, "input")
            if not captcha_password_text is None:
                ret = captcha_password_text.get_attribute('value')
            else:
                print("find captcha input field fail")
        except Exception as exc:
            print("find captcha_inner_div Exception:")
            #print(exc)
            pass

    return ret

def kktix_input_captcha_text(captcha_password_input_tag, inferred_answer_string, force_overwrite = False):
    show_debug_message = True       # debug.
    #show_debug_message = False      # online

    is_cpatcha_sent = False
    inputed_captcha_text = ""

    if not captcha_password_input_tag is None:
        if force_overwrite:
            try:
                captcha_password_input_tag.send_keys(inferred_answer_string)
                print("send captcha keys:" + inferred_answer_string)
                is_cpatcha_sent = True
                inputed_captcha_text = inferred_answer_string
            except Exception as exc:
                pass
        else:
            # not force overwrite:
            inputed_captcha_text = None
            try:
                inputed_captcha_text = captcha_password_input_tag.get_attribute('value')
            except Exception as exc:
                pass
            if inputed_captcha_text is None:
                inputed_captcha_text = ""

            if len(inputed_captcha_text) == 0:
                try:
                    captcha_password_input_tag.send_keys(inferred_answer_string)
                    print("send captcha keys:" + inferred_answer_string)
                    is_cpatcha_sent = True
                except Exception as exc:
                    pass

    return is_cpatcha_sent

def kktix_travel_price_list(driver, ticket_number, pass_1_seat_remaining_enable, kktix_area_keyword_1, kktix_area_keyword_1_and):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    areas = None
    is_ticket_number_assigned = False

    ticket_price_list = None
    try:
        ticket_price_list = driver.find_elements(By.CSS_SELECTOR, '.display-table-row')
    except Exception as exc:
        ticket_price_list = None
        print("find ticket-price span Exception:")
        print(exc)
        pass

    price_list_count = 0
    if ticket_price_list is not None:
        price_list_count = len(ticket_price_list)
        if show_debug_message:
            print("found price count:", price_list_count)
            print("start to travel rows..........")
    else:
        print("find ticket-price span fail")

    is_travel_interrupted = False

    if price_list_count > 0:
        areas = []

        # clean stop word.
        kktix_area_keyword_1 = format_keyword_string(kktix_area_keyword_1)
        kktix_area_keyword_1_and = format_keyword_string(kktix_area_keyword_1_and)

        if show_debug_message:
            print('kktix_area_keyword_1:', kktix_area_keyword_1)
            print('kktix_area_keyword_1_and:', kktix_area_keyword_1_and)

        row_index = 0
        for row in ticket_price_list:
            row_index += 1

            row_text = ""
            try:
                row_text = row.text
                if show_debug_message:
                    print("get text:", row_text, ",at row:", row_index)
            except Exception as exc:
                row_text = ""
                is_travel_interrupted = True
                print("get text fail.")

            if row_text is None:
                row_text = ""

            if len(row_text) > 0:
                # clean stop word.
                row_text = format_keyword_string(row_text)

                # check ticket input textbox.
                ticket_price_input = None
                try:
                    ticket_price_input = row.find_element(By.CSS_SELECTOR, "input[type='text']")
                except Exception as exc:
                    pass

                if ticket_price_input is not None:
                    current_ticket_number = ""
                    is_visible = False

                    try:
                        current_ticket_number = str(ticket_price_input.get_attribute('value')).strip()
                        is_visible = ticket_price_input.is_enabled()
                    except Exception as exc:
                        pass

                    if len(current_ticket_number) > 0:
                        if current_ticket_number != "0":
                            is_ticket_number_assigned = True

                    if is_ticket_number_assigned:
                        # no need to travel
                        break

                    is_danger_notice = False
                    if ticket_number > 1:
                        # start to check danger notice.
                        span_danger_popup = None
                        try:
                            span_danger_popup = row.find_element(By.CSS_SELECTOR, "span.danger")
                            if span_danger_popup.is_displayed():
                                is_danger_notice = True
                        except Exception as exc:
                            pass

                        if is_danger_notice:
                            # skip this row, because assign will fail, or fill ticket number as 1.
                            if pass_1_seat_remaining_enable:
                                continue

                    if is_visible:
                        is_match_area = False
                        match_area_code = 0

                        if len(kktix_area_keyword_1) == 0:
                            # keyword #1, empty, direct add to list.
                            is_match_area = True
                            match_area_code = 1
                        else:
                            # MUST match keyword #1.
                            if kktix_area_keyword_1 in row_text:
                                #print('match keyword#1')

                                # because of logic between keywords is AND!
                                if len(kktix_area_keyword_1_and) == 0:
                                    #print('keyword#2 is empty, directly match.')
                                    # keyword #2 is empty, direct append.
                                    is_match_area = True
                                    match_area_code = 2
                                else:
                                    if kktix_area_keyword_1_and in row_text:
                                        #print('match keyword#2')
                                        is_match_area = True
                                        match_area_code = 3
                                    else:
                                        #print('not match keyword#2')
                                        pass
                            else:
                                #print('not match keyword#1')
                                pass

                        if show_debug_message:
                            print("is_match_area:", is_match_area)
                            print("match_area_code:", match_area_code)

                        if is_match_area:
                            areas.append(row)

            if is_travel_interrupted:
                # not sure to break or continue..., maybe break better.
                break
    else:
        if show_debug_message:
            print("no any price list found.")
        pass

    # unknow issue...
    if is_travel_interrupted:
        pass

    return is_ticket_number_assigned, areas

def kktix_assign_ticket_number(driver, ticket_number, pass_1_seat_remaining_enable, kktix_area_auto_select_mode, kktix_area_keyword_1, kktix_area_keyword_1_and):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    ticket_number_str = str(ticket_number)

    is_ticket_number_assigned, areas = kktix_travel_price_list(driver, ticket_number, pass_1_seat_remaining_enable, kktix_area_keyword_1, kktix_area_keyword_1_and)

    target_area = None
    if not is_ticket_number_assigned:
        if areas is not None:
            if len(areas) > 0:
                target_row_index = 0

                if kktix_area_auto_select_mode == CONST_FROM_TOP_TO_BOTTOM:
                    pass

                if kktix_area_auto_select_mode == CONST_FROM_BOTTOM_TO_TOP:
                    target_row_index = len(areas)-1

                if kktix_area_auto_select_mode == CONST_RANDOM:
                    target_row_index = random.randint(0,len(areas)-1)

                if show_debug_message:
                    print("target_row_index", target_row_index)
                target_area = areas[target_row_index]

    ticket_price_input = None
    if target_area is not None:
        if show_debug_message:
            print('try to get input box element.')
        try:
            #print("target_area text", target_area.text)
            ticket_price_input = target_area.find_element(By.CSS_SELECTOR, "input[type='text']")
        except Exception as exc:
            pass

    current_ticket_number = ""
    is_visible = False
    if ticket_price_input is not None:
        if show_debug_message:
            print("try to get input box value.")
        try:
            current_ticket_number = str(ticket_price_input.get_attribute('value')).strip()
            is_visible = ticket_price_input.is_enabled()
        except Exception as exc:
            pass

    if is_visible and len(current_ticket_number) > 0:
        if current_ticket_number == "0":
            try:
                print("asssign ticket number:%s" % ticket_number_str)
                ticket_price_input.clear()
                ticket_price_input.send_keys(ticket_number_str)

                is_ticket_number_assigned = True
            except Exception as exc:
                print("asssign ticket number to ticket-price field Exception:")
                print(exc)
                try:
                    ticket_price_input.clear()
                    ticket_price_input.send_keys("1")
                    is_ticket_number_assigned = True
                except Exception as exc2:
                    pass
        else:
            if show_debug_message:
                print("value already assigned.")
            # already assigned.
            is_ticket_number_assigned = True

    return is_ticket_number_assigned

def kktix_get_web_datetime(registrationsNewApp_div):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    web_datetime = None

    is_found_web_datetime = False

    el_web_datetime_list = None
    if not registrationsNewApp_div is None:
        try:
            el_web_datetime_list = registrationsNewApp_div.find_elements(By.TAG_NAME, 'td')
        except Exception as exc:
            if show_debug_message:
                print("find td.ng-binding Exception")
                print(exc)
            pass
        #print("is_found_web_datetime", is_found_web_datetime)

    if el_web_datetime_list is not None:
        el_web_datetime_list_count = len(el_web_datetime_list)
        if el_web_datetime_list_count > 0:
            el_web_datetime = None
            for el_web_datetime in el_web_datetime_list:
                el_web_datetime_text = None
                try:
                    el_web_datetime_text = el_web_datetime.text
                    if show_debug_message:
                        print("el_web_datetime_text:", el_web_datetime_text)
                except Exception as exc:
                    if show_debug_message:
                        print('parse web datetime fail:')
                        print(exc)
                    pass

                if el_web_datetime_text is not None:
                    if len(el_web_datetime_text) > 0:
                        now = datetime.now()
                        #print("now:", now)
                        for guess_year in range(now.year,now.year+3):
                            current_year = str(guess_year)
                            if current_year in el_web_datetime_text:
                                if u'/' in el_web_datetime_text:
                                    web_datetime = el_web_datetime_text
                                    is_found_web_datetime = True
                                    break
                        if is_found_web_datetime:
                            break
    else:
        print("find td.ng-binding fail")

    return web_datetime

def kktix_check_agree_checkbox(driver):
    is_need_refresh = False
    is_finish_checkbox_click = False

    person_agree_terms_checkbox = None
    try:
        person_agree_terms_checkbox = driver.find_element(By.ID, 'person_agree_terms')
    except Exception as exc:
        print("find person_agree_terms checkbox Exception")
        pass

    if person_agree_terms_checkbox is not None:
        is_visible = False
        try:
            if person_agree_terms_checkbox.is_enabled():
                is_visible = True
        except Exception as exc:
            pass

        if is_visible:
            is_checkbox_checked = False
            try:
                if person_agree_terms_checkbox.is_selected():
                    is_checkbox_checked = True
            except Exception as exc:
                pass

            if not is_checkbox_checked:
                #print('send check to checkbox')
                try:
                    person_agree_terms_checkbox.click()
                    is_finish_checkbox_click = True
                except Exception as exc:
                    pass
            else:
                #print('checked')
                is_finish_checkbox_click = True
        else:
            is_need_refresh = True
    else:
        is_need_refresh = True

    if is_need_refresh:
        print("find person_agree_terms checkbox fail, do refresh page.")

    return is_need_refresh, is_finish_checkbox_click

def kktix_check_register_status(url):
    #ex: https://xxx.kktix.cc/events/xxx
    prefix_list = ['.com/events/','.cc/events/']
    postfix = '/registrations/new'

    is_match_event_code = False
    event_code = ""
    for prefix in prefix_list:
        event_code = find_between(url,prefix,postfix)
        if len(event_code) > 0:
            is_match_event_code = True
            #print('event_code:',event_code)
            break

    html_result = None
    if is_match_event_code:
        url = "https://kktix.com/g/events/%s/register_info" % (event_code)
        #print('event_code:',event_code)
        #print("url:", url)

        user_agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36'
        headers = {"Accept-Language": "zh-TW,zh;q=0.5", 'User-Agent': user_agent}

        try:
            html_result = requests.get(url , headers=headers, timeout=0.7, allow_redirects=False)
        except Exception as exc:
            html_result = None
            print("send reg_info request fail:")
            print(exc)

    registerStatus = None
    if not html_result is None:
        status_code = html_result.status_code
        #print("status_code:",status_code)

        if status_code == 200:
            html_text = html_result.text
            #print("html_text:", html_text)

            try:
                jsLoads = json.loads(html_text)
                if 'inventory' in jsLoads:
                    if 'registerStatus' in jsLoads['inventory']:
                        registerStatus = jsLoads['inventory']['registerStatus']
            except Exception as exc:
                print("load reg_info json fail:")
                print(exc)
                pass

    #print("registerStatus:", registerStatus)
    return registerStatus

def get_answer_string_from_web_date(CONST_EXAMPLE_SYMBOL, registrationsNewApp_div, captcha_text_div_text):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    inferred_answer_string = None

    is_need_parse_web_datetime = False
    # '半形阿拉伯數字' & '半形數字'
    if u'半形' in captcha_text_div_text and u'字' in captcha_text_div_text:
        if u'演出日期' in captcha_text_div_text:
            is_need_parse_web_datetime = True
        if u'活動日期' in captcha_text_div_text:
            is_need_parse_web_datetime = True
        if u'表演日期' in captcha_text_div_text:
            is_need_parse_web_datetime = True
        if u'開始日期' in captcha_text_div_text:
            is_need_parse_web_datetime = True
        if u'演唱會日期' in captcha_text_div_text:
            is_need_parse_web_datetime = True
        if u'展覽日期' in captcha_text_div_text:
            is_need_parse_web_datetime = True
        if u'音樂會日期' in captcha_text_div_text:
            is_need_parse_web_datetime = True
    if u'the date of the show you purchased' in captcha_text_div_text:
        is_need_parse_web_datetime = True

    if show_debug_message:
        print("is_need_parse_web_datetime:", is_need_parse_web_datetime)

    if is_need_parse_web_datetime:
        web_datetime = kktix_get_web_datetime(registrationsNewApp_div)
        if not web_datetime is None:
            if show_debug_message:
                print("web_datetime:", web_datetime)

            captcha_text_formatted = format_question_string(CONST_EXAMPLE_SYMBOL, captcha_text_div_text)
            if show_debug_message:
                print("captcha_text_formatted", captcha_text_formatted)

            my_datetime_foramted = None

            # MMDD
            if my_datetime_foramted is None:
                if u'4位半形' in captcha_text_formatted:
                    my_datetime_foramted = "%m%d"

            # for "如為2月30日，請輸入0230"
            if my_datetime_foramted is None:
                if CONST_EXAMPLE_SYMBOL in captcha_text_formatted:
                    right_part = captcha_text_formatted.split(CONST_EXAMPLE_SYMBOL)[1]
                    number_text = find_continuous_number(right_part)

                    my_anwser_formated = convert_string_to_pattern(number_text, dynamic_length=False)
                    if my_anwser_formated == u"[\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d]":
                        my_datetime_foramted = "%Y%m%d"
                    if my_anwser_formated == u"[\\d][\\d][\\d][\\d]":
                        my_datetime_foramted = "%m%d"
                    #print("my_datetime_foramted:", my_datetime_foramted)

            if my_datetime_foramted is None:
                now = datetime.now()
                for guess_year in range(now.year-4,now.year+2):
                    current_year = str(guess_year)
                    if current_year in captcha_text_formatted:
                        my_hint_index = captcha_text_formatted.find(current_year)
                        my_hint_anwser = captcha_text_formatted[my_hint_index:]
                        #print("my_hint_anwser:", my_hint_anwser)
                        # get after.
                        my_delimitor_symbol = CONST_EXAMPLE_SYMBOL
                        if my_delimitor_symbol in my_hint_anwser:
                            my_delimitor_index = my_hint_anwser.find(my_delimitor_symbol)
                            my_hint_anwser = my_hint_anwser[my_delimitor_index+len(my_delimitor_symbol):]
                        #print("my_hint_anwser:", my_hint_anwser)
                        # get before.
                        my_delimitor_symbol = u'，'
                        if my_delimitor_symbol in my_hint_anwser:
                            my_delimitor_index = my_hint_anwser.find(my_delimitor_symbol)
                            my_hint_anwser = my_hint_anwser[:my_delimitor_index]
                        my_delimitor_symbol = u'。'
                        if my_delimitor_symbol in my_hint_anwser:
                            my_delimitor_index = my_hint_anwser.find(my_delimitor_symbol)
                            my_hint_anwser = my_hint_anwser[:my_delimitor_index]
                        # PS: space may not is delimitor...
                        my_delimitor_symbol = u' '
                        if my_delimitor_symbol in my_hint_anwser:
                            my_delimitor_index = my_hint_anwser.find(my_delimitor_symbol)
                            my_hint_anwser = my_hint_anwser[:my_delimitor_index]
                        #remove last char.
                        remove_last_char_list = [')','(','.','。','）','（','[',']']
                        for check_char in remove_last_char_list:
                            if my_hint_anwser[-1:]==check_char:
                                my_hint_anwser = my_hint_anwser[:-1]

                        my_anwser_formated = convert_string_to_pattern(my_hint_anwser, dynamic_length=False)
                        if my_anwser_formated == u"[\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d]":
                            my_datetime_foramted = "%Y%m%d"
                        if my_anwser_formated == u"[\\d][\\d][\\d][\\d]/[\\d][\\d]/[\\d][\\d]":
                            my_datetime_foramted = "%Y/%m/%d"

                        if show_debug_message:
                            print("my_hint_anwser:", my_hint_anwser)
                            print("my_anwser_formated:", my_anwser_formated)
                            print("my_datetime_foramted:", my_datetime_foramted)
                        break

            if not my_datetime_foramted is None:
                my_delimitor_symbol = u' '
                if my_delimitor_symbol in web_datetime:
                    web_datetime = web_datetime[:web_datetime.find(my_delimitor_symbol)]
                date_time = datetime.strptime(web_datetime,u"%Y/%m/%d")
                if show_debug_message:
                    print("date_time:", date_time)
                ans = None
                try:
                    ans = date_time.strftime(my_datetime_foramted)
                except Exception as exc:
                    pass
                inferred_answer_string = ans
                if show_debug_message:
                    print("my_anwser:", ans)

    return inferred_answer_string

def get_answer_string_from_web_time(CONST_EXAMPLE_SYMBOL, registrationsNewApp_div, captcha_text_div_text):
    show_debug_message = True       # debug.
    #show_debug_message = False      # online

    inferred_answer_string = None

    # parse '演出時間'
    is_need_parse_web_time = False
    if u'半形' in captcha_text_div_text:
        if u'演出時間' in captcha_text_div_text:
            is_need_parse_web_time = True
        if u'表演時間' in captcha_text_div_text:
            is_need_parse_web_time = True
        if u'開始時間' in captcha_text_div_text:
            is_need_parse_web_time = True
        if u'演唱會時間' in captcha_text_div_text:
            is_need_parse_web_time = True
        if u'展覽時間' in captcha_text_div_text:
            is_need_parse_web_time = True
        if u'音樂會時間' in captcha_text_div_text:
            is_need_parse_web_time = True
        if u'the time of the show you purchased' in captcha_text_div_text:
            is_need_parse_web_time = True

    #print("is_need_parse_web_time", is_need_parse_web_time)
    if is_need_parse_web_time:
        web_datetime = None
        if not registrationsNewApp_div is None:
            web_datetime = kktix_get_web_datetime(registrationsNewApp_div)
        if not web_datetime is None:
            tmp_text = format_question_string(CONST_EXAMPLE_SYMBOL, captcha_text_div_text)

            my_datetime_foramted = None

            if my_datetime_foramted is None:
                my_hint_anwser = tmp_text

                my_delimitor_symbol = CONST_EXAMPLE_SYMBOL
                if my_delimitor_symbol in my_hint_anwser:
                    my_delimitor_index = my_hint_anwser.find(my_delimitor_symbol)
                    my_hint_anwser = my_hint_anwser[my_delimitor_index+len(my_delimitor_symbol):]
                #print("my_hint_anwser:", my_hint_anwser)
                # get before.
                my_delimitor_symbol = u'，'
                if my_delimitor_symbol in my_hint_anwser:
                    my_delimitor_index = my_hint_anwser.find(my_delimitor_symbol)
                    my_hint_anwser = my_hint_anwser[:my_delimitor_index]
                my_delimitor_symbol = u'。'
                if my_delimitor_symbol in my_hint_anwser:
                    my_delimitor_index = my_hint_anwser.find(my_delimitor_symbol)
                    my_hint_anwser = my_hint_anwser[:my_delimitor_index]
                # PS: space may not is delimitor...
                my_delimitor_symbol = u' '
                if my_delimitor_symbol in my_hint_anwser:
                    my_delimitor_index = my_hint_anwser.find(my_delimitor_symbol)
                    my_hint_anwser = my_hint_anwser[:my_delimitor_index]
                my_anwser_formated = convert_string_to_pattern(my_hint_anwser, dynamic_length=False)
                #print("my_hint_anwser:", my_hint_anwser)
                #print(u"my_anwser_formated:", my_anwser_formated)
                if my_anwser_formated == u"[\\d][\\d][\\d][\\d]":
                    my_datetime_foramted = "%H%M"
                    if u'12小時' in tmp_text:
                        my_datetime_foramted = "%I%M"

                if my_anwser_formated == u"[\\d][\\d]:[\\d][\\d]":
                    my_datetime_foramted = "%H:%M"
                    if u'12小時' in tmp_text:
                        my_datetime_foramted = "%I:%M"

            if not my_datetime_foramted is None:
                date_delimitor_symbol = u'('
                if date_delimitor_symbol in web_datetime:
                    date_delimitor_symbol_index = web_datetime.find(date_delimitor_symbol)
                    if date_delimitor_symbol_index > 8:
                        web_datetime = web_datetime[:date_delimitor_symbol_index-1]
                date_time = datetime.strptime(web_datetime,u"%Y/%m/%d %H:%M")
                #print("date_time:", date_time)
                ans = None
                try:
                    ans = date_time.strftime(my_datetime_foramted)
                except Exception as exc:
                    pass
                inferred_answer_string = ans
                #print(u"my_anwser:", ans)

    return inferred_answer_string

def check_answer_keep_symbol(captcha_text_div_text):
    is_need_keep_symbol = False

    # format text
    keep_symbol_tmp = captcha_text_div_text
    keep_symbol_tmp = keep_symbol_tmp.replace(u'也',u'須')
    keep_symbol_tmp = keep_symbol_tmp.replace(u'必須',u'須')

    keep_symbol_tmp = keep_symbol_tmp.replace(u'全都',u'都')
    keep_symbol_tmp = keep_symbol_tmp.replace(u'全部都',u'都')

    keep_symbol_tmp = keep_symbol_tmp.replace(u'一致',u'相同')
    keep_symbol_tmp = keep_symbol_tmp.replace(u'一樣',u'相同')
    keep_symbol_tmp = keep_symbol_tmp.replace(u'相等',u'相同')

    if u'符號須都相同' in keep_symbol_tmp:
        is_need_keep_symbol = True

    if u'符號都相同' in keep_symbol_tmp:
        is_need_keep_symbol = True

    if u'符號須相同' in keep_symbol_tmp:
        is_need_keep_symbol = True

    return is_need_keep_symbol

def get_answer_list_from_question_string(registrationsNewApp_div, captcha_text_div_text):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    inferred_answer_string = None
    answer_list = None
    is_need_keep_symbol = check_answer_keep_symbol(captcha_text_div_text)

    CONST_EXAMPLE_SYMBOL = "範例"

    # 請在下方空白處輸入引號內文字：
    if inferred_answer_string is None:
        is_use_quota_message = False
        if u"「" in captcha_text_div_text and u"」" in captcha_text_div_text:
            if u'下' in captcha_text_div_text and u'空' in captcha_text_div_text and u'輸入' in captcha_text_div_text and u'引號' in captcha_text_div_text and u'字' in captcha_text_div_text:
                is_use_quota_message = True
            if u'半形' in captcha_text_div_text and u'輸入' in captcha_text_div_text and u'引號' in captcha_text_div_text and u'字' in captcha_text_div_text:
                is_use_quota_message = True
        #print("is_use_quota_message:" , is_use_quota_message)
        if is_use_quota_message:
            inferred_answer_string = find_between(captcha_text_div_text, u"「", u"」")
            #print("find captcha text:" , inferred_answer_string)

    if inferred_answer_string is None:
        is_use_quota_message = False
        if u"【" in captcha_text_div_text and u"】" in captcha_text_div_text:
            if u'下' in captcha_text_div_text and u'空' in captcha_text_div_text and u'輸入' in captcha_text_div_text and u'引號' in captcha_text_div_text and u'字' in captcha_text_div_text:
                is_use_quota_message = True
            if u'半形' in captcha_text_div_text and u'輸入' in captcha_text_div_text and u'引號' in captcha_text_div_text and u'字' in captcha_text_div_text:
                is_use_quota_message = True
        #print("is_use_quota_message:" , is_use_quota_message)
        if is_use_quota_message:
            inferred_answer_string = find_between(captcha_text_div_text, u"【", u"】")
            #print("find captcha text:" , inferred_answer_string)

    # parse '演出日期'
    if inferred_answer_string is None:
        inferred_answer_string = get_answer_string_from_web_date(CONST_EXAMPLE_SYMBOL, registrationsNewApp_div, captcha_text_div_text)

    # parse '演出時間'
    if inferred_answer_string is None:
        inferred_answer_string = get_answer_string_from_web_time(CONST_EXAMPLE_SYMBOL, registrationsNewApp_div, captcha_text_div_text)

    # name of event.
    if inferred_answer_string is None:
        if u"name of event" in captcha_text_div_text:
            if u'(' in captcha_text_div_text and u')' in captcha_text_div_text and u'ans:' in captcha_text_div_text.lower():
                target_symbol = u"("
                star_index = captcha_text_div_text.find(target_symbol)
                target_symbol = u":"
                star_index = captcha_text_div_text.find(target_symbol, star_index)
                target_symbol = u")"
                end_index = captcha_text_div_text.find(target_symbol, star_index)
                inferred_answer_string = captcha_text_div_text[star_index+1:end_index]
                #print("inferred_answer_string:", inferred_answer_string)

    # 二題式，組合問題。
    is_combine_two_question = False
    if u"第一題" in captcha_text_div_text and u"第二題" in captcha_text_div_text:
        is_combine_two_question = True
    if u"Q1." in captcha_text_div_text and u"Q2." in captcha_text_div_text:
        if u"二題" in captcha_text_div_text:
            is_combine_two_question = True
        if u"2題" in captcha_text_div_text:
            is_combine_two_question = True
    if u"Q1:" in captcha_text_div_text and u"Q2:" in captcha_text_div_text:
        if u"二題" in captcha_text_div_text:
            is_combine_two_question = True
        if u"2題" in captcha_text_div_text:
            is_combine_two_question = True
    if u"Q1 " in captcha_text_div_text and u"Q2 " in captcha_text_div_text:
        if u"二題" in captcha_text_div_text:
            is_combine_two_question = True
        if u"2題" in captcha_text_div_text:
            is_combine_two_question = True
    if is_combine_two_question:
        inferred_answer_string = None
    #print("is_combine_two_question:", is_combine_two_question)


    # still no answer.
    if inferred_answer_string is None:
        if not is_combine_two_question:
            answer_list = get_answer_list_by_question(CONST_EXAMPLE_SYMBOL, captcha_text_div_text)
            if show_debug_message:
                print("guess answer list:", answer_list)
        else:
            if show_debug_message:
                print("skip to guess answer because of combine question...")

    else:
        if show_debug_message:
            print("got an inferred_answer_string:", inferred_answer_string)


    return inferred_answer_string, answer_list

def kktix_reg_new_captcha(registrationsNewApp_div, captcha_inner_div):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    captcha_text_div = None
    try:
        captcha_text_div = captcha_inner_div.find_element(By.TAG_NAME, "p")
    except Exception as exc:
        pass
        print("find p tag(captcha_text_div) fail")
        print(exc)

    captcha_text_div_text = None
    if captcha_text_div is not None:
        try:
            captcha_text_div_text = captcha_text_div.text
        except Exception as exc:
            pass

    # try to auto answer options.
    answer_list = None
    inferred_answer_string = None

    if not captcha_text_div_text is None:
        if show_debug_message:
            print("captcha_text_div_text:", captcha_text_div_text)
        inferred_answer_string, answer_list = get_answer_list_from_question_string(registrationsNewApp_div, captcha_text_div_text)

    return inferred_answer_string, answer_list

def kktix_double_check_all_text_value(driver, ticket_number_str):
    is_do_press_next_button = False

    # double check ticket input textbox.
    ticket_price_input_list = None
    try:
        # PS: unable directly access text's value attribute via css selector or xpath on KKTix!
        my_css_selector = "input[type='text']"
        #print("my_css_selector:", my_css_selector)
        ticket_price_input_list = driver.find_elements(By.CSS_SELECTOR, my_css_selector)
    except Exception as exc:
        pass

    if ticket_price_input_list is not None:
        #print("bingo, found one of ticket number textbox.")
        row_index = 0
        for ticket_price_input in ticket_price_input_list:
            row_index += 1
            current_ticket_number = ""
            try:
                current_ticket_number = str(ticket_price_input.get_attribute('value')).strip()
            except Exception as exc:
                pass
            if current_ticket_number is None:
                current_ticket_number = ""
            if len(current_ticket_number) > 0:
                #print(row_index, "current_ticket_number:", current_ticket_number)
                if current_ticket_number == ticket_number_str:
                    #print("bingo, match target ticket number.")

                    # ONLY, this case to auto press next button.
                    is_do_press_next_button = True
                    break

    return is_do_press_next_button

def kktix_reg_new_main(driver, answer_index, is_finish_checkbox_click, config_dict):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    # part 1: check div.
    registrationsNewApp_div = None
    try:
        registrationsNewApp_div = driver.find_element(By.CSS_SELECTOR, '#registrationsNewApp')
    except Exception as exc:
        pass
        #print("find input fail:", exc)

    # part 2: assign ticket number
    ticket_number_str = str(config_dict["ticket_number"])

    pass_1_seat_remaining_enable = config_dict["pass_1_seat_remaining"]
    # disable pass 1 seat remaining when target ticket number is 1.
    ticket_number = config_dict["ticket_number"]
    if ticket_number == 1:
        pass_1_seat_remaining_enable = False

    is_ticket_number_assigned = False
    if not registrationsNewApp_div is None:
        kktix_area_auto_select_mode = config_dict["kktix"]["area_mode"]
        kktix_area_keyword_1 = config_dict["kktix"]["area_keyword_1"].strip()
        kktix_area_keyword_1_and = config_dict["kktix"]["area_keyword_1_and"].strip()
        kktix_area_keyword_2 = config_dict["kktix"]["area_keyword_2"].strip()
        kktix_area_keyword_2_and = config_dict["kktix"]["area_keyword_2_and"].strip()

        for retry_index in range(2):
            is_ticket_number_assigned = kktix_assign_ticket_number(driver, ticket_number, pass_1_seat_remaining_enable, kktix_area_auto_select_mode, kktix_area_keyword_1, kktix_area_keyword_1_and)
            if not is_ticket_number_assigned:
                is_ticket_number_assigned = kktix_assign_ticket_number(driver, ticket_number, pass_1_seat_remaining_enable, kktix_area_auto_select_mode, kktix_area_keyword_1, kktix_area_keyword_1_and)
                #PS: keyword_2 not input, means all rows are match.
                if not is_ticket_number_assigned:
                    is_ticket_number_assigned = kktix_assign_ticket_number(driver, ticket_number, pass_1_seat_remaining_enable, kktix_area_auto_select_mode, kktix_area_keyword_2, kktix_area_keyword_2_and)
            if is_ticket_number_assigned:
                break
    #print('is_ticket_number_assigned:', is_ticket_number_assigned)

    # part 3: captcha
    is_captcha_appear = False
    is_captcha_appear_and_filled_password = False
    answer_list = None

    # TODO: in guess options mode, no need to travel div again.
    captcha_inner_div = None

    if is_ticket_number_assigned:
        try:
            captcha_inner_div = driver.find_element(By.CSS_SELECTOR, '.custom-captcha-inner')
        except Exception as exc:
            pass

    captcha_password_input_tag = None
    if not captcha_inner_div is None:
        try:
            captcha_password_input_tag = captcha_inner_div.find_element(By.TAG_NAME, "input")
            if show_debug_message:
                print("found captcha input field")
        except Exception as exc:
            pass

    if not captcha_password_input_tag is None:
        inferred_answer_string = None
        if captcha_inner_div is not None:
            is_captcha_appear = True
            if show_debug_message:
                print("found captcha_inner_div layor.")

            auto_guess_options = config_dict["kktix"]["auto_guess_options"]
            user_guess_string = config_dict["kktix"]["user_guess_string"]

            if len(user_guess_string) > 0:
                inferred_answer_string = user_guess_string
            else:
                if auto_guess_options:
                    inferred_answer_string, answer_list = kktix_reg_new_captcha(registrationsNewApp_div, captcha_inner_div)

            if inferred_answer_string is not None:
                # password is not None, try to send.
                is_cpatcha_sent = kktix_input_captcha_text(captcha_password_input_tag, inferred_answer_string)
                if is_cpatcha_sent:
                    is_captcha_appear_and_filled_password = True
            else:
                is_try_to_focus = False
                if answer_list is None:
                    is_try_to_focus = True
                else:
                    if len(answer_list)==0:
                        is_try_to_focus = True

                if is_try_to_focus:
                    # password is None, focus to input, and play sound.
                    inputed_captcha_text = None
                    try:
                        inputed_captcha_text = captcha_password_input_tag.get_attribute('value')
                    except Exception as exc:
                        pass
                    if inputed_captcha_text is None:
                        inputed_captcha_text = ""
                    if len(inputed_captcha_text) == 0:
                        try:
                            #print("focus() captcha to input.")
                            check_and_play_sound_for_captcha(config_dict)
                            captcha_password_input_tag.click()
                            time.sleep(1)
                            # let user to input answer, bot sleep 1 second.
                        except Exception as exc:
                            pass

        if show_debug_message:
            print("is_captcha_appear:", is_captcha_appear)
            print("is_captcha_appear_and_filled_password:", is_captcha_appear_and_filled_password)

    # retry check agree checkbox again.
    if not is_finish_checkbox_click:
        auto_check_agree = config_dict["auto_check_agree"]
        if auto_check_agree:
            is_need_refresh, is_finish_checkbox_click = kktix_check_agree_checkbox(driver)

    is_do_press_next_button = False
    if is_ticket_number_assigned:
        auto_press_next_step_button = config_dict["kktix"]["auto_press_next_step_button"]
        if auto_press_next_step_button:
            if is_finish_checkbox_click:
                is_do_press_next_button = kktix_double_check_all_text_value(driver, ticket_number_str)
            else:
                print("still unable to assign checkbox as selected.")

    if show_debug_message:
        print("is_do_press_next_button:", is_do_press_next_button)

    if is_do_press_next_button:
        if not is_captcha_appear:
            click_ret = kktix_press_next_button(driver)
        else:
            if is_captcha_appear_and_filled_password:
                # for easy guest mode, we can fill the password correct.
                #print("for easy guest mode, we can fill the password correct.")
                click_ret = kktix_press_next_button(driver)
            else:
                # not is easy guest mode.
                #print("# not is easy guest mode.")

                # merge with password dictionary, so need remove duplicate list
                # PS: now, there are no password dictionary.
                if not answer_list is None:
                    if len(answer_list) > 1:
                        unique = [x for i, x in enumerate(answer_list) if answer_list.index(x) == i]
                        answer_list = unique

                # start to try answers.
                if not answer_list is None:
                    # for popular event
                    if len(answer_list) > 0:
                        if answer_index < len(answer_list)-1:
                            if kktix_captcha_text_value(captcha_inner_div) == "":
                                answer_index += 1
                                answer_string = answer_list[answer_index]

                                if len(answer_string) > 0:
                                    print("send answer:" + answer_string)
                                    is_cpatcha_sent = kktix_input_captcha_text(captcha_password_input_tag, answer_string)
                                    if is_cpatcha_sent:
                                        kktix_press_next_button(driver)
                        else:
                            # exceed index, do nothing.
                            pass
                else:
                    # captcha appeared, but we don't have answer list.
                    pass


    return answer_index

def kktix_reg_new(driver, url, answer_index, kktix_register_status_last, config_dict):
    registerStatus = kktix_register_status_last

    # auto refresh for area list page.
    is_need_refresh = False
    is_finish_checkbox_click = False

    if registerStatus is None:
        registerStatus = kktix_check_register_status(url)
        if not registerStatus is None:
            print("registerStatus:", registerStatus)
            # OUT_OF_STOCK or NOT_YET_ON_SALE
            if registerStatus in ['OUT_OF_STOCK', 'NOT_YET_ON_SALE']:
                is_need_refresh = True

        # ✅ 注入 JavaScript 監聽 R 鍵刷新功能
        js_script = """
        if (!window._r_key_refresh_bound) {
            document.addEventListener('keydown', function(e) {
                if (e.key === 'r') {
                    location.reload();
                }
            });
            window._r_key_refresh_bound = true;
        }
        """
        try:
            driver.execute_script(js_script)
            print("✅ 已注入 R 鍵刷新功能")
        except Exception as e:
            print("⚠️ 注入 JS 失敗:", e)

    auto_check_agree = config_dict["auto_check_agree"]
    if auto_check_agree:
        if not is_need_refresh:
            is_need_refresh, is_finish_checkbox_click = kktix_check_agree_checkbox(driver)
        if not is_need_refresh:
            if not is_finish_checkbox_click:
                # retry again.
                is_need_refresh, is_finish_checkbox_click = kktix_check_agree_checkbox(driver)
    #print('check agree_terms_checkbox, is_need_refresh:',is_need_refresh)

    if is_need_refresh:
        try:
            print("try to refresh page...")
            driver.refresh()
        except Exception as exc:
            #print("refresh fail")
            pass

        # reset answer_index
        answer_index = -1
        registerStatus = None
    else:
        # check is able to buy.
        auto_fill_ticket_number = config_dict["kktix"]["auto_fill_ticket_number"]
        if auto_fill_ticket_number:
            answer_index = kktix_reg_new_main(driver, answer_index, is_finish_checkbox_click, config_dict)

    return answer_index, registerStatus



# PURPOSE: get target area list.
# PS: this is main block, use keyword to get rows.
# PS: it seems use date_auto_select_mode instead of area_auto_select_mode
def get_fami_target_area(driver, date_keyword, area_keyword_1, area_keyword_2, area_keyword_3, area_keyword_4, area_auto_select_mode):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    date_keyword = format_keyword_string(date_keyword)
    area_keyword_1 = format_keyword_string(area_keyword_1)
    area_keyword_2 = format_keyword_string(area_keyword_2)
    area_keyword_3 = format_keyword_string(area_keyword_3)
    area_keyword_4 = format_keyword_string(area_keyword_4)

    if show_debug_message:
        print("try to find area block by keywords...")

    area_list = None
    try:
        my_css_selector = "table.session__list > tbody > tr"
        area_list = driver.find_elements(By.CSS_SELECTOR, my_css_selector)
    except Exception as exc:
        print("find #session date list fail")
        if show_debug_message:
            print(exc)

    #PS: some blocks are generate by ajax, not appear at first time.
    formated_area_list = None
    if area_list is not None:
        area_list_length = len(area_list)
        if show_debug_message:
            print("lenth of area rows:", area_list_length)

        if area_list_length > 0:
            formated_area_list = []

            # filter list.
            row_index = 0
            for row in area_list:
                row_index += 1
                row_is_enabled=True
                el_btn = None
                try:
                    my_css_selector = "button"
                    el_btn = row.find_element(By.TAG_NAME, my_css_selector)
                    if el_btn is not None:
                        if not el_btn.is_enabled():
                            #print("row's button disabled!")
                            row_is_enabled=False
                except Exception as exc:
                    if show_debug_message:
                        print(exc)
                    pass

                if row_is_enabled:
                    formated_area_list.append(row)

    matched_blocks = None
    if not formated_area_list is None:
        if len(formated_area_list) > 0:
            matched_blocks = []

            if len(date_keyword)==0 and len(area_keyword_1)==0 and len(area_keyword_2) == 0:
                # select all.
                matched_blocks = formated_area_list
            else:
                # match keyword.
                row_index = 0
                for row in formated_area_list:
                    row_index += 1
                    #print("row index:", row_index)

                    date_html_text = ""
                    area_html_text = ""

                    row_text = ""
                    try:
                        my_css_selector = "td:nth-child(1)"
                        td_date = row.find_element(By.CSS_SELECTOR, my_css_selector)
                        if td_date is not None:
                            #print("date:", td_date.text)
                            date_html_text = format_keyword_string(td_date.text)

                        my_css_selector = "td:nth-child(2)"
                        td_area = row.find_element(By.CSS_SELECTOR, my_css_selector)
                        if td_area is not None:
                            #print("area:", td_area.text)
                            area_html_text = format_keyword_string(td_area.text)

                        row_text = row.text
                    except Exception as exc:
                        print("get row text fail")
                        break

                    if row_text is None:
                        row_text = ""

                    if len(row_text) > 0:
                        # check date.
                        is_match_date = False
                        if len(date_keyword) > 0:
                            if date_keyword in date_html_text:
                                #print("is_match_date")
                                is_match_date = True
                        else:
                            is_match_date = True

                        # check area.
                        is_match_area = False
                        if len(area_keyword_1) > 0:
                            if area_keyword_1 in area_html_text:
                                #print("is_match_area area_keyword_1")
                                is_match_area = True

                            # check keyword 2
                            if len(area_keyword_2) > 0:
                                if area_keyword_2 in area_html_text:
                                    #print("is_match_area area_keyword_2")
                                    is_match_area = True

                            # check keyword 3
                            if len(area_keyword_3) > 0:
                                if area_keyword_3 in area_html_text:
                                    #print("is_match_area area_keyword_3")
                                    is_match_area = True

                            # check keyword 4
                            if len(area_keyword_4) > 0:
                                if area_keyword_4 in area_html_text:
                                    #print("is_match_area area_keyword_4")
                                    is_match_area = True
                        else:
                            is_match_area = True

                        if is_match_date and is_match_area:
                            matched_blocks.append(row)

                            if area_auto_select_mode == CONST_FROM_TOP_TO_BOTTOM:
                                print("only need first item, break area list loop.")
                                break


    return_row_count = 0
    if not matched_blocks is None:
        return_row_count = len(matched_blocks)
        if return_row_count==0:
            matched_blocks = None

    if show_debug_message:
        print("return_row_count:", return_row_count)

    return matched_blocks


def fami_activity(driver):
    #print("fami_activity bingo")

    #---------------------------
    # part 1: press "buy" button.
    #---------------------------
    fami_start_to_buy_button = None
    try:
        fami_start_to_buy_button = driver.find_element(By.ID, 'buyWaiting')
    except Exception as exc:
        pass

    is_visible = False
    if fami_start_to_buy_button is not None:
        try:
            if fami_start_to_buy_button.is_enabled():
                is_visible = True
        except Exception as exc:
            pass

    if is_visible:
        try:
            fami_start_to_buy_button.click()
        except Exception as exc:
            print("click buyWaiting button fail...")
            #print(exc)
            #pass
            try:
                driver.execute_script("arguments[0].click();", fami_start_to_buy_button)
            except Exception as exc:
                pass


def fami_home(driver, url, config_dict):
    #print("fami_home bingo")

    is_ticket_number_assigned = False

    ticket_number = str(config_dict["ticket_number"])
    date_keyword = config_dict["tixcraft"]["date_auto_select"]["date_keyword"].strip()
    area_auto_select_mode = config_dict["tixcraft"]["area_auto_select"]["mode"]
    area_keyword_1 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_1"].strip()
    area_keyword_2 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_2"].strip()
    area_keyword_3 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_3"].strip()
    area_keyword_4 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_4"].strip()

    #---------------------------
    # part 3: fill ticket number.
    #---------------------------
    ticket_el = None
    try:
        my_css_selector = "tr.ticket > td > select"
        ticket_el = driver.find_element(By.CSS_SELECTOR, my_css_selector)
    except Exception as exc:
        pass
        print("click buyWaiting button fail")
        #print(exc)

    is_select_box_visible = False
    if ticket_el is not None:
        try:
            if ticket_el.is_enabled():
                is_select_box_visible = True
        except Exception as exc:
            pass

    is_ticket_number_assigned = False
    if is_select_box_visible:
        ticket_number_select = None
        try:
            ticket_number_select = Select(ticket_el)
        except Exception as exc:
            pass

        if ticket_number_select is not None:
            try:
                #print("get select ticket value:" + Select(ticket_number_select).first_selected_option.text)
                if ticket_number_select.first_selected_option.text=="0" or ticket_number_select.first_selected_option.text=="選擇張數":
                    # target ticket number
                    ticket_number_select.select_by_visible_text(ticket_number)
                    is_ticket_number_assigned = True
            except Exception as exc:
                print("select_by_visible_text ticket_number fail")
                print(exc)

                try:
                    # try target ticket number twice
                    ticket_number_select.select_by_visible_text(ticket_number)
                    is_ticket_number_assigned = True
                except Exception as exc:
                    print("select_by_visible_text ticket_number fail...2")
                    print(exc)

                    # try buy one ticket
                    try:
                        ticket_number_select.select_by_visible_text("1")
                        is_ticket_number_assigned = True
                    except Exception as exc:
                        print("select_by_visible_text 1 fail")
                        pass

    #---------------------------
    # part 4: press "next" button.
    #---------------------------
    if is_ticket_number_assigned:
        fami_assign_site_button = None
        try:
            my_css_selector = "div.col > a.btn"
            fami_assign_site_button = driver.find_element(By.CSS_SELECTOR, my_css_selector)
        except Exception as exc:
            pass

        if fami_assign_site_button is not None:
            is_visible = False
            try:
                if fami_assign_site_button.is_enabled():
                    is_visible = True
            except Exception as exc:
                pass

            if is_visible:
                try:
                    fami_assign_site_button.click()
                except Exception as exc:
                    print("click buyWaiting button fail")
                    #print(exc)
                    try:
                        driver.execute_script("arguments[0].click();", fami_assign_site_button)
                    except Exception as exc:
                        pass

    areas = None
    if not is_select_box_visible:
        #---------------------------
        # part 2: select keywords
        #---------------------------
        areas = get_fami_target_area(driver, date_keyword, area_keyword_1, area_keyword_2, area_keyword_3, area_keyword_4, area_auto_select_mode)

        area_target = None
        if areas is not None:
            #print("area_auto_select_mode", area_auto_select_mode)
            #print("len(areas)", len(areas))
            if len(areas) > 0:
                target_row_index = 0

                if area_auto_select_mode == CONST_FROM_TOP_TO_BOTTOM:
                    pass

                if area_auto_select_mode == CONST_FROM_BOTTOM_TO_TOP:
                    target_row_index = len(areas)-1

                if area_auto_select_mode == CONST_RANDOM:
                    target_row_index = random.randint(0,len(areas)-1)

                #print("target_row_index", target_row_index)
                area_target = areas[target_row_index]

        if area_target is not None:
            el_btn = None
            is_visible = False
            try:
                my_css_selector = "button"
                el_btn = area_target.find_element(By.TAG_NAME, my_css_selector)
                if el_btn is not None:
                    if el_btn.is_enabled():
                        is_visible = True
            except Exception as exc:
                pass

            if is_visible:
                try:
                    el_btn.click()
                except Exception as exc:
                    print("click buy button fail, start to retry...")
                    try:
                        driver.execute_script("arguments[0].click();", el_btn)
                    except Exception as exc:
                        pass


# purpose: date auto select
def urbtix_date_auto_select(driver, auto_select_mode, date_keyword, auto_reload_coming_soon_page_enable):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    ret = False
    matched_blocks = None

    # clean stop word.
    date_keyword = format_keyword_string(date_keyword)
    date_keyword_and = ""

    area_list = None
    try:
        #print("try to find cityline area block")
        my_css_selector = "div.conent-wrapper > div.list-wrapper > ul"
        area_list = driver.find_elements(By.CSS_SELECTOR, my_css_selector)
    except Exception as exc:
        print("find #date-time-position date list fail")
        print(exc)

    #PS: some blocks are generate by ajax, not appear at first time.
    formated_area_list = None

    if area_list is not None:
        area_list_count = len(area_list)
        if show_debug_message:
            print("date_list_count:", area_list_count)

        if area_list_count > 0:
            formated_area_list = []

            # filter list.
            row_index = 0
            for row in area_list:
                row_index += 1
                row_is_enabled=True
                el_btn = None
                try:
                    my_css_selector = "div.buy-icon"
                    el_btn = row.find_element(By.CSS_SELECTOR, my_css_selector)
                    if el_btn is not None:
                        button_class_string = str(el_btn.get_attribute('class'))
                        if len(button_class_string) > 1:
                            if 'disabled' in button_class_string:
                                if show_debug_message:
                                    print("found disabled activity at row:", row_index)
                                row_is_enabled=False
                except Exception as exc:
                    if show_debug_message:
                        print(exc)
                    pass

                if row_is_enabled:
                    formated_area_list.append(row)

            if show_debug_message:
                print("formated_area_list count:", len(formated_area_list))

            if len(date_keyword) == 0:
                matched_blocks = formated_area_list
            else:
                # match keyword.
                if show_debug_message:
                    print("start to match keyword:", date_keyword)
                matched_blocks = []

                row_index = 0
                for row in formated_area_list:
                    row_index += 1
                    #row_is_enabled=False
                    row_is_enabled=True
                    if row_is_enabled:
                        row_text = ""
                        try:
                            row_text = row.text
                        except Exception as exc:
                            print("get text fail")
                            break

                        if row_text is None:
                            row_text = ""

                        if len(row_text) > 0:
                            row_text = format_keyword_string(row_text)
                            if show_debug_message:
                                print("row_text:", row_text)

                            is_match_area = False
                            match_area_code = 0

                            if date_keyword in row_text:
                                if len(date_keyword_and) == 0:
                                    if show_debug_message:
                                        print('keyword_and # is empty, directly match.')
                                    # keyword #2 is empty, direct append.
                                    is_match_area = True
                                    match_area_code = 2
                                else:
                                    if date_keyword_and in row_text:
                                        if show_debug_message:
                                            print('match keyword_and')
                                        is_match_area = True
                                        match_area_code = 3
                                    else:
                                        if show_debug_message:
                                            print('not match keyword_and')
                                        pass

                            if is_match_area:
                                matched_blocks.append(row)

                if show_debug_message:
                    if not matched_blocks is None:
                        print("after match keyword, found count:", len(matched_blocks))
        else:
            print("not found date-time-position")
            pass
    else:
        print("date date-time-position is None")
        pass

    target_area = None
    if matched_blocks is not None:
        if len(matched_blocks) > 0:
            target_row_index = 0

            if auto_select_mode == CONST_FROM_TOP_TO_BOTTOM:
                pass

            if auto_select_mode == CONST_FROM_BOTTOM_TO_TOP:
                target_row_index = len(matched_blocks)-1

            if auto_select_mode == CONST_RANDOM:
                target_row_index = random.randint(0,len(matched_blocks)-1)

            target_area = matched_blocks[target_row_index]

    if target_area is not None:
        el_btn = None
        try:
            #print("target_area text", target_area.text)
            my_css_selector = "div.buy-icon"
            el_btn = target_area.find_element(By.CSS_SELECTOR, my_css_selector)
        except Exception as exc:
            pass
        if el_btn is not None:
            is_button_enable = True
            try:
                if not el_btn.is_enabled():
                    is_button_enable = False
                else:
                    # button enable, but class disable.
                    button_class_string = str(el_btn.get_attribute('class'))
                    if len(button_class_string) > 1:
                        if 'disabled' in button_class_string:
                            is_button_enable = False
                if is_button_enable:
                    el_btn.click()
                    ret = True
                    print("buy icon pressed.")
            except Exception as exc:
                # use plan B
                try:
                    print("force to click by js.")
                    driver.execute_script("arguments[0].click();", el_btn)
                    ret = True
                except Exception as exc:
                    pass
    else:
        # no target.
        if auto_reload_coming_soon_page_enable:
            # auto refresh for date list page.
            if not formated_area_list is None:
                if len(formated_area_list) == 0:
                    try:
                        driver.refresh()
                        time.sleep(1.0)
                    except Exception as exc:
                        pass

    return ret

def urbtix_purchase_ticket(driver, config_dict):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    date_auto_select_mode = config_dict["tixcraft"]["date_auto_select"]["mode"]
    date_keyword = config_dict["tixcraft"]["date_auto_select"]["date_keyword"].strip()
    auto_reload_coming_soon_page_enable = config_dict["tixcraft"]["auto_reload_coming_soon_page"]

    if show_debug_message:
        print("date_keyword:", date_keyword)
    is_date_assign_by_bot = urbtix_date_auto_select(driver, date_auto_select_mode, date_keyword, auto_reload_coming_soon_page_enable)

    return is_date_assign_by_bot

# purpose: area auto select
def urbtix_area_auto_select(driver, area_auto_select_mode, area_keyword_1, area_keyword_1_and):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    ret = False
    is_need_refresh = False

    matched_blocks = None

    # clean stop word.
    area_keyword_1 = format_keyword_string(area_keyword_1)
    area_keyword_1_and = format_keyword_string(area_keyword_1_and)

    area_list = None
    try:
        #print("try to find cityline area block")
        my_css_selector = "div.area-info"
        area_list = driver.find_elements(By.CSS_SELECTOR, my_css_selector)
    except Exception as exc:
        print("find #ticket-price-tbl date list fail")
        print(exc)

    formated_area_list = None
    if area_list is not None:
        area_list_count = len(area_list)
        if show_debug_message:
            print("area_list_count:", area_list_count)

        if area_list_count > 0:
            formated_area_list = []
            # filter list.
            row_index = 0
            for row in area_list:
                row_index += 1
                row_is_enabled=True
                try:
                    button_class_string = str(row.get_attribute('class'))
                    if len(button_class_string) > 1:
                        if 'disabled' in button_class_string:
                            row_is_enabled=False
                        if 'selected' in button_class_string:
                            # someone is selected. skip this process.
                            row_is_enabled=False
                            matched_blocks = []
                            ret = True
                            break
                except Exception as exc:
                    pass

                if row_is_enabled:
                    formated_area_list.append(row)
        else:
            if show_debug_message:
                print("area_list_count is empty.")
            pass
    else:
        if show_debug_message:
            print("area_list_count is None.")
        pass

    if formated_area_list is not None:
        area_list_count = len(formated_area_list)
        if show_debug_message:
            print("formated_area_list count:", area_list_count)

        if area_list_count > 0:
            if len(area_keyword_1) == 0:
                matched_blocks = formated_area_list
            else:
                # match keyword.
                if show_debug_message:
                    print("start to match keyword:", area_keyword_1)
                    print("keyword and:", area_keyword_1_and)
                matched_blocks = []

                row_index = 0
                for row in formated_area_list:
                    row_index += 1

                    row_is_enabled=True
                    if row_is_enabled:
                        row_text = ""
                        try:
                            row_text = row.text
                        except Exception as exc:
                            print("get text fail")
                            break

                        if row_text is None:
                            row_text = ""

                        if len(row_text) > 0:
                            row_text = format_keyword_string(row_text)
                            if show_debug_message:
                                print("row_text:", row_text)

                            is_match_area = False
                            match_area_code = 0

                            if area_keyword_1 in row_text:
                                if len(area_keyword_1_and) == 0:
                                    if show_debug_message:
                                        print('keyword_and is empty, directly match.')
                                    # keyword #2 is empty, direct append.
                                    is_match_area = True
                                    match_area_code = 2
                                else:
                                    if area_keyword_1_and in row_text:
                                        if show_debug_message:
                                            print('match keyword_and')
                                        is_match_area = True
                                        match_area_code = 3
                                    else:
                                        if show_debug_message:
                                            print('not match keyword_and')
                                        pass

                            if is_match_area:
                                matched_blocks.append(row)

                if show_debug_message:
                    if not matched_blocks is None:
                        print("after match keyword, found count:", len(matched_blocks))
        else:
            is_need_refresh = True
            if show_debug_message:
                print("formated_area_list is empty.")

    target_area = None
    if matched_blocks is not None:
        if len(matched_blocks) > 0:
            target_row_index = 0

            if area_auto_select_mode == CONST_FROM_TOP_TO_BOTTOM:
                pass

            if area_auto_select_mode == CONST_FROM_BOTTOM_TO_TOP:
                target_row_index = len(matched_blocks)-1

            if area_auto_select_mode == CONST_RANDOM:
                target_row_index = random.randint(0,len(matched_blocks)-1)

            target_area = matched_blocks[target_row_index]

    if target_area is not None:
        try:
            if target_area.is_enabled():
                target_area.click()
                ret = True
        except Exception as exc:
            print("click target_area link fail")
            print(exc)
            # use plan B
            try:
                print("force to click by js.")
                driver.execute_script("arguments[0].click();", target_area)
                ret = True
            except Exception as exc:
                pass

    return is_need_refresh, ret


def urbtix_ticket_number_auto_select(driver, ticket_number):
    show_debug_message = True       # debug.
    #show_debug_message = False      # online

    is_ticket_number_assigned = False
    ticket_number_str = str(ticket_number)

    # check ticket input textbox.
    ticket_price_input = None
    try:
        ticket_price_input = driver.find_element(By.CSS_SELECTOR, "input.ticket-count")
    except Exception as exc:
        pass

    if ticket_price_input is not None:
        current_ticket_number = ""
        is_visible = False

        try:
            current_ticket_number = str(ticket_price_input.get_attribute('value')).strip()
            is_visible = ticket_price_input.is_enabled()
        except Exception as exc:
            pass

        if len(current_ticket_number) > 0:
            if current_ticket_number == "0":
                try:
                    print("asssign ticket number:%s" % ticket_number_str)
                    ticket_price_input.clear()
                    ticket_price_input.send_keys(ticket_number_str)

                    is_ticket_number_assigned = True
                except Exception as exc:
                    print("asssign ticket number to ticket-price field Exception:")
                    print(exc)
                    try:
                        ticket_price_input.clear()
                        ticket_price_input.send_keys("1")
                        is_ticket_number_assigned = True
                    except Exception as exc2:
                        pass
            else:
                # already assigned.
                is_ticket_number_assigned = True


    if is_ticket_number_assigned:
        el_btn = None
        try:
            my_css_selector = "div.footer > div > div"
            el_btn = driver.find_element(By.CSS_SELECTOR, my_css_selector)
        except Exception as exc:
            pass

        if el_btn is not None:
            try:
                if el_btn.is_enabled():
                    el_btn.click()
                    print("varify site icon pressed.")
            except Exception as exc:
                # use plan B
                try:
                    print("force to click by js.")
                    driver.execute_script("arguments[0].click();", el_btn)
                    ret = True
                except Exception as exc:
                    pass
        else:
            if show_debug_message:
                print("varify site icon is None.")

    if is_ticket_number_assigned:
        el_btn = None
        try:
            my_css_selector = "div.button-inner > div > div.button-text"
            el_btn = driver.find_element(By.CSS_SELECTOR, my_css_selector)
        except Exception as exc:
            pass

        if el_btn is not None:
            try:
                if el_btn.is_enabled():
                    el_btn.click()
                    print("shopping-cart icon pressed.")
            except Exception as exc:
                # use plan B
                try:
                    print("force to click by js.")
                    driver.execute_script("arguments[0].click();", el_btn)
                    ret = True
                except Exception as exc:
                    pass
        else:
            if show_debug_message:
                print("shopping-cart site icon is None.")

    return is_ticket_number_assigned


def urbtix_performance(driver, config_dict):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    ret = False

    is_price_assign_by_bot = False
    is_need_refresh = False

    auto_fill_ticket_number = True
    if auto_fill_ticket_number:
        # click price row.
        area_auto_select_mode = config_dict["tixcraft"]["area_auto_select"]["mode"]
        area_keyword_1 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_1"].strip()
        area_keyword_2 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_2"].strip()
        area_keyword_3 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_3"].strip()
        area_keyword_4 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_4"].strip()
        area_keyword_1_and = ""
        area_keyword_2_and = ""

        if show_debug_message:
            print("area_keyword_1:", area_keyword_1)
            #print("area_keyword_1_and:", area_keyword_1_and)
            print("area_keyword_2:", area_keyword_2)
            #print("area_keyword_2_and:", area_keyword_2_and)
        is_need_refresh, is_price_assign_by_bot = urbtix_area_auto_select(driver, area_auto_select_mode, area_keyword_1, area_keyword_1_and)

        if not is_need_refresh:
            if not is_price_assign_by_bot:
                # try keyword_2
                if len(area_keyword_2) > 0:
                    is_need_refresh, is_price_assign_by_bot = urbtix_area_auto_select(driver, area_auto_select_mode, area_keyword_2, area_keyword_2_and)

        if not is_need_refresh:
            if not is_price_assign_by_bot:
                if len(area_keyword_3) > 0:
                    is_need_refresh, is_price_assign_by_bot = urbtix_area_auto_select(driver, area_auto_select_mode, area_keyword_3, "")

        if not is_need_refresh:
            if not is_price_assign_by_bot:
                if len(area_keyword_4) > 0:
                    is_need_refresh, is_price_assign_by_bot = urbtix_area_auto_select(driver, area_auto_select_mode, area_keyword_4, "")

        # un-tested. disable refresh for now.
        is_need_refresh = False
        if is_need_refresh:
            try:
                driver.refresh()
            except Exception as exc:
                pass

        # choose ticket.
        ticket_number = str(config_dict["ticket_number"])
        is_ticket_number_assigned = urbtix_ticket_number_auto_select(driver, ticket_number)

        if show_debug_message:
            print("ticket_number:", ticket_number)
            print("is_ticket_number_assigned:", is_ticket_number_assigned)


    return ret


# purpose: date auto select
def cityline_date_auto_select(driver, auto_select_mode, date_keyword, auto_reload_coming_soon_page_enable):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    ret = False
    matched_blocks = None

    # clean stop word.
    date_keyword = format_keyword_string(date_keyword)
    date_keyword_and = ""

    area_list = None
    try:
        #print("try to find cityline area block")
        my_css_selector = "button.date-time-position"
        area_list = driver.find_elements(By.CSS_SELECTOR, my_css_selector)
    except Exception as exc:
        print("find #date-time-position date list fail")
        print(exc)

    #PS: some blocks are generate by ajax, not appear at first time.
    formated_area_list = None
    
    if area_list is not None:
        area_list_count = len(area_list)
        if show_debug_message:
            print("date_list_count:", area_list_count)

        if area_list_count > 0:
            formated_area_list = []
            # filter list.
            
            row_index = 0
            for row in area_list:
                row_index += 1
                row_is_enabled=True
                el_btn = None
                try:
                    if not row.is_enabled():
                        row_is_enabled=False
                except Exception as exc:
                    if show_debug_message:
                        print(exc)
                    pass

                if row_is_enabled:
                    formated_area_list.append(row)

            if show_debug_message:
                print("formated_area_list count:", len(formated_area_list))

            if len(date_keyword) == 0:
                matched_blocks = formated_area_list
            else:
                # match keyword.
                if show_debug_message:
                    print("start to match keyword:", date_keyword)
                matched_blocks = []

                row_index = 0
                for row in formated_area_list:
                    row_index += 1
                    #row_is_enabled=False
                    row_is_enabled=True
                    if row_is_enabled:
                        row_text = ""
                        try:
                            row_text = row.text
                        except Exception as exc:
                            print("get text fail")
                            break

                        if row_text is None:
                            row_text = ""

                        if len(row_text) > 0:
                            row_text = format_keyword_string(row_text)
                            if show_debug_message:
                                print("row_text:", row_text)

                            is_match_area = False
                            match_area_code = 0

                            if date_keyword in row_text:
                                if len(date_keyword_and) == 0:
                                    if show_debug_message:
                                        print('keyword_and # is empty, directly match.')
                                    # keyword #2 is empty, direct append.
                                    is_match_area = True
                                    match_area_code = 2
                                else:
                                    if date_keyword_and in row_text:
                                        if show_debug_message:
                                            print('match keyword_and')
                                        is_match_area = True
                                        match_area_code = 3
                                    else:
                                        if show_debug_message:
                                            print('not match keyword_and')
                                        pass

                            if is_match_area:
                                matched_blocks.append(row)

                if show_debug_message:
                    if not matched_blocks is None:
                        print("after match keyword, found count:", len(matched_blocks))
        else:
            print("not found date-time-position")
            pass
    else:
        print("date date-time-position is None")
        pass

    target_area = None
    if matched_blocks is not None:
        if len(matched_blocks) > 0:
            target_row_index = 0

            if auto_select_mode == CONST_FROM_TOP_TO_BOTTOM:
                pass

            if auto_select_mode == CONST_FROM_BOTTOM_TO_TOP:
                target_row_index = len(matched_blocks)-1

            if auto_select_mode == CONST_RANDOM:
                target_row_index = random.randint(0,len(matched_blocks)-1)

            target_area = matched_blocks[target_row_index]

    if target_area is not None:
        try:
            if target_area.is_enabled():
                target_area.click()
                ret = True
        except Exception as exc:
            # use plan B
            try:
                print("force to click by js.")
                driver.execute_script("arguments[0].click();", target_area)
                ret = True
            except Exception as exc:
                pass
    else:
        # no target.
        if auto_reload_coming_soon_page_enable:
            # auto refresh for date list page.
            if not formated_area_list is None:
                if len(formated_area_list) == 0:
                    try:
                        driver.refresh()
                        time.sleep(0.5)
                    except Exception as exc:
                        pass

    return ret

# purpose: area auto select
# return:
#   True: area block appear.
#   False: area block not appear.
# ps: return is successfully click on the price radio.
def cityline_area_auto_select(driver, area_auto_select_mode, area_keyword_1, area_keyword_1_and):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    ret = False
    is_need_refresh = False

    matched_blocks = None

    # clean stop word.
    area_keyword_1 = format_keyword_string(area_keyword_1)
    area_keyword_1_and = format_keyword_string(area_keyword_1_and)

    area_list = None
    try:
        #print("try to find cityline area block")
        my_css_selector = ".form-check"
        area_list = driver.find_elements(By.CSS_SELECTOR, my_css_selector)
    except Exception as exc:
        print("find #ticket-price-tbl date list fail")
        print(exc)

    formated_area_list = None
    if area_list is not None:
        area_list_count = len(area_list)
        if show_debug_message:
            print("area_list_count:", area_list_count)

        if area_list_count > 0:
            formated_area_list = []
            # filter list.
            row_index = 0
            for row in area_list:
                row_index += 1
                row_is_enabled=True
                try:
                    my_css_selector = "span.price-limited > span"
                    span_price_limited = row.find_element(By.CSS_SELECTOR, my_css_selector)
                    if not span_price_limited is None:
                        #print("found span limited at idx:", row_index)
                        span_i18n_string = str(span_price_limited.get_attribute('data-i18n'))
                        if len(span_i18n_string) > 1:
                            if 'soldout' in span_i18n_string:
                                #print("found span limited soldout at idx:", row_index)
                                row_is_enabled=False
                except Exception as exc:
                    pass

                if row_is_enabled:
                    formated_area_list.append(row)
        else:
            if show_debug_message:
                print("area_list_count is empty.")
            pass
    else:
        if show_debug_message:
            print("area_list_count is None.")
        pass

    if formated_area_list is not None:
        area_list_count = len(formated_area_list)
        if show_debug_message:
            print("formated_area_list count:", area_list_count)

        if area_list_count > 0:
            if len(area_keyword_1) == 0:
                matched_blocks = formated_area_list
            else:
                # match keyword.
                if show_debug_message:
                    print("start to match keyword:", area_keyword_1)
                    print("keyword and:", area_keyword_1_and)
                matched_blocks = []

                row_index = 0
                for row in formated_area_list:
                    row_index += 1
                    #row_is_enabled=False
                    row_is_enabled=True
                    if row_is_enabled:
                        row_text = ""
                        try:
                            row_text = row.text
                        except Exception as exc:
                            print("get text fail")
                            break

                        if row_text is None:
                            row_text = ""

                        if len(row_text) > 0:
                            row_text = format_keyword_string(row_text)
                            if show_debug_message:
                                print("row_text:", row_text)

                            is_match_area = False
                            match_area_code = 0

                            if area_keyword_1 in row_text:
                                if len(area_keyword_1_and) == 0:
                                    if show_debug_message:
                                        print('keyword_and is empty, directly match.')
                                    # keyword #2 is empty, direct append.
                                    is_match_area = True
                                    match_area_code = 2
                                else:
                                    if area_keyword_1_and in row_text:
                                        if show_debug_message:
                                            print('match keyword_and')
                                        is_match_area = True
                                        match_area_code = 3
                                    else:
                                        if show_debug_message:
                                            print('not match keyword_and')
                                        pass

                            if is_match_area:
                                matched_blocks.append(row)
                if show_debug_message:
                    if not matched_blocks is None:
                        print("after match keyword, found count:", len(matched_blocks))
        else:
            is_need_refresh = True
            if show_debug_message:
                print("formated_area_list is empty.")

    target_area = None
    if matched_blocks is not None:
        if len(matched_blocks) > 0:
            target_row_index = 0

            if area_auto_select_mode == CONST_FROM_TOP_TO_BOTTOM:
                pass

            if area_auto_select_mode == CONST_FROM_BOTTOM_TO_TOP:
                target_row_index = len(matched_blocks)-1

            if area_auto_select_mode == CONST_RANDOM:
                target_row_index = random.randint(0,len(matched_blocks)-1)

            target_area = matched_blocks[target_row_index]

    if target_area is not None:
        el_btn = None
        try:
            #print("target_area text", target_area.text)
            my_css_selector = "input[type=radio]"
            el_btn = target_area.find_element(By.CSS_SELECTOR, my_css_selector)
            if el_btn is not None:
                if el_btn.is_enabled():
                    if not el_btn.is_selected():
                        el_btn.click()
                        ret = True
                    else:
                        ret = True
                    #print("bingo, click target_area radio")
        except Exception as exc:
            print("click target_area radio a link fail")
            print(exc)
            pass

    return is_need_refresh, ret

#[TODO]:
# double check selected radio matched by keyword/keyword_and.
def cityline_area_selected_text(driver):
    ret = False

    return ret

def cityline_ticket_number_auto_select(driver, ticket_number):
    selector_string = 'select.select-num'
    by_method = By.CSS_SELECTOR
    return assign_ticket_number_by_select(driver, ticket_number, by_method, selector_string)

def ibon_ticket_number_auto_select(driver, ticket_number):
    selector_string = 'table.table > tbody > tr > td > select'
    by_method = By.CSS_SELECTOR
    return assign_ticket_number_by_select(driver, ticket_number, by_method, selector_string)

def assign_ticket_number_by_select(driver, ticket_number, by_method, selector_string):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    form_select = None
    try:
        form_select = driver.find_element(by_method, selector_string)
    except Exception as exc:
        if show_debug_message:
            print("find ticket_number select fail")
            print(exc)
        pass

    select_obj = None
    if form_select is not None:
        is_visible = False
        try:
            is_visible = form_select.is_enabled()
        except Exception as exc:
            pass
        if is_visible:
            try:
                select_obj = Select(form_select)
            except Exception as exc:
                pass

    is_ticket_number_assigned = False
    if not select_obj is None:
        row_text = None
        try:
            row_text = select_obj.first_selected_option.text
        except Exception as exc:
            pass
        if not row_text is None:
            if len(row_text) > 0:
                if row_text != "0":
                    # ticket assign.
                    is_ticket_number_assigned = True

        if not is_ticket_number_assigned:
            is_ticket_number_assigned = tixcraft_ticket_number_auto_fill(driver, select_obj, ticket_number)
        else:
            if show_debug_message:
                print("ticket_number assigned by previous action.")

    return is_ticket_number_assigned

def cityline_purchase_button_press(driver, config_dict):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    ret = False

    date_auto_select_mode = config_dict["tixcraft"]["date_auto_select"]["mode"]
    date_keyword = config_dict["tixcraft"]["date_auto_select"]["date_keyword"].strip()
    auto_reload_coming_soon_page_enable = config_dict["tixcraft"]["auto_reload_coming_soon_page"]

    if show_debug_message:
        print("date_keyword:", date_keyword)
    is_date_assign_by_bot = cityline_date_auto_select(driver, date_auto_select_mode, date_keyword, auto_reload_coming_soon_page_enable)

    el_btn = None
    try:
        el_btn = driver.find_element(By.CSS_SELECTOR, 'button.purchase-btn')
    except Exception as exc:
        print("find next button fail")
        #print(exc)
        pass

    if el_btn is not None:
        print("bingo, found next button")
        try:
            if el_btn.is_enabled():
                el_btn.click()
                ret = True
        except Exception as exc:
            print("press next button fail")
            print(exc)
            # use plan B
            try:
                print("force to click by js.")
                driver.execute_script("arguments[0].click();", el_btn)
                ret = True
            except Exception as exc:
                pass

    return ret


def cityline_next_button_press(driver):
    ret = False

    el_nav = None
    el_btn = None

    try:
        el_nav = driver.find_element(By.CSS_SELECTOR, '.puchase-bottom')
        el_btn = driver.find_element(By.CSS_SELECTOR, '#expressPurchaseBtn')
    except Exception as exc:
        print("find next button fail...")
        print(exc)

    if el_btn is not None and el_nav is not None:
        print("bingo, found next button, start to press")
        try:
            if el_btn.is_enabled():
                #el_btn.click()
                builder = ActionChains(driver)
                builder.move_to_element(el_nav)
                builder.click(el_btn)
                builder.perform()
                ret = True
        except Exception as exc:
            print("click next button fail...")
            print(exc)
            # use plan B
            try:
                print("force to click by js.")
                driver.execute_script("arguments[0].click();", el_btn)
                ret = True
            except Exception as exc:
                pass

    return ret


def cityline_performance(driver, config_dict):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    is_price_assign_by_bot = False
    is_need_refresh = False

    auto_fill_ticket_number = True
    if auto_fill_ticket_number:
        # click price row.
        area_auto_select_mode = config_dict["tixcraft"]["area_auto_select"]["mode"]
        area_keyword_1 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_1"].strip()
        area_keyword_2 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_2"].strip()
        area_keyword_3 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_3"].strip()
        area_keyword_4 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_4"].strip()
        area_keyword_1_and = ""
        area_keyword_2_and = ""

        if show_debug_message:
            print("area_keyword_1:", area_keyword_1)
            #print("area_keyword_1_and:", area_keyword_1_and)
            print("area_keyword_2:", area_keyword_2)
                #print("area_keyword_2_and:", area_keyword_2_and)
            
        # PS: cityline price default value is selected at the first option.
        is_need_refresh, is_price_assign_by_bot = cityline_area_auto_select(driver, area_auto_select_mode, area_keyword_1, area_keyword_1_and)

        if not is_need_refresh:
            if not is_price_assign_by_bot:
                # try keyword_2
                if len(area_keyword_2) > 0:
                    is_need_refresh, is_price_assign_by_bot = cityline_area_auto_select(driver, area_auto_select_mode, area_keyword_2, area_keyword_2_and)

        if not is_need_refresh:
            if not is_price_assign_by_bot:
                if len(area_keyword_3) > 0:
                    is_need_refresh, is_price_assign_by_bot = cityline_area_auto_select(driver, area_auto_select_mode, area_keyword_3, "")

        if not is_need_refresh:
            if not is_price_assign_by_bot:
                if len(area_keyword_4) > 0:
                    is_need_refresh, is_price_assign_by_bot = cityline_area_auto_select(driver, area_auto_select_mode, area_keyword_4, "")

        # un-tested. disable refresh for now.
        is_need_refresh = False
        if is_need_refresh:
            try:
                driver.refresh()
            except Exception as exc:
                pass

        # choose ticket.
        ticket_number = str(config_dict["ticket_number"])
        is_ticket_number_assigned = cityline_ticket_number_auto_select(driver, ticket_number)

        if show_debug_message:
            print("ticket_number:", ticket_number)
            print("is_ticket_number_assigned:", is_ticket_number_assigned)

        if is_ticket_number_assigned:
            auto_press_next_step_button = True
            if auto_press_next_step_button:
                if not is_price_assign_by_bot:
                    #[TODO]:
                    # double check selected radio matched by keyword/keyword_and.
                    # cityline_area_selected_text(driver)
                    pass

                if is_price_assign_by_bot:
                    for i in range(2):
                        click_ret = cityline_next_button_press(driver)
                        if click_ret:
                            break

def ibon_date_auto_select(driver, auto_select_mode, date_keyword, auto_reload_coming_soon_page_enable):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    ret = False
    matched_blocks = None

    # clean stop word.
    date_keyword = format_keyword_string(date_keyword)
    date_keyword_and = ""

    area_list = None
    try:
        #print("try to find cityline area block")
        my_css_selector = "div.grid-wrap.event.table-wrap > div > div > div.tr"
        area_list = driver.find_elements(By.CSS_SELECTOR, my_css_selector)
    except Exception as exc:
        print("find #date-time-position date list fail")
        print(exc)

    #PS: some blocks are generate by ajax, not appear at first time.
    formated_area_list = None
    if area_list is not None:
        area_list_count = len(area_list)
        if show_debug_message:
            print("date_list_count:", area_list_count)

        if area_list_count > 0:
            formated_area_list = []

            # filter list.
            row_index = 0
            for row in area_list:
                row_index += 1
                row_is_enabled=True
                el_btn = None
                try:
                    my_css_selector = "button"
                    el_btn = row.find_element(By.TAG_NAME, my_css_selector)
                    if el_btn is not None:
                        if not el_btn.is_enabled():
                            #print("row's button disabled!")
                            row_is_enabled=False
                except Exception as exc:
                    if show_debug_message:
                        print(exc)
                    pass

                if row_is_enabled:
                    formated_area_list.append(row)

            if len(date_keyword) == 0:
                matched_blocks = formated_area_list
            else:
                # match keyword.
                if show_debug_message:
                    print("start to match keyword:", date_keyword)
                matched_blocks = []

                row_index = 0
                for row in formated_area_list:
                    row_index += 1
                    row_is_enabled=True
                    if row_is_enabled:
                        row_text = ""
                        try:
                            row_text = row.text
                        except Exception as exc:
                            print("get text fail")
                            break

                        if row_text is None:
                            row_text = ""

                        if len(row_text) > 0:
                            row_text = format_keyword_string(row_text)
                            if show_debug_message:
                                print("row_text:", row_text)

                            is_match_area = False
                            match_area_code = 0

                            if date_keyword in row_text:
                                if len(date_keyword_and) == 0:
                                    if show_debug_message:
                                        print('keyword_and # is empty, directly match.')
                                    # keyword #2 is empty, direct append.
                                    is_match_area = True
                                    match_area_code = 2
                                else:
                                    if date_keyword_and in row_text:
                                        if show_debug_message:
                                            print('match keyword_and')
                                        is_match_area = True
                                        match_area_code = 3
                                    else:
                                        if show_debug_message:
                                            print('not match keyword_and')
                                        pass

                            if is_match_area:
                                matched_blocks.append(row)

                if show_debug_message:
                    if not matched_blocks is None:
                        print("after match keyword, found count:", len(matched_blocks))
        else:
            print("not found date-time-position")
            pass
    else:
        print("date date-time-position is None")
        pass

    target_area = None
    if matched_blocks is not None:
        if len(matched_blocks) > 0:
            target_row_index = 0

            if auto_select_mode == CONST_FROM_TOP_TO_BOTTOM:
                pass

            if auto_select_mode == CONST_FROM_BOTTOM_TO_TOP:
                target_row_index = len(matched_blocks)-1

            if auto_select_mode == CONST_RANDOM:
                target_row_index = random.randint(0,len(matched_blocks)-1)

            target_area = matched_blocks[target_row_index]

    if target_area is not None:
        el_btn = None
        try:
            my_css_selector = "button.btn"
            el_btn = target_area.find_element(By.CSS_SELECTOR, my_css_selector)
        except Exception as exc:
            pass

        if el_btn is not None:
            try:
                if el_btn.is_enabled():
                    el_btn.click()
                    print("buy icon pressed.")
                    ret = True
            except Exception as exc:
                # use plan B
                try:
                    print("force to click by js.")
                    driver.execute_script("arguments[0].click();", el_btn)
                    ret = True
                except Exception as exc:
                    pass
    else:
        # no target to click.
        if auto_reload_coming_soon_page_enable:
            # auto refresh for date list page.
            if not formated_area_list is None:
                if len(formated_area_list) == 0:
                    try:
                        driver.refresh()
                        time.sleep(0.5)
                    except Exception as exc:
                        pass
    return ret

def ibon_activity_info(driver, config_dict):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    date_auto_select_mode = config_dict["tixcraft"]["date_auto_select"]["mode"]
    date_keyword = config_dict["tixcraft"]["date_auto_select"]["date_keyword"].strip()
    auto_reload_coming_soon_page_enable = config_dict["tixcraft"]["auto_reload_coming_soon_page"]

    if show_debug_message:
        print("date_keyword:", date_keyword)
        print("auto_reload_coming_soon_page_enable:", auto_reload_coming_soon_page_enable)
    is_date_assign_by_bot = ibon_date_auto_select(driver, date_auto_select_mode, date_keyword, auto_reload_coming_soon_page_enable)

    return is_date_assign_by_bot

def ibon_area_auto_select(driver, area_auto_select_mode, area_keyword_1, area_keyword_1_and):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    ret = False
    is_need_refresh = False

    matched_blocks = None

    # clean stop word.
    area_keyword_1 = format_keyword_string(area_keyword_1)
    area_keyword_1_and = format_keyword_string(area_keyword_1_and)

    area_list = None
    try:
        #print("try to find cityline area block")
        my_css_selector = "div.col-md-5 > table > tbody > tr"
        area_list = driver.find_elements(By.CSS_SELECTOR, my_css_selector)
    except Exception as exc:
        print("find #ticket-price-tbl date list fail")
        print(exc)

    formated_area_list = None
    if area_list is not None:
        area_list_count = len(area_list)
        if show_debug_message:
            print("area_list_count:", area_list_count)

        if area_list_count > 0:
            formated_area_list = []
            # filter list.
            row_index = 0
            for row in area_list:
                row_index += 1
                row_is_enabled=True
                try:
                    button_class_string = str(row.get_attribute('class'))
                    if len(button_class_string) > 1:
                        if 'disabled' in button_class_string:
                            row_is_enabled=False
                        if 'sold-out' in button_class_string:
                            row_is_enabled=False
                        if 'selected' in button_class_string:
                            # someone is selected. skip this process.
                            row_is_enabled=False
                            matched_blocks = []
                            ret = True
                            break
                except Exception as exc:
                    pass

                if row_is_enabled:
                    formated_area_list.append(row)
        else:
            if show_debug_message:
                print("area_list_count is empty.")
            pass
    else:
        if show_debug_message:
            print("area_list_count is None.")
        pass

    if formated_area_list is not None:
        area_list_count = len(formated_area_list)
        if show_debug_message:
            print("formated_area_list count:", area_list_count)

        if area_list_count > 0:
            if len(area_keyword_1) == 0:
                matched_blocks = formated_area_list
            else:
                # match keyword.
                if show_debug_message:
                    print("start to match keyword:", area_keyword_1)
                    print("keyword and:", area_keyword_1_and)
                matched_blocks = []

                row_index = 0
                for row in formated_area_list:
                    row_index += 1
                    row_is_enabled=True
                    if row_is_enabled:
                        row_text = ""
                        try:
                            row_text = row.text
                        except Exception as exc:
                            print("get text fail")
                            break

                        if row_text is None:
                            row_text = ""

                        if len(row_text) > 0:
                            row_text = format_keyword_string(row_text)
                            if show_debug_message:
                                print("row_text:", row_text)

                            is_match_area = False
                            match_area_code = 0

                            if area_keyword_1 in row_text:
                                if len(area_keyword_1_and) == 0:
                                    if show_debug_message:
                                        print('keyword_and is empty, directly match.')
                                    # keyword #2 is empty, direct append.
                                    is_match_area = True
                                    match_area_code = 2
                                else:
                                    if area_keyword_1_and in row_text:
                                        if show_debug_message:
                                            print('match keyword_and')
                                        is_match_area = True
                                        match_area_code = 3
                                    else:
                                        if show_debug_message:
                                            print('not match keyword_and')
                                        pass

                            if is_match_area:
                                matched_blocks.append(row)

                if show_debug_message:
                    if not matched_blocks is None:
                        print("after match keyword, found count:", len(matched_blocks))
        else:
            is_need_refresh = True
            if show_debug_message:
                print("formated_area_list is empty.")

    target_area = None
    if matched_blocks is not None:
        if len(matched_blocks) > 0:
            target_row_index = 0

            if area_auto_select_mode == CONST_FROM_TOP_TO_BOTTOM:
                pass

            if area_auto_select_mode == CONST_FROM_BOTTOM_TO_TOP:
                target_row_index = len(matched_blocks)-1

            if area_auto_select_mode == CONST_RANDOM:
                target_row_index = random.randint(0,len(matched_blocks)-1)

            target_area = matched_blocks[target_row_index]

    if target_area is not None:
        try:
            if target_area.is_enabled():
                target_area.click()
                ret = True
        except Exception as exc:
            print("click target_area link fail")
            print(exc)
            # use plan B
            try:
                print("force to click by js.")
                driver.execute_script("arguments[0].click();", target_area)
                ret = True
            except Exception as exc:
                pass

    return is_need_refresh, ret


def ibon_performance(driver, config_dict):
    show_debug_message = True       # debug.
    show_debug_message = False      # online

    is_price_assign_by_bot = False
    is_need_refresh = False

    auto_fill_ticket_number = True
    if auto_fill_ticket_number:
        # click price row.
        area_auto_select_mode = config_dict["tixcraft"]["area_auto_select"]["mode"]
        area_keyword_1 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_1"].strip()
        area_keyword_2 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_2"].strip()
        area_keyword_3 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_3"].strip()
        area_keyword_4 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_4"].strip()
        area_keyword_1_and = ""
        area_keyword_2_and = ""

        if show_debug_message:
            print("area_keyword_1:", area_keyword_1)
            #print("area_keyword_1_and:", area_keyword_1_and)
            print("area_keyword_2:", area_keyword_2)
            #print("area_keyword_2_and:", area_keyword_2_and)

        is_need_refresh = False
        if not is_price_assign_by_bot:
            is_need_refresh, is_price_assign_by_bot = ibon_area_auto_select(driver, area_auto_select_mode, area_keyword_1, area_keyword_1_and)

        if not is_need_refresh:
            if not is_price_assign_by_bot:
                # try keyword_2
                if len(area_keyword_2) > 0:
                    is_need_refresh, is_price_assign_by_bot = ibon_area_auto_select(driver, area_auto_select_mode, area_keyword_2, area_keyword_2_and)

        if not is_need_refresh:
            if not is_price_assign_by_bot:
                if len(area_keyword_3) > 0:
                    is_need_refresh, is_price_assign_by_bot = ibon_area_auto_select(driver, area_auto_select_mode, area_keyword_3, "")
        if not is_need_refresh:
            if not is_price_assign_by_bot:
                if len(area_keyword_4) > 0:
                    is_need_refresh, is_price_assign_by_bot = ibon_area_auto_select(driver, area_auto_select_mode, area_keyword_4, "")

        if is_need_refresh:
            try:
                driver.refresh()
            except Exception as exc:
                pass

    return is_price_assign_by_bot

def ibon_purchase_button_press(driver):
    ret = False

    el_btn = None
    try:
        el_btn = driver.find_element(By.CSS_SELECTOR, '#ticket-wrap > a.btn')
    except Exception as exc:
        print("find next button fail...")
        print(exc)

    if el_btn is not None:
        print("bingo, found next button, start to press")
        try:
            if el_btn.is_enabled():
                el_btn.click()
                ret = True
        except Exception as exc:
            print("click next button fail...")
            print(exc)
            # use plan B
            try:
                print("force to click by js.")
                driver.execute_script("arguments[0].click();", el_btn)
                ret = True
            except Exception as exc:
                pass

    return ret

def facebook_login(driver, account):
    ret = False
    el_email = None
    try:
        el_email = driver.find_element(By.CSS_SELECTOR, '#email')
    except Exception as exc:
        pass

    is_visible = False
    if el_email is not None:
        try:
            if el_email.is_enabled():
                is_visible = True
        except Exception as exc:
            pass

    is_email_sent = False
    if is_visible:
        try:
            inputed_text = el_email.get_attribute('value')
            if inputed_text is not None:
                if len(inputed_text) == 0:
                    el_email.send_keys(account)
                    is_email_sent = True
        except Exception as exc:
            pass

    el_pass = None
    if is_email_sent:
        try:
            el_pass = driver.find_element(By.CSS_SELECTOR, '#pass')
        except Exception as exc:
            pass

    is_visible = False
    if el_pass is not None:
        try:
            if el_pass.is_enabled():
                is_visible = True
        except Exception as exc:
            pass

    if is_visible:
        try:
            el_pass.click()
        except Exception as exc:
            pass

    return ret

def kktix_login(driver, account):
    ret = False
    el_email = None
    try:
        el_email = driver.find_element(By.CSS_SELECTOR, '#user_login')
    except Exception as exc:
        #print("find #email fail")
        #print(exc)
        pass

    is_visible = False
    if el_email is not None:
        try:
            if el_email.is_enabled():
                is_visible = True
        except Exception as exc:
            pass

    is_email_sent = False
    if is_visible:
        try:
            inputed_text = el_email.get_attribute('value')
            if inputed_text is not None:
                if len(inputed_text) == 0:
                    el_email.send_keys(account)
                    is_email_sent = True
        except Exception as exc:
            pass

    el_pass = None
    if is_email_sent:
        try:
            el_pass = driver.find_element(By.CSS_SELECTOR, '#user_password')
        except Exception as exc:
            pass

    is_visible = False
    if el_pass is not None:
        try:
            if el_pass.is_enabled():
                is_visible = True
        except Exception as exc:
            pass

    if is_visible:
        try:
            el_pass.click()
        except Exception as exc:
            pass

    return ret

def check_and_play_sound_for_captcha(config_dict):
    play_captcha_sound = config_dict["advanced"]["play_captcha_sound"]["enable"]
    captcha_sound_filename = config_dict["advanced"]["play_captcha_sound"]["filename"].strip()
    if play_captcha_sound:
        app_root = get_app_root()
        captcha_sound_filename = os.path.join(app_root, captcha_sound_filename)
        play_mp3_async(captcha_sound_filename)

def play_mp3_async(sound_filename):
    import threading
    threading.Thread(target=play_mp3, args=(sound_filename,), daemon=True).start()

def play_mp3(sound_filename):
    from playsound import playsound
    try:
        playsound(sound_filename)
    except Exception as exc:
        msg=str(exc)
        print("play sound exeption:", msg)
        if platform.system() == 'Windows':
            import winsound
            try:
                winsound.PlaySound(sound_filename, winsound.SND_FILENAME)
            except Exception as exc2:
                pass

# purpose: check alert poped.
# PS: current version not enable...
def check_pop_alert(driver):
    is_alert_popup = False

    # https://stackoverflow.com/questions/57481723/is-there-a-change-in-the-handling-of-unhandled-alert-in-chromedriver-and-chrome
    default_close_alert_text = [""]
    if len(default_close_alert_text) > 0:
        try:
            alert = None
            if not driver is None:
                alert = driver.switch_to.alert
            if not alert is None:
                alert_text = str(alert.text)
                if not alert_text is None:
                    is_match_auto_close_text = False
                    for txt in default_close_alert_text:
                        if len(txt) > 0:
                            if txt in alert.text:
                                is_match_auto_close_text = True
                        else:
                            is_match_auto_close_text = True
                    #print("is_match_auto_close_text:", is_match_auto_close_text)
                    #print("alert3 text:", alert.text)

                    if is_match_auto_close_text:
                        alert.accept()
                        print("alert3 accepted")

                    is_alert_popup = True
            else:
                print("alert3 not detected")
        except NoAlertPresentException as exc1:
            #logger.error('NoAlertPresentException for alert')
            pass
        except NoSuchWindowException:
            pass
        except Exception as exc:
            logger.error('Exception2 for alert')
            logger.error(exc, exc_info=True)

    return is_alert_popup

def list_all_cookies(driver):
    all_cookies=driver.get_cookies();
    cookies_dict = {}
    for cookie in all_cookies:
        cookies_dict[cookie['name']] = cookie['value']
    print(cookies_dict)

def tixcraft_main(driver, url, config_dict, is_verifyCode_editing, ocr):
    if url == 'https://tixcraft.com/':
        tixcraft_home(driver)

    if url == 'https://indievox.com/':
        tixcraft_home(driver)

    if "/activity/detail/" in url:
        is_redirected = tixcraft_redirect(driver, url)

    is_date_selected = False
    if "/activity/game/" in url:
        date_auto_select_enable = config_dict["tixcraft"]["date_auto_select"]["enable"]
        if date_auto_select_enable:
            is_date_selected = tixcraft_date_auto_select(driver, url, config_dict)

    # choose area
    if '/ticket/area/' in url:
        area_auto_select_enable = config_dict["tixcraft"]["area_auto_select"]["enable"]
        if area_auto_select_enable:
            tixcraft_area_auto_select(driver, url, config_dict)

    if '/ticket/verify/' in url:
        presale_code = config_dict["tixcraft"]["presale_code"]
        tixcraft_verify(driver, presale_code)

    # main app, to select ticket number.
    if '/ticket/ticket/' in url:
        if not is_verifyCode_editing:
            is_verifyCode_editing = tixcraft_ticket_main(driver, config_dict, ocr)
    else:
        is_verifyCode_editing = False

    return is_verifyCode_editing

def kktix_main(driver, url, config_dict, answer_index, kktix_register_status_last):
    auto_press_next_step_button = config_dict["kktix"]["auto_press_next_step_button"]
    kktix_account = config_dict["advanced"]["kktix_account"]

    is_url_contain_sign_in = False
    # fix https://kktix.com/users/sign_in?back_to=https://kktix.com/events/xxxx and registerStatus: SOLD_OUT cause page refresh.
    if '/users/sign_in?' in url:
        if len(kktix_account) > 4:
            kktix_login(driver, kktix_account)
        is_url_contain_sign_in = True

    if not is_url_contain_sign_in:
        if '/registrations/new' in url:
            answer_index, kktix_register_status_last = kktix_reg_new(driver, url, answer_index, kktix_register_status_last, config_dict)
        else:
            is_event_page = False
            if '/events/' in url:
                # ex: https://xxx.kktix.cc/events/xxx-copy-1
                if len(url.split('/'))<=5:
                    is_event_page = True

            if is_event_page:
                if auto_press_next_step_button:
                    # pass switch check.
                    #print("should press next here.")
                    kktix_events_press_next_button(driver)

            answer_index = -1
            kktix_register_status_last = None
    return answer_index, kktix_register_status_last

def famiticket_main(driver, url, config_dict):
    try:
        window_handles_count = len(driver.window_handles)
        if window_handles_count > 1:
            driver.switch_to.window(driver.window_handles[0])
            driver.close()
            driver.switch_to.window(driver.window_handles[0])
    except Exception as excSwithFail:
        pass

    if '/Home/Activity/Info/' in url:
        fami_activity(driver)
    if '/Sales/Home/Index/' in url:
        fami_home(driver, url, config_dict)

def urbtix_main(driver, url, config_dict):
    # http://msg.urbtix.hk
    waiting_for_access_url = ['/session/landing-timer/','msg.urbtix.hk','busy.urbtix.hk']
    for waiting_url in waiting_for_access_url:
        if waiting_url in url:
            # delay to avoid ip block.
            time.sleep(1.0)
            try:
                driver.get('https://www.urbtix.hk/')
            except Exception as exec1:
                pass
            pass

    if '/logout?' in url:
        try:
            driver.get('https://www.urbtix.hk/')
        except Exception as exec1:
            pass
        pass

    # https://www.urbtix.hk/event-detail/00000/
    if '/event-detail/' in url:
        date_auto_select_enable = config_dict["tixcraft"]["date_auto_select"]["enable"]
        if date_auto_select_enable:
            is_event_page = False
            if len(url.split('/'))<=6:
                is_event_page = True
            urbtix_purchase_ticket(driver, config_dict)

    # https://www.urbtix.hk/performance-detail/?eventId=00000&performanceId=00000
    is_performace_page = False
    if '/performance-detail/?eventId=' in url:
        is_performace_page = True

    if 'performance-detail?eventId' in url:
        is_performace_page = True

    if is_performace_page:
        area_auto_select_enable = config_dict["tixcraft"]["area_auto_select"]["enable"]
        if area_auto_select_enable:
            urbtix_performance(driver, config_dict)

def check_modal_dialog_popup(driver):
    ret = False

    el_div = None
    try:
        el_div = driver.find_element(By.CSS_SELECTOR, 'div.modal-dialog > div.modal-content')
    except Exception as exc:
        #print("find modal-dialog fail")
        #print(exc)
        pass

    if el_div is not None:
        #print("bingo, found modal-dialog")
        try:
            if el_div.is_enabled():
                if el_div.is_displayed():
                    ret = True
        except Exception as exc:
            pass

    return ret

def cityline_main(driver, url, config_dict):
    # https://www.cityline.com/Login.html?targetUrl=https%3A%2F%2F
    # ignore url redirect
    if '/Login.html' in url:
        return

    # https://msg.cityline.com/
    if 'msg.cityline.com' in url:
        try:
            driver.execute_script("goEvent();")
        except Exception as exec1:
            pass
        pass

    try:
        window_handles_count = len(driver.window_handles)
        if window_handles_count > 1:
            driver.switch_to.window(driver.window_handles[0])
            driver.close()
            driver.switch_to.window(driver.window_handles[0])
    except Exception as excSwithFail:
        pass

    if '/eventDetail?' in url:
        is_modal_dialog_popup = check_modal_dialog_popup(driver)
        if is_modal_dialog_popup:
            print("is_modal_dialog_popup! skip...")
        else:
            date_auto_select_enable = config_dict["tixcraft"]["date_auto_select"]["enable"]
            if date_auto_select_enable:
                cityline_purchase_button_press(driver, config_dict)

    if '/performance?' in url:
        is_modal_dialog_popup = check_modal_dialog_popup(driver)
        if is_modal_dialog_popup:
            print("is_modal_dialog_popup! skip...")
        else:
            area_auto_select_enable = config_dict["tixcraft"]["area_auto_select"]["enable"]
            if area_auto_select_enable:
                cityline_performance(driver, config_dict)

def ibon_main(driver, url, config_dict):
    #https://ticket.ibon.com.tw/ActivityInfo/Details/0000?pattern=entertainment
    if '/ActivityInfo/Details/' in url:
        is_event_page = False
        if len(url.split('/'))<=6:
            is_event_page = True

        if is_event_page:
            date_auto_select_enable = config_dict["tixcraft"]["date_auto_select"]["enable"]
            if date_auto_select_enable:
                ibon_activity_info(driver, config_dict)

    # https://orders.ibon.com.tw/application/UTK02/UTK0201_000.aspx?PERFORMANCE_ID=0000
    if '/application/UTK02/' in url and '.aspx?PERFORMANCE_ID=' in url:
        is_event_page = False
        if len(url.split('/'))<=6:
            is_event_page = True

        if is_event_page:
            area_auto_select_enable = config_dict["tixcraft"]["area_auto_select"]["enable"]
            if area_auto_select_enable:
                if 'PERFORMANCE_PRICE_AREA_ID=' in url:
                    # step 2: assign ticket number.
                    ticket_number = str(config_dict["ticket_number"])
                    is_ticket_number_assigned = ibon_ticket_number_auto_select(driver, ticket_number)
                    if is_ticket_number_assigned:
                        click_ret = ibon_purchase_button_press(driver)
                else:
                    # step 1: select area.
                    ibon_performance(driver, config_dict)

def main():
    config_dict = get_config_dict()

    driver_type = 'selenium'
    #driver_type = 'stealth'
    driver_type = 'undetected_chromedriver'

    driver = None
    if not config_dict is None:
        driver = get_driver_by_config(config_dict, driver_type)
    else:
        print("Load config error!")

    # internal variable. 說明：這是一個內部變數，請略過。
    url = ""
    last_url = ""

    # for tixcraft
    is_verifyCode_editing = False

    # for kktix
    answer_index = -1
    kktix_register_status_last = None

    DISCONNECTED_MSG = 'Unable to evaluate script: no such window: target window already closed'

    debugMode = False
    if 'debug' in config_dict:
        debugMode = config_dict["debug"]
    if debugMode:
        print("Start to looping, detect browser url...")

    ocr = None
    try:
        if config_dict["ocr_captcha"]["enable"]:
            ocr = ddddocr.DdddOcr(show_ad=False, beta=True)
    except Exception as exc:
        pass

    while True:
        time.sleep(0.1)

        is_alert_popup = False

        # pass if driver not loaded.
        if driver is None:
            print("web driver not accessible!")
            break

        #is_alert_popup = check_pop_alert(driver)

        #MUST "do nothing: if alert popup.
        #print("is_alert_popup:", is_alert_popup)
        if is_alert_popup:
            continue

        url = ""
        try:
            url = driver.current_url
        except NoSuchWindowException:
            print('NoSuchWindowException at this url:', url )
            #print("last_url:", last_url)
            #print("get_log:", driver.get_log('driver'))
            if DISCONNECTED_MSG in driver.get_log('driver')[-1]['message']:
                print('quit bot by NoSuchWindowException')
                driver.quit()
                sys.exit()
                break
            try:
                window_handles_count = len(driver.window_handles)
                if window_handles_count > 1:
                    driver.switch_to.window(driver.window_handles[0])
            except Exception as excSwithFail:
                pass
        except UnexpectedAlertPresentException as exc1:
            # PS: DON'T remove this line.
            is_verifyCode_editing = False
            print('UnexpectedAlertPresentException at this url:', url )
            #time.sleep(3.5)
            # PS: do nothing...
            # PS: current chrome-driver + chrome call current_url cause alert/prompt dialog disappear!
            # raise exception at selenium/webdriver/remote/errorhandler.py
            # after dialog disappear new excpetion: unhandled inspector error: Not attached to an active page
            is_pass_alert = False
            is_pass_alert = True
            if is_pass_alert:
                try:
                    driver.switch_to.alert.accept()
                except Exception as exc:
                    pass

        except Exception as exc:
            is_verifyCode_editing = False

            logger.error('Maxbot URL Exception')
            logger.error(exc, exc_info=True)

            #UnicodeEncodeError: 'ascii' codec can't encode characters in position 63-72: ordinal not in range(128)
            str_exc = ""
            try:
                str_exc = str(exc)
            except Exception as exc2:
                pass

            if len(str_exc)==0:
                str_exc = repr(exc)

            exit_bot_error_strings = [u'Max retries exceeded'
            , u'chrome not reachable'
            , u'unable to connect to renderer'
            , u'failed to check if window was closed'
            , u'Failed to establish a new connection'
            , u'Connection refused'
            , u'disconnected'
            , u'without establishing a connection'
            , u'web view not found'
            ]
            for each_error_string in exit_bot_error_strings:
                # for python2
                # say goodbye to python2
                '''
                try:
                    basestring
                    if isinstance(each_error_string, unicode):
                        each_error_string = str(each_error_string)
                except NameError:  # Python 3.x
                    basestring = str
                '''
                if isinstance(str_exc, str):
                    if each_error_string in str_exc:
                        print('quit bot by error:', each_error_string)
                        driver.quit()
                        sys.exit()
                        break

            # not is above case, print exception.
            print("Exception:", str_exc)
            pass

        if url is None:
            continue
        else:
            if len(url) == 0:
                continue

        # 說明：輸出目前網址，覺得吵的話，請註解掉這行。
        if debugMode:
            print("url:", url)

        if len(url) > 0 :
            if url != last_url:
                print(url)
            last_url = url

        # for Max's manuall test.
        if '/Downloads/varify.html' in url:
            tixcraft_verify(driver, "")

        tixcraft_family = False
        if 'tixcraft.com' in url:
            tixcraft_family = True

        if 'indievox.com' in url:
            tixcraft_family = True

        if tixcraft_family:
            is_verifyCode_editing = tixcraft_main(driver, url, config_dict, is_verifyCode_editing, ocr)

        # for kktix.cc and kktix.com
        if 'kktix.c' in url:
            answer_index, kktix_register_status_last = kktix_main(driver, url, config_dict, answer_index, kktix_register_status_last)

        # for famiticket
        if 'famiticket.com' in url:
            famiticket_main(driver, url, config_dict)

        # for urbtix
        # https://ticket.urbtix.hk/internet/secure/event/37348/performanceDetail
        if 'urbtix.hk' in url:
            urbtix_main(driver, url, config_dict)

        if 'cityline.com' in url:
            cityline_main(driver, url, config_dict)

        if 'ibon.com' in url:
            ibon_main(driver, url, config_dict)

        # for facebook
        facebook_login_url = 'https://www.facebook.com/login.php?'
        if url[:len(facebook_login_url)]==facebook_login_url:
            facebook_account = config_dict["advanced"]["facebook_account"].strip()
            if len(facebook_account) > 4:
                facebook_login(driver, facebook_account)

if __name__ == "__main__":
    CONST_MODE_GUI = 0
    CONST_MODE_CLI = 1
    mode = CONST_MODE_GUI
    #mode = CONST_MODE_CLI
    
    if mode == CONST_MODE_GUI:
        main()
    else:
        #for test kktix infer answer.
        #captcha_text_div_text = u"請回答下列問題,請在下方空格輸入DELIGHT（請以半形輸入法作答，大小寫需要一模一樣）"
        #captcha_text_div_text = u"請在下方空白處輸入引號內文字：「abc」"
        #captcha_text_div_text = u"請在下方空白處輸入引號內文字：「0118eveconcert」（請以半形小寫作答。）"
        #captcha_text_div_text = "在《DEEP AWAKENING見過深淵的人》專輯中，哪一首為合唱曲目？ 【V6】深淵 、【Z5】浮木、【J8】無聲、【C1】以上皆非 （請以半形輸入法作答，大小寫/阿拉伯數字需要一模一樣，範例：A2）"
        captcha_text_div_text = "Super Junior 的隊長是以下哪位?  【v】神童 【w】藝聲 【x】利特 【y】始源  若你覺得答案為 a，請輸入 a  (英文為半形小寫)"
        inferred_answer_string, answer_list = get_answer_list_from_question_string(None, captcha_text_div_text)
        print("inferred_answer_string:", inferred_answer_string)
        print("answer_list:", answer_list)

        ocr = ddddocr.DdddOcr(show_ad=False, beta=True)
        with open('captcha-xxxx.png', 'rb') as f:
            image_bytes = f.read()
        res = ocr.classification(image_bytes)
        print(res)

------------------------------------------------------------------------------------
ps:這邊是settings
#!/usr/bin/env python3
#encoding=utf-8
# 'seleniumwire' and 'selenium 4' raise error when running python 2.x
# PS: python 2.x will be removed in future.
try:
    # for Python2
    from Tkinter import *
    import ttk
    import tkMessageBox as messagebox
except ImportError:
    # for Python3
    from tkinter import *
    from tkinter import ttk
    from tkinter import messagebox
import os
import sys
import platform
import json
import webbrowser
import pyperclip

CONST_APP_VERSION = u"MaxBot (2023.01.13)"

CONST_FROM_TOP_TO_BOTTOM = u"from top to bottom"
CONST_FROM_BOTTOM_TO_TOP = u"from bottom to top"
CONST_RANDOM = u"random"
CONST_SELECT_ORDER_DEFAULT = CONST_FROM_TOP_TO_BOTTOM
CONST_SELECT_OPTIONS_DEFAULT = (CONST_FROM_TOP_TO_BOTTOM, CONST_FROM_BOTTOM_TO_TOP, CONST_RANDOM)
CONST_SELECT_OPTIONS_ARRAY = [CONST_FROM_TOP_TO_BOTTOM, CONST_FROM_BOTTOM_TO_TOP, CONST_RANDOM]
CONST_ADBLOCK_PLUS_ADVANCED_FILTER_DEFAULT = '''tixcraft.com###topAlert
tixcraft.com##.col-md-7.col-xs-12.mg-top
tixcraft.com##.topBar.alert-box.emergency
tixcraft.com##.footer.clearfix
tixcraft.com##.row.process-wizard.process-wizard-info
tixcraft.com##.nav-line
tixcraft.com##.page-info.row.line-btm.mg-0'''
CONST_CAPTCHA_SOUND_FILENAME_DEFAULT = "ding-dong.wav"
CONST_HOMEPAGE_DEFAULT = "https://tixcraft.com"

translate={}

URL_DONATE = 'https://max-everyday.com/about/#donate'
URL_HELP = 'https://max-everyday.com/2018/03/tixcraft-bot/'
URL_RELEASE = 'https://github.com/max32002/tixcraft_bot/releases'
URL_FB = 'https://www.facebook.com/maxbot.ticket'

def load_translate():
    translate = {}
    en_us={}
    en_us["homepage"] = 'Homepage'
    en_us["browser"] = 'Browser'
    en_us["language"] = 'Language'
    en_us["ticket_number"] = 'Ticker Number'

    en_us["auto_check_agree"] = 'Auto check agree checkbox'
    en_us["enable"] = 'Enable'

    en_us["auto_press_next_step_button"] = 'Auto Press Next Step Button'
    en_us["auto_fill_ticket_number"] = 'Auto Fill Ticket Number'
    en_us["area_select_order"] = 'Area select order'
    en_us["area_keyword"] = 'Area Keyword'
    en_us["and"] = 'And with'
    en_us["auto_guess_options"] = 'Guess Options in Question'
    en_us["user_guess_string"] = 'Fill This Answer in Question'

    en_us["date_auto_select"] = 'Date Auto Select'
    en_us["date_select_order"] = 'Date select order'
    en_us["date_keyword"] = 'Date Keyword'
    en_us["pass_date_is_sold_out"] = 'Pass date is sold out'
    en_us["auto_reload_coming_soon_page"] = 'Reload coming soon page'
    
    en_us["area_auto_select"] = 'Area Auto Select'
    #en_us["area_select_order"] = 'Area select order'
    en_us["area_keyword_1"] = 'Area Keyword #1'
    en_us["area_keyword_2"] = 'Area Keyword #2'
    en_us["area_keyword_3"] = 'Area Keyword #3'
    en_us["area_keyword_4"] = 'Area Keyword #4'
    en_us["pass_1_seat_remaining"] = 'Pass 1 seat remaining'
    en_us["ocr_captcha"] = 'OCR captcha'
    en_us["ocr_captcha_with_submit"] = 'After guess auto submit'
    en_us["ocr_captcha_force_submit"] = 'Allow submit wrong answer'

    en_us["preference"] = 'Preference'
    en_us["advanced"] = 'Advanced'
    en_us["about"] = 'About'

    en_us["run"] = 'Run'
    en_us["save"] = 'Save'
    en_us["exit"] = 'Close'
    en_us["copy"] = 'Copy'
    en_us["restore_defaults"] = 'Restore Defaults'
    en_us["done"] = 'Done'

    en_us["facebook_account"] = 'Facebook account'
    en_us["kktix_account"] = 'KKTIX account'
    en_us["play_captcha_sound"] = 'Play sound when captcha'
    en_us["captcha_sound_filename"] = 'captcha sound filename'
    en_us["adblock_plus_enable"] = 'Adblock Plus Extension'
    en_us["adblock_plus_memo"] = 'Default adblock is disable'
    en_us["adblock_plus_settings"] = "Adblock Advanced Filter"

    en_us["maxbot_slogan"] = 'MaxBot is a FREE and open source bot program. Wish you good luck.'
    en_us["donate"] = 'Donate'
    en_us["help"] = 'Help'
    en_us["release"] = 'Release'

    zh_tw={}
    zh_tw["homepage"] = '售票網站'
    zh_tw["browser"] = '瀏覽器'
    zh_tw["language"] = '語言'
    zh_tw["ticket_number"] = '門票張數'

    zh_tw["auto_check_agree"] = '自動勾選同意'

    zh_tw["enable"] = '啟用'
    zh_tw["auto_press_next_step_button"] = '自動點選下一步按鈕'
    zh_tw["auto_fill_ticket_number"] = '自動輸入張數'
    zh_tw["area_select_order"] = '區域排序方式'
    zh_tw["area_keyword"] = '區域關鍵字'
    zh_tw["and"] = '而且（同列）'
    zh_tw["auto_guess_options"] = '自動猜測驗證問題'
    zh_tw["user_guess_string"] = '在驗證問題中填寫此答案'

    zh_tw["date_auto_select"] = '日期自動點選'
    zh_tw["date_select_order"] = '日期排序方式'
    zh_tw["date_keyword"] = '日期關鍵字'
    zh_tw["pass_date_is_sold_out"] = '避開「搶購一空」的日期'
    zh_tw["auto_reload_coming_soon_page"] = '自動刷新倒數中的日期頁面'

    zh_tw["area_auto_select"] = '區域自動點選'
    #zh_tw["area_select_order"] = '區域排序方式'
    zh_tw["area_keyword_1"] = '區域關鍵字 #1'
    zh_tw["area_keyword_2"] = '區域關鍵字 #2'
    zh_tw["area_keyword_3"] = '區域關鍵字 #3'
    zh_tw["area_keyword_4"] = '區域關鍵字 #4'
    zh_tw["pass_1_seat_remaining"] = '避開「剩餘 1」的區域'
    zh_tw["ocr_captcha"] = '猜測驗證碼'
    zh_tw["ocr_captcha_with_submit"] = '猜測後自動送出'
    zh_tw["ocr_captcha_force_submit"] = '允許送出錯的驗證碼'

    zh_tw["preference"] = '偏好設定'
    zh_tw["advanced"] = '進階設定'
    zh_tw["about"] = '關於'

    zh_tw["run"] = '搶票'
    zh_tw["save"] = '存檔'
    zh_tw["exit"] = '關閉'
    zh_tw["copy"] = '複製'
    zh_tw["restore_defaults"] = '恢復預設值'
    zh_tw["done"] = '完成'

    zh_tw["facebook_account"] = 'Facebook 帳號'
    zh_tw["kktix_account"] = 'KKTIX 帳號'
    zh_tw["play_captcha_sound"] = '輸入驗證碼時播放音效'
    zh_tw["captcha_sound_filename"] = '驗證碼用音效檔'
    zh_tw["adblock_plus_enable"] = 'Adblock 瀏覽器擴充功能'
    zh_tw["adblock_plus_memo"] = 'Adblock 功能預設關閉'
    zh_tw["adblock_plus_settings"] = "Adblock 進階過濾規則"

    zh_tw["maxbot_slogan"] = 'MaxBot是一個免費、開放原始碼的搶票機器人。\n祝您搶票成功。'
    zh_tw["donate"] = '打賞'
    zh_tw["release"] = '所有可用版本'
    zh_tw["help"] = '使用教學'

    zh_cn={}
    zh_cn["homepage"] = '售票网站'
    zh_cn["browser"] = '浏览器'
    zh_cn["language"] = '语言'
    zh_cn["ticket_number"] = '门票张数'

    zh_cn["auto_check_agree"] = '自动勾选同意'
    zh_cn["enable"] = '启用'

    zh_cn["auto_press_next_step_button"] = '自动点选下一步按钮'
    zh_cn["auto_fill_ticket_number"] = '自动输入张数'
    zh_cn["area_select_order"] = '区域排序方式'
    zh_cn["area_keyword"] = '区域关键字'
    zh_cn["and"] = '而且（同列）'
    zh_cn["auto_guess_options"] = '自动猜测验证问题'
    zh_cn["user_guess_string"] = '在验证问题中填写此答案'

    zh_cn["date_auto_select"] = '日期自动点选'
    zh_cn["date_select_order"] = '日期排序方式'
    zh_cn["date_keyword"] = '日期关键字'
    zh_cn["pass_date_is_sold_out"] = '避开“抢购一空”的日期'
    zh_cn["auto_reload_coming_soon_page"] = '自动刷新倒数中的日期页面'

    zh_cn["area_auto_select"] = '区域自动点选'
    #zh_cn["area_select_order"] = '区域排序方式'
    zh_cn["area_keyword_1"] = '区域关键字 #1'
    zh_cn["area_keyword_2"] = '区域关键字 #2'
    zh_cn["area_keyword_3"] = '区域关键字 #3'
    zh_cn["area_keyword_4"] = '区域关键字 #4'
    zh_cn["pass_1_seat_remaining"] = '避开“剩余 1”的区域'
    zh_cn["ocr_captcha"] = '猜测验证码'
    zh_cn["ocr_captcha_with_submit"] = '猜测后自动送出'
    zh_cn["ocr_captcha_force_submit"] = '允许送出错的验证码'

    zh_cn["preference"] = '偏好设定'
    zh_cn["advanced"] = '進階設定'
    zh_cn["about"] = '关于'
    zh_cn["copy"] = '复制'

    zh_cn["run"] = '抢票'
    zh_cn["save"] = '存档'
    zh_cn["exit"] = '关闭'
    zh_cn["copy"] = '复制'
    zh_cn["restore_defaults"] = '恢复默认值'
    zh_cn["done"] = '完成'

    zh_cn["facebook_account"] = 'Facebook 帐号'
    zh_cn["kktix_account"] = 'KKTIX 帐号'
    zh_cn["play_captcha_sound"] = '输入验证码时播放音效'
    zh_cn["captcha_sound_filename"] = '验证码用音效档'
    zh_cn["adblock_plus_enable"] = 'Adblock 浏览器扩充功能'
    zh_cn["adblock_plus_memo"] = 'Adblock 功能预设关闭'
    zh_cn["adblock_plus_settings"] = "Adblock 进阶过滤规则"

    zh_cn["maxbot_slogan"] = 'MaxBot 是一个免费的开源机器人程序。\n祝您抢票成功。'
    zh_cn["donate"] = '打赏'
    zh_cn["help"] = '使用教学'
    zh_cn["release"] = '所有可用版本'

    ja_jp={}
    ja_jp["homepage"] = 'ホームページ'
    ja_jp["browser"] = 'ブラウザ'
    ja_jp["language"] = '言語'
    ja_jp["ticket_number"] = '枚数'

    ja_jp["auto_check_agree"] = '自動的に同意をチェック'
    ja_jp["enable"] = '有効'

    ja_jp["auto_press_next_step_button"] = '次を自動で押す'
    ja_jp["auto_fill_ticket_number"] = '枚数自動入力'
    ja_jp["area_select_order"] = 'エリアソート方法'
    ja_jp["area_keyword"] = 'エリアキーワード'
    ja_jp["and"] = 'そして（同列）'
    ja_jp["auto_guess_options"] = '自動推測検証問題'
    ja_jp["user_guess_string"] = '質問に回答を記入'

    ja_jp["date_auto_select"] = '日付自動選択'
    ja_jp["date_select_order"] = '日付のソート方法'
    ja_jp["date_keyword"] = '日付キーワード'
    ja_jp["pass_date_is_sold_out"] = '「売り切れ」公演を避ける'
    ja_jp["auto_reload_coming_soon_page"] = '公開予定のページをリロード'

    ja_jp["area_auto_select"] = 'エリア自動選択'
    #ja_jp["area_select_order"] = 'エリアソート方法'
    ja_jp["area_keyword_1"] = 'エリアキーワード #1'
    ja_jp["area_keyword_2"] = 'エリアキーワード #2'
    ja_jp["area_keyword_3"] = 'エリアキーワード #3'
    ja_jp["area_keyword_4"] = 'エリアキーワード #4'
    ja_jp["pass_1_seat_remaining"] = '「1 席残り」エリアは避ける'
    ja_jp["ocr_captcha"] = 'キャプチャを推測する'
    ja_jp["ocr_captcha_with_submit"] = '提出で推測した後'
    zh_cn["ocr_captcha_force_submit"] = '間違った回答の送信を許可する'

    ja_jp["preference"] = '設定'
    ja_jp["advanced"] = '高度な設定'
    ja_jp["about"] = '情報'

    ja_jp["run"] = 'チケットを取る'
    ja_jp["save"] = '保存'
    ja_jp["exit"] = '閉じる'
    ja_jp["copy"] = 'コピー'
    ja_jp["restore_defaults"] = 'デフォルトに戻す'
    ja_jp["done"] = '終わり'

    ja_jp["facebook_account"] = 'Facebookのアカウント'
    ja_jp["kktix_account"] = 'KKTIXのアカウント'
    ja_jp["play_captcha_sound"] = 'キャプチャ時に音を鳴らす'
    ja_jp["captcha_sound_filename"] = 'サウンドファイル名'

    ja_jp["adblock_plus_enable"] = 'Adblock 拡張機能'
    ja_jp["adblock_plus_memo"] = 'Adblock デフォルトは無効です'
    ja_jp["adblock_plus_settings"] = "Adblock 高度なフィルター"
    ja_jp["maxbot_slogan"] = 'MaxBot は無料のオープン ソース ボット プログラムです。チケットの成功をお祈りします。'
    ja_jp["donate"] = '寄付'
    ja_jp["help"] = '利用方法'
    ja_jp["release"] = 'リリース'

    translate['en_us']=en_us
    translate['zh_tw']=zh_tw
    translate['zh_cn']=zh_cn
    translate['ja_jp']=ja_jp
    return translate

def get_app_root():
    # 讀取檔案裡的參數值
    basis = ""
    if hasattr(sys, 'frozen'):
        basis = sys.executable
    else:
        basis = sys.argv[0]
    app_root = os.path.dirname(basis)
    return app_root

def get_default_config():
    config_dict={}

    config_dict["homepage"] = CONST_HOMEPAGE_DEFAULT
    config_dict["browser"] = "chrome"
    config_dict["language"] = "English"
    config_dict["ticket_number"] = 2
    config_dict["pass_1_seat_remaining"] = True
    config_dict["auto_check_agree"] = True
    config_dict["ocr_captcha"] = {}
    config_dict["ocr_captcha"]["enable"] = True
    config_dict["ocr_captcha"]["auto_submit"] = False
    config_dict["ocr_captcha"]["force_submit"] = False

    config_dict['kktix']={}
    config_dict["kktix"]["auto_press_next_step_button"] = True
    config_dict["kktix"]["auto_fill_ticket_number"] = True
    config_dict["kktix"]["area_mode"] = CONST_SELECT_ORDER_DEFAULT
    config_dict["kktix"]["area_keyword_1"] = ""
    config_dict["kktix"]["area_keyword_1_and"] = ""
    config_dict["kktix"]["area_keyword_2"] = ""
    config_dict["kktix"]["area_keyword_2_and"] = ""
    config_dict["kktix"]["auto_guess_options"] = False
    config_dict["kktix"]["user_guess_string"] = ""

    config_dict['tixcraft']={}
    config_dict["tixcraft"]["date_auto_select"] = {}
    config_dict["tixcraft"]["date_auto_select"]["enable"] = True
    config_dict["tixcraft"]["date_auto_select"]["date_keyword"] = ""
    config_dict["tixcraft"]["area_auto_select"] = {}
    config_dict["tixcraft"]["area_auto_select"]["enable"] = True
    config_dict["tixcraft"]["area_auto_select"]["area_keyword_1"] = ""
    config_dict["tixcraft"]["area_auto_select"]["area_keyword_2"] = ""
    config_dict["tixcraft"]["area_auto_select"]["area_keyword_3"] = ""
    config_dict["tixcraft"]["area_auto_select"]["area_keyword_4"] = ""

    config_dict["tixcraft"]["date_auto_select"]["mode"] = CONST_SELECT_ORDER_DEFAULT
    config_dict["tixcraft"]["area_auto_select"]["mode"] = CONST_SELECT_ORDER_DEFAULT

    config_dict["tixcraft"]["pass_date_is_sold_out"] = True
    config_dict["tixcraft"]["auto_reload_coming_soon_page"] = True
    config_dict["tixcraft"]["presale_code"] = ""

    config_dict['advanced']={}

    config_dict['advanced']['play_captcha_sound']={}
    config_dict["advanced"]["play_captcha_sound"]["enable"] = True
    config_dict["advanced"]["play_captcha_sound"]["filename"] = CONST_CAPTCHA_SOUND_FILENAME_DEFAULT

    config_dict["advanced"]["facebook_account"] = ""
    config_dict["advanced"]["kktix_account"] = ""
    config_dict["advanced"]["adblock_plus_enable"] = False

    config_dict['debug']=False

    return config_dict

def load_json():
    app_root = get_app_root()

    # overwrite config path.
    config_filepath = os.path.join(app_root, 'settings.json')

    config_dict = None
    if os.path.isfile(config_filepath):
        with open(config_filepath) as json_data:
            config_dict = json.load(json_data)
    else:
        config_dict = get_default_config()
    return config_filepath, config_dict

def btn_restore_defaults_clicked(language_code):
    app_root = get_app_root()
    config_filepath = os.path.join(app_root, 'settings.json')

    config_dict = get_default_config()
    import json
    with open(config_filepath, 'w') as outfile:
        json.dump(config_dict, outfile)
    messagebox.showinfo(translate[language_code]["restore_defaults"], translate[language_code]["done"])

    global root
    load_GUI(root, config_dict)

def btn_save_clicked(language_code):
    btn_save_act(language_code)

def btn_save_act(language_code, slience_mode=False):
    app_root = get_app_root()
    config_filepath = os.path.join(app_root, 'settings.json')

    config_dict = get_default_config()

    # read user input
    global combo_homepage
    global combo_browser
    global combo_language
    global combo_ticket_number
    global chk_state_pass_1_seat_remaining
    global chk_state_auto_check_agree

    global chk_state_auto_press_next_step_button
    global chk_state_auto_fill_ticket_number
    global txt_kktix_area_keyword_1
    global txt_kktix_area_keyword_1_and
    global txt_kktix_area_keyword_2
    global txt_kktix_area_keyword_2_and
    # disable password brute force attack
    global txt_kktix_answer_dictionary
    global txt_kktix_user_guess_string

    global chk_state_auto_guess_options

    global chk_state_date_auto_select
    global txt_date_keyword
    global chk_state_area_auto_select
    global txt_area_keyword_1
    global txt_area_keyword_2
    global txt_area_keyword_3
    global txt_area_keyword_4

    global combo_date_auto_select_mode
    global combo_area_auto_select_mode

    global chk_state_pass_date_is_sold_out
    global chk_state_auto_reload_coming_soon_page
    global txt_presale_code

    global txt_facebook_account
    global txt_kktix_account
    global chk_state_play_captcha_sound
    global txt_captcha_sound_filename
    global chk_state_adblock_plus
    global chk_state_ocr_captcha
    global chk_state_ocr_captcha_with_submit
    global chk_state_ocr_captcha_force_submit

    is_all_data_correct = True

    if is_all_data_correct:
        if combo_homepage.get().strip()=="":
            is_all_data_correct = False
            messagebox.showerror("Error", "Please enter homepage")
        else:
            config_dict["homepage"] = combo_homepage.get().strip()

    if is_all_data_correct:
        if combo_browser.get().strip()=="":
            is_all_data_correct = False
            messagebox.showerror("Error", "Please select a browser: chrome or firefox")
        else:
            config_dict["browser"] = combo_browser.get().strip()

    if is_all_data_correct:
        if combo_language.get().strip()=="":
            is_all_data_correct = False
            messagebox.showerror("Error", "Please select a language")
        else:
            config_dict["language"] = combo_language.get().strip()
            # display as new language.
            language_code = get_language_code_by_name(config_dict["language"])

    if is_all_data_correct:
        if combo_ticket_number.get().strip()=="":
            is_all_data_correct = False
            messagebox.showerror("Error", "Please select a value")
        else:
            config_dict["ticket_number"] = int(combo_ticket_number.get().strip())

    if is_all_data_correct:
        config_dict["pass_1_seat_remaining"] = bool(chk_state_pass_1_seat_remaining.get())
        config_dict["auto_check_agree"] = bool(chk_state_auto_check_agree.get())

        config_dict["kktix"]["auto_press_next_step_button"] = bool(chk_state_auto_press_next_step_button.get())
        config_dict["kktix"]["auto_fill_ticket_number"] = bool(chk_state_auto_fill_ticket_number.get())
        config_dict["kktix"]["area_mode"] = combo_kktix_area_mode.get().strip()
        config_dict["kktix"]["area_keyword_1"] = txt_kktix_area_keyword_1.get().strip()
        config_dict["kktix"]["area_keyword_1_and"] = txt_kktix_area_keyword_1_and.get().strip()
        config_dict["kktix"]["area_keyword_2"] = txt_kktix_area_keyword_2.get().strip()
        config_dict["kktix"]["area_keyword_2_and"] = txt_kktix_area_keyword_2_and.get().strip()
        # disable password brute force attack
        #config_dict["kktix"]["answer_dictionary"] = txt_kktix_answer_dictionary.get().strip()
        config_dict["kktix"]["auto_guess_options"] = bool(chk_state_auto_guess_options.get())
        config_dict["kktix"]["user_guess_string"] = txt_kktix_user_guess_string.get().strip()

        config_dict["tixcraft"]["date_auto_select"]["enable"] = bool(chk_state_date_auto_select.get())
        config_dict["tixcraft"]["date_auto_select"]["date_keyword"] = txt_date_keyword.get().strip()

        config_dict["tixcraft"]["area_auto_select"]["enable"] = bool(chk_state_area_auto_select.get())
        config_dict["tixcraft"]["area_auto_select"]["area_keyword_1"] = txt_area_keyword_1.get().strip()
        config_dict["tixcraft"]["area_auto_select"]["area_keyword_2"] = txt_area_keyword_2.get().strip()
        config_dict["tixcraft"]["area_auto_select"]["area_keyword_3"] = txt_area_keyword_3.get().strip()
        config_dict["tixcraft"]["area_auto_select"]["area_keyword_4"] = txt_area_keyword_4.get().strip()

        config_dict["tixcraft"]["date_auto_select"]["mode"] = combo_date_auto_select_mode.get().strip()
        config_dict["tixcraft"]["area_auto_select"]["mode"] = combo_area_auto_select_mode.get().strip()

        config_dict["tixcraft"]["pass_date_is_sold_out"] = bool(chk_state_pass_date_is_sold_out.get())
        config_dict["tixcraft"]["auto_reload_coming_soon_page"] = bool(chk_state_auto_reload_coming_soon_page.get())
        config_dict["tixcraft"]["presale_code"] = txt_presale_code.get().strip()

        config_dict["advanced"]["play_captcha_sound"]["enable"] = bool(chk_state_play_captcha_sound.get())
        config_dict["advanced"]["play_captcha_sound"]["filename"] = txt_captcha_sound_filename.get().strip()

        config_dict["advanced"]["facebook_account"] = txt_facebook_account.get().strip()
        config_dict["advanced"]["kktix_account"] = txt_kktix_account.get().strip()
        config_dict["advanced"]["adblock_plus_enable"] = bool(chk_state_adblock_plus.get())
        
        config_dict["ocr_captcha"] = {}
        config_dict["ocr_captcha"]["enable"] = bool(chk_state_ocr_captcha.get())
        config_dict["ocr_captcha"]["auto_submit"] = bool(chk_state_ocr_captcha_with_submit.get())
        config_dict["ocr_captcha"]["force_submit"] = bool(chk_state_ocr_captcha_force_submit.get())

    # save config.
    if is_all_data_correct:
        import json
        with open(config_filepath, 'w') as outfile:
            json.dump(config_dict, outfile)

        if not slience_mode:
            messagebox.showinfo(translate[language_code]["save"], translate[language_code]["done"])

    return is_all_data_correct

def btn_run_clicked(language_code):
    import subprocess

    print('run button pressed.')
    Root_Dir = ""
    save_ret = btn_save_act(language_code, slience_mode=True)
    print("save config result:", save_ret)
    if save_ret:
        if hasattr(sys, 'frozen'):
            print("execute in frozen mode")

            # check platform here.
            if platform.system() == 'Darwin':
                print("execute MacOS python script")
                subprocess.Popen("./chrome_tixcraft", shell=True)
            if platform.system() == 'Linux':
                print("execute linux binary")
                subprocess.Popen("./chrome_tixcraft", shell=True)
            if platform.system() == 'Windows':
                print("execute .exe binary.")
                subprocess.Popen("chrome_tixcraft.exe", shell=True)
        else:
            interpreter_binary = 'python'
            interpreter_binary_alt = 'python3'
            if platform.system() == 'Darwin':
                # try python3 before python.
                interpreter_binary = 'python3'
                interpreter_binary_alt = 'python'
            print("execute in shell mode.")
            working_dir = os.path.dirname(os.path.realpath(__file__))
            #print("script path:", working_dir)
            #messagebox.showinfo(title="Debug0", message=working_dir)

            # some python3 binary, running in 'python' command.
            try:
                print('try', interpreter_binary)
                s=subprocess.Popen([interpreter_binary, 'chrome_tixcraft.py'], cwd=working_dir)
                #s=subprocess.Popen(['./chrome_tixcraft'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=working_dir)
                #s=subprocess.run(['python3', 'chrome_tixcraft.py'], cwd=working_dir)
                #messagebox.showinfo(title="Debug1", message=str(s))
            except Exception as exc:
                print('try', interpreter_binary_alt)
                try:
                    s=subprocess.Popen([interpreter_binary_alt, 'chrome_tixcraft.py'], cwd=working_dir)
                except Exception as exc:
                    msg=str(exc)
                    print("exeption:", msg)
                    #messagebox.showinfo(title="Debug2", message=msg)
                    pass

def btn_preview_sound_clicked():
    global txt_captcha_sound_filename
    new_sound_filename = txt_captcha_sound_filename.get().strip()
    #print("new_sound_filename:", new_sound_filename)
    app_root = get_app_root()
    new_sound_filename = os.path.join(app_root, new_sound_filename)
    play_mp3_async(new_sound_filename)

def play_mp3_async(sound_filename):
    import threading
    threading.Thread(target=play_mp3, args=(sound_filename,), daemon=True).start()

def play_mp3(sound_filename):
    from playsound import playsound
    try:
        playsound(sound_filename)
    except Exception as exc:
        msg=str(exc)
        print("play sound exeption:", msg)
        if platform.system() == 'Windows':
            import winsound
            try:
                winsound.PlaySound(sound_filename, winsound.SND_FILENAME)
            except Exception as exc2:
                pass

def open_url(url):
    webbrowser.open_new(url)

def btn_exit_clicked():
    root.destroy()

def btn_donate_clicked():
    open_url.open(URL_DONATE)

def btn_help_clicked():
    open_url.open(URL_HELP)

def btn_copy_clicked():
    pyperclip.copy(CONST_ADBLOCK_PLUS_ADVANCED_FILTER_DEFAULT)

def callbackTicketNumberOnChange(event):
    showHidePass1SeatRemaining()

def callbackLanguageOnChange(event):
    applyNewLanguage()

def get_language_code_by_name(new_language):
    language_code = "en_us"
    if u'繁體中文' in new_language:
        language_code = 'zh_tw'
    if u'簡体中文' in new_language:
        language_code = 'zh_cn'
    if u'日本語' in new_language:
        language_code = 'ja_jp'
    #print("new language code:", language_code)

    return language_code

def applyNewLanguage():
    global combo_language
    new_language = combo_language.get().strip()
    #print("new language value:", new_language)

    language_code=get_language_code_by_name(new_language)

    global lbl_homepage
    global lbl_browser
    global lbl_language
    global lbl_ticket_number
    global lbl_pass_1_seat_remaining
    global lbl_auto_check_agree

    # for kktix
    global lbl_auto_press_next_step_button
    global lbl_auto_fill_ticket_number
    global lbl_kktix_area_mode
    global lbl_kktix_area_keyword_1
    global lbl_kktix_area_keyword_1_and_text
    global lbl_kktix_area_keyword_2
    global lbl_kktix_area_keyword_2_and_text
    global lbl_auto_guess_options
    global lbl_user_guess_string

    # for tixcraft
    global lbl_date_auto_select
    global lbl_date_auto_select_mode
    global lbl_date_keyword
    global lbl_area_auto_select
    global lbl_area_auto_select_mode
    global lbl_area_keyword_1
    global lbl_area_keyword_2
    global lbl_area_keyword_3
    global lbl_area_keyword_4
    global lbl_pass_date_is_sold_out
    global lbl_auto_reload_coming_soon_page
    global lbl_presale_code
    global lbl_ocr_captcha
    global lbl_ocr_captcha_with_submit
    global lbl_ocr_captcha_force_submit

    # for checkbox
    global chk_pass_1_seat_remaining
    global chk_auto_check_agree

    global chk_auto_press_next_step_button
    global chk_auto_fill_ticket_number
    global chk_auto_guess_options
    global chk_date_auto_select
    global chk_area_auto_select
    global chk_pass_date_is_sold_out
    global chk_auto_reload_coming_soon_page
    global chk_play_captcha_sound
    global chk_adblock_plus
    global chk_ocr_captcha
    global chk_ocr_captcha_with_sumit
    global chk_ocr_captcha_force_sumit

    global tabControl

    global lbl_slogan
    global lbl_help
    global lbl_donate
    global lbl_release

    global lbl_adblock_plus
    global lbl_adblock_plus_memo
    global lbl_adblock_plus_settings

    lbl_homepage.config(text=translate[language_code]["homepage"])
    lbl_browser.config(text=translate[language_code]["browser"])
    lbl_language.config(text=translate[language_code]["language"])
    lbl_ticket_number.config(text=translate[language_code]["ticket_number"])
    lbl_pass_1_seat_remaining.config(text=translate[language_code]["pass_1_seat_remaining"])
    lbl_auto_check_agree.config(text=translate[language_code]["auto_check_agree"])

    lbl_auto_press_next_step_button.config(text=translate[language_code]["auto_press_next_step_button"])
    lbl_auto_fill_ticket_number.config(text=translate[language_code]["auto_fill_ticket_number"])
    lbl_kktix_area_mode.config(text=translate[language_code]["area_select_order"])
    lbl_kktix_area_keyword_1.config(text=translate[language_code]["area_keyword_1"])
    lbl_kktix_area_keyword_1_and_text.config(text=translate[language_code]["and"])
    lbl_kktix_area_keyword_2.config(text=translate[language_code]["area_keyword_2"])
    lbl_kktix_area_keyword_2_and_text.config(text=translate[language_code]["and"])
    lbl_auto_guess_options.config(text=translate[language_code]["auto_guess_options"])
    lbl_user_guess_string.config(text=translate[language_code]["user_guess_string"])
    
    lbl_date_auto_select.config(text=translate[language_code]["date_auto_select"])
    lbl_date_auto_select_mode.config(text=translate[language_code]["date_select_order"])
    lbl_date_keyword.config(text=translate[language_code]["date_keyword"])
    lbl_area_auto_select.config(text=translate[language_code]["area_auto_select"])
    lbl_area_auto_select_mode.config(text=translate[language_code]["area_select_order"])
    lbl_area_keyword_1.config(text=translate[language_code]["area_keyword_1"])
    lbl_area_keyword_2.config(text=translate[language_code]["area_keyword_2"])
    lbl_area_keyword_3.config(text=translate[language_code]["area_keyword_3"])
    lbl_area_keyword_4.config(text=translate[language_code]["area_keyword_4"])
    lbl_pass_date_is_sold_out.config(text=translate[language_code]["pass_date_is_sold_out"])
    lbl_auto_reload_coming_soon_page.config(text=translate[language_code]["auto_reload_coming_soon_page"])
    lbl_presale_code.config(text=translate[language_code]["user_guess_string"])
    lbl_ocr_captcha.config(text=translate[language_code]["ocr_captcha"])
    lbl_ocr_captcha_with_submit.config(text=translate[language_code]["ocr_captcha_with_submit"])
    lbl_ocr_captcha_force_submit.config(text=translate[language_code]["ocr_captcha_force_submit"])

    chk_pass_1_seat_remaining.config(text=translate[language_code]["enable"])
    chk_auto_check_agree.config(text=translate[language_code]["enable"])
    chk_auto_press_next_step_button.config(text=translate[language_code]["enable"])
    chk_auto_fill_ticket_number.config(text=translate[language_code]["enable"])
    chk_auto_guess_options.config(text=translate[language_code]["enable"])
    chk_date_auto_select.config(text=translate[language_code]["enable"])
    chk_area_auto_select.config(text=translate[language_code]["enable"])
    chk_pass_date_is_sold_out.config(text=translate[language_code]["enable"])
    chk_auto_reload_coming_soon_page.config(text=translate[language_code]["enable"])
    chk_play_captcha_sound.config(text=translate[language_code]["enable"])
    chk_adblock_plus.config(text=translate[language_code]["enable"])
    chk_ocr_captcha.config(text=translate[language_code]["enable"])
    chk_ocr_captcha_with_sumit.config(text=translate[language_code]["enable"])
    chk_ocr_captcha_force_sumit.config(text=translate[language_code]["enable"])

    tabControl.tab(0, text=translate[language_code]["preference"])
    tabControl.tab(1, text=translate[language_code]["advanced"])
    tabControl.tab(2, text=translate[language_code]["about"])

    global lbl_facebook_account
    global lbl_kktix_account
    global lbl_play_captcha_sound
    global lbl_captcha_sound_filename
    lbl_facebook_account.config(text=translate[language_code]["facebook_account"])
    lbl_kktix_account.config(text=translate[language_code]["kktix_account"])
    lbl_play_captcha_sound.config(text=translate[language_code]["play_captcha_sound"])
    lbl_captcha_sound_filename.config(text=translate[language_code]["captcha_sound_filename"])

    lbl_slogan.config(text=translate[language_code]["maxbot_slogan"])
    lbl_help.config(text=translate[language_code]["help"])
    lbl_donate.config(text=translate[language_code]["donate"])
    lbl_release.config(text=translate[language_code]["release"])

    lbl_adblock_plus.config(text=translate[language_code]["adblock_plus_enable"])
    lbl_adblock_plus_memo.config(text=translate[language_code]["adblock_plus_memo"])
    lbl_adblock_plus_settings.config(text=translate[language_code]["adblock_plus_settings"])

    global btn_run
    global btn_save
    global btn_exit
    global btn_restore_defaults

    btn_run.config(text=translate[language_code]["run"])
    btn_save.config(text=translate[language_code]["save"])
    if btn_exit:
        btn_exit.config(text=translate[language_code]["exit"])
    btn_restore_defaults.config(text=translate[language_code]["restore_defaults"])

def callbackHomepageOnChange(event):
    showHideBlocks()

def callbackDateAutoOnChange():
    showHideTixcraftBlocks()

def showHideBlocks():
    global UI_PADDING_X

    global frame_group_kktix
    global frame_group_kktix_index
    global frame_group_tixcraft
    global frame_group_tixcraft_index

    global combo_homepage

    new_homepage = combo_homepage.get().strip()
    #print("new homepage value:", new_homepage)

    BLOCK_STYLE_TIXCRAFT = 0
    BLOCK_STYLE_KKTIX = 1
    STYLE_KKTIX_DOMAIN_LIST = ['kktix']

    show_block_index = BLOCK_STYLE_TIXCRAFT
    for domain_name in STYLE_KKTIX_DOMAIN_LIST:
        if domain_name in new_homepage:
            show_block_index = BLOCK_STYLE_KKTIX

    if show_block_index == BLOCK_STYLE_KKTIX:
        frame_group_kktix.grid(column=0, row=frame_group_kktix_index, padx=UI_PADDING_X)
        frame_group_tixcraft.grid_forget()

    else:
        frame_group_tixcraft.grid(column=0, row=frame_group_tixcraft_index, padx=UI_PADDING_X)
        frame_group_kktix.grid_forget()

    showHideTixcraftBlocks()
    showHidePass1SeatRemaining()
    showHideOcrCaptchaWithSubmit()

def showHideOcrCaptchaWithSubmit():
    global chk_state_ocr_captcha
    is_ocr_captcha_enable = bool(chk_state_ocr_captcha.get())

    global ocr_captcha_with_submit_index
    global lbl_ocr_captcha_with_submit
    global chk_ocr_captcha_with_sumit

    if is_ocr_captcha_enable:
        # show.
        lbl_ocr_captcha_with_submit.grid(column=0, row=ocr_captcha_with_submit_index, sticky = E)
        chk_ocr_captcha_with_sumit.grid(column=1, row=ocr_captcha_with_submit_index, sticky = W)
    else:
        # hide
        lbl_ocr_captcha_with_submit.grid_forget()
        chk_ocr_captcha_with_sumit.grid_forget()

    global chk_state_ocr_captcha_with_submit
    is_ocr_captcha_auto_submit_enable = bool(chk_state_ocr_captcha_with_submit.get())

    global ocr_captcha_force_submit_index
    global lbl_ocr_captcha_force_submit
    global chk_ocr_captcha_force_sumit

    if is_ocr_captcha_auto_submit_enable:
        # show.
        lbl_ocr_captcha_force_submit.grid(column=0, row=ocr_captcha_force_submit_index, sticky = E)
        chk_ocr_captcha_force_sumit.grid(column=1, row=ocr_captcha_force_submit_index, sticky = W)
    else:
        # hide
        lbl_ocr_captcha_force_submit.grid_forget()
        chk_ocr_captcha_force_sumit.grid_forget()

def showHidePass1SeatRemaining():
    global combo_ticket_number
    ticket_number_int = int(combo_ticket_number.get().strip())

    global pass_1_seat_remaining_index
    global lbl_pass_1_seat_remaining
    global chk_pass_1_seat_remaining

    if ticket_number_int > 1:
        # show.
        lbl_pass_1_seat_remaining.grid(column=0, row=pass_1_seat_remaining_index, sticky = E)
        chk_pass_1_seat_remaining.grid(column=1, row=pass_1_seat_remaining_index, sticky = W)
    else:
        # hide
        lbl_pass_1_seat_remaining.grid_forget()
        chk_pass_1_seat_remaining.grid_forget()

# purpose: show detail blocks if master field is enable.
def showHideTixcraftBlocks():
    # for tixcraft show/hide enable.
    # field 1
    global chk_state_date_auto_select

    global date_auto_select_mode_index
    global lbl_date_auto_select_mode
    global combo_date_auto_select_mode

    global date_keyword_index
    global lbl_date_keyword
    global txt_date_keyword

    # field 2
    global chk_area_auto_select

    global area_auto_select_index
    global lbl_area_auto_select_mode
    global combo_area_auto_select_mode

    global area_keyword_1_index
    global area_keyword_2_index
    global area_keyword_3_index
    global area_keyword_4_index

    global lbl_area_keyword_1
    global lbl_area_keyword_2
    global lbl_area_keyword_3
    global lbl_area_keyword_4

    global txt_area_keyword_1
    global txt_area_keyword_2
    global txt_area_keyword_3
    global txt_area_keyword_4

    is_date_set_to_enable = bool(chk_state_date_auto_select.get())
    is_area_set_to_enable = bool(chk_state_area_auto_select.get())
    #print("now is_date_set_to_enable value:", is_date_set_to_enable)
    #print("now is_area_set_to_enable value:", is_area_set_to_enable)

    if is_date_set_to_enable:
        # show
        lbl_date_auto_select_mode.grid(column=0, row=date_auto_select_mode_index, sticky = E)
        combo_date_auto_select_mode.grid(column=1, row=date_auto_select_mode_index, sticky = W)

        lbl_date_keyword.grid(column=0, row=date_keyword_index, sticky = E)
        txt_date_keyword.grid(column=1, row=date_keyword_index, sticky = W)
    else:
        # hide
        lbl_date_auto_select_mode.grid_forget()
        combo_date_auto_select_mode.grid_forget()

        lbl_date_keyword.grid_forget()
        txt_date_keyword.grid_forget()

    if is_area_set_to_enable:
        # show
        lbl_area_auto_select_mode.grid(column=0, row=area_auto_select_index, sticky = E)
        combo_area_auto_select_mode.grid(column=1, row=area_auto_select_index, sticky = W)

        lbl_area_keyword_1.grid(column=0, row=area_keyword_1_index, sticky = E)
        txt_area_keyword_1.grid(column=1, row=area_keyword_1_index, sticky = W)

        lbl_area_keyword_2.grid(column=0, row=area_keyword_2_index, sticky = E)
        txt_area_keyword_2.grid(column=1, row=area_keyword_2_index, sticky = W)

        lbl_area_keyword_3.grid(column=0, row=area_keyword_3_index, sticky = E)
        txt_area_keyword_3.grid(column=1, row=area_keyword_3_index, sticky = W)

        lbl_area_keyword_4.grid(column=0, row=area_keyword_4_index, sticky = E)
        txt_area_keyword_4.grid(column=1, row=area_keyword_4_index, sticky = W)
    else:
        # hide
        lbl_area_auto_select_mode.grid_forget()
        combo_area_auto_select_mode.grid_forget()

        lbl_area_keyword_1.grid_forget()
        txt_area_keyword_1.grid_forget()

        lbl_area_keyword_2.grid_forget()
        txt_area_keyword_2.grid_forget()

        lbl_area_keyword_3.grid_forget()
        txt_area_keyword_3.grid_forget()

        lbl_area_keyword_4.grid_forget()
        txt_area_keyword_4.grid_forget()


def PreferenctTab(root, config_dict, language_code, UI_PADDING_X):
    homepage = CONST_HOMEPAGE_DEFAULT
    ticket_number = 2
    pass_1_seat_remaining_enable = False
    auto_check_agree_enable = False

    auto_press_next_step_button = False
    auto_fill_ticket_number = False

    kktix_area_mode = ""
    kktix_area_keyword_1 = ""
    kktix_area_keyword_1_and = ""
    kktix_area_keyword_2 = ""
    kktix_area_keyword_2_and = ""
    # disable password brute force attack
    # PS: because of the question is always variable.
    #kktix_answer_dictionary = ""
    auto_guess_options = False
    user_guess_string = ""

    date_auto_select_enable = None
    date_auto_select_mode = ""
    date_keyword = ""

    area_auto_select_enable = None
    area_auto_select_mode = ""
    area_keyword_1 = ""
    area_keyword_2 = ""
    area_keyword_3 = ""
    area_keyword_4 = ""

    pass_date_is_sold_out_enable = False
    auto_reload_coming_soon_page_enable = True
    presale_code = ""

    debugMode = False

    # read config.
    homepage = config_dict["homepage"]
    browser = config_dict["browser"]
    language = config_dict["language"]
    debugMode = config_dict["debug"]

    # default ticket number
    # 說明：自動選擇的票數
    ticket_number = config_dict["ticket_number"]
    pass_1_seat_remaining_enable = config_dict["pass_1_seat_remaining"]
    auto_check_agree_enable = config_dict["auto_check_agree"]

    # for ["kktix"]
    auto_press_next_step_button = config_dict["kktix"]["auto_press_next_step_button"]
    auto_fill_ticket_number = config_dict["kktix"]["auto_fill_ticket_number"]
    kktix_area_mode = config_dict["kktix"]["area_mode"].strip()
    if not kktix_area_mode in CONST_SELECT_OPTIONS_ARRAY:
        kktix_area_mode = CONST_SELECT_ORDER_DEFAULT
    kktix_area_keyword_1 = config_dict["kktix"]["area_keyword_1"].strip()
    kktix_area_keyword_1_and = config_dict["kktix"]["area_keyword_1_and"].strip()
    kktix_area_keyword_2 = config_dict["kktix"]["area_keyword_2"].strip()
    kktix_area_keyword_2_and = config_dict["kktix"]["area_keyword_2_and"].strip()
    auto_guess_options = config_dict["kktix"]["auto_guess_options"]
    user_guess_string = config_dict["kktix"]["user_guess_string"].strip()

    # disable password brute force attack
    # PS: feature disabled.
    if 'answer_dictionary' in config_dict["kktix"]:
        kktix_answer_dictionary = config_dict["kktix"]["answer_dictionary"]
        if kktix_answer_dictionary is None:
            kktix_answer_dictionary = ""
        kktix_answer_dictionary = kktix_answer_dictionary.strip()

    # for ["tixcraft"]
    date_auto_select_enable = config_dict["tixcraft"]["date_auto_select"]["enable"]
    date_auto_select_mode = config_dict["tixcraft"]["date_auto_select"]["mode"]
    if not date_auto_select_mode in CONST_SELECT_OPTIONS_ARRAY:
        date_auto_select_mode = CONST_SELECT_ORDER_DEFAULT
    date_keyword = config_dict["tixcraft"]["date_auto_select"]["date_keyword"].strip()
    area_auto_select_enable = config_dict["tixcraft"]["area_auto_select"]["enable"]
    area_auto_select_mode = config_dict["tixcraft"]["area_auto_select"]["mode"]
    if not area_auto_select_mode in CONST_SELECT_OPTIONS_ARRAY:
        area_auto_select_mode = CONST_SELECT_ORDER_DEFAULT
    area_keyword_1 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_1"].strip()
    area_keyword_2 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_2"].strip()
    area_keyword_3 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_3"].strip()
    area_keyword_4 = config_dict["tixcraft"]["area_auto_select"]["area_keyword_4"].strip()
    pass_date_is_sold_out_enable = config_dict["tixcraft"]["pass_date_is_sold_out"]
    auto_reload_coming_soon_page_enable = config_dict["tixcraft"]["auto_reload_coming_soon_page"]
    presale_code = config_dict["tixcraft"]["presale_code"].strip()

    # output config:
    print("setting app version", CONST_APP_VERSION)
    print("python version", platform.python_version())
    print("platform", platform.platform())
    print("homepage", homepage)
    print("ticket_number", ticket_number)
    print("pass_1_seat_remaining", pass_1_seat_remaining_enable)
    print("auto_check_agree", auto_check_agree_enable)

    # for kktix
    print("==[kktix]==")
    print("auto_press_next_step_button", auto_press_next_step_button)
    print("auto_fill_ticket_number", auto_fill_ticket_number)
    print("kktix_area_mode", kktix_area_mode)
    print("kktix_area_keyword_1", kktix_area_keyword_1)
    print("kktix_area_keyword_1_and", kktix_area_keyword_1_and)
    # disable password brute force attack
    #print("kktix_answer_dictionary", kktix_answer_dictionary)
    print("auto_guess_options", auto_guess_options)
    print("user_guess_string", user_guess_string)

    # for tixcraft
    print("==[tixcraft]==")
    print("date_auto_select_enable", date_auto_select_enable)
    print("date_auto_select_mode", date_auto_select_mode)
    print("date_keyword", date_keyword)

    print("area_auto_select_enable", area_auto_select_enable)
    print("area_auto_select_mode", area_auto_select_mode)
    print("area_keyword_1", area_keyword_1)
    print("area_keyword_2", area_keyword_2)
    print("area_keyword_3", area_keyword_3)
    print("area_keyword_4", area_keyword_4)

    print("pass_date_is_sold_out", pass_date_is_sold_out_enable)

    print("auto_reload_coming_soon_page", auto_reload_coming_soon_page_enable)
    print("presale_code", presale_code)

    print("debug Mode", debugMode)

    global lbl_homepage
    global lbl_ticket_number

    global lbl_kktix
    global lbl_tixcraft

    row_count = 0

    frame_group_header = Frame(root)
    group_row_count = 0

    # first row need padding Y
    lbl_homepage = Label(frame_group_header, text=translate[language_code]['homepage'])
    lbl_homepage.grid(column=0, row=group_row_count, sticky = E)

    global combo_homepage
    combo_homepage = ttk.Combobox(frame_group_header, state="readonly")
    combo_homepage['values']= ("https://kktix.com","https://tixcraft.com","https://www.indievox.com/","https://www.famiticket.com.tw","http://www.urbtix.hk/","https://www.cityline.com/","https://ticket.ibon.com.tw/")
    combo_homepage.set(homepage)
    combo_homepage.bind("<<ComboboxSelected>>", callbackHomepageOnChange)
    combo_homepage.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    lbl_ticket_number = Label(frame_group_header, text=translate[language_code]['ticket_number'])
    lbl_ticket_number.grid(column=0, row=group_row_count, sticky = E)

    global combo_ticket_number
    # for text format.
    # PS: some user keyin wrong type. @_@;
    '''
    global combo_ticket_number_value
    combo_ticket_number_value = StringVar(frame_group_header, value=ticket_number)
    combo_ticket_number = Entry(frame_group_header, width=20, textvariable = combo_ticket_number_value)
    combo_ticket_number.grid(column=1, row=group_row_count, sticky = W)
    '''
    combo_ticket_number = ttk.Combobox(frame_group_header, state="readonly")
    combo_ticket_number['values']= ("1","2","3","4","5","6","7","8","9","10","11","12")
    #combo_ticket_number.current(0)
    combo_ticket_number.set(str(ticket_number))
    combo_ticket_number.bind("<<ComboboxSelected>>", callbackTicketNumberOnChange)
    combo_ticket_number.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    global pass_1_seat_remaining_index
    pass_1_seat_remaining_index = group_row_count

    global lbl_pass_1_seat_remaining
    lbl_pass_1_seat_remaining = Label(frame_group_header, text=translate[language_code]['pass_1_seat_remaining'])
    lbl_pass_1_seat_remaining.grid(column=0, row=group_row_count, sticky = E)

    global chk_state_pass_1_seat_remaining
    chk_state_pass_1_seat_remaining = BooleanVar()
    chk_state_pass_1_seat_remaining.set(pass_1_seat_remaining_enable)

    global chk_pass_1_seat_remaining
    chk_pass_1_seat_remaining = Checkbutton(frame_group_header, text=translate[language_code]['enable'], variable=chk_state_pass_1_seat_remaining)
    chk_pass_1_seat_remaining.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    global lbl_auto_check_agree
    lbl_auto_check_agree = Label(frame_group_header, text=translate[language_code]['auto_check_agree'])
    lbl_auto_check_agree.grid(column=0, row=group_row_count, sticky = E)

    global chk_state_auto_check_agree
    chk_state_auto_check_agree = BooleanVar()
    chk_state_auto_check_agree.set(auto_check_agree_enable)

    global chk_auto_check_agree
    chk_auto_check_agree = Checkbutton(frame_group_header, text=translate[language_code]['enable'], variable=chk_state_auto_check_agree)
    chk_auto_check_agree.grid(column=1, row=group_row_count, sticky = W)

    frame_group_header.grid(column=0, row=row_count, sticky = W, padx=UI_PADDING_X)

    row_count+=1

    # for sub group KKTix.
    global frame_group_kktix
    frame_group_kktix = Frame(root)
    group_row_count = 0

    # start sub group...
    group_row_count+=1

    global lbl_auto_press_next_step_button
    lbl_auto_press_next_step_button = Label(frame_group_kktix, text=translate[language_code]['auto_press_next_step_button'])
    lbl_auto_press_next_step_button.grid(column=0, row=group_row_count, sticky = E)

    global chk_state_auto_press_next_step_button
    chk_state_auto_press_next_step_button = BooleanVar()
    chk_state_auto_press_next_step_button.set(auto_press_next_step_button)

    global chk_auto_press_next_step_button
    chk_auto_press_next_step_button = Checkbutton(frame_group_kktix, text=translate[language_code]['enable'], variable=chk_state_auto_press_next_step_button)
    chk_auto_press_next_step_button.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    global lbl_auto_fill_ticket_number
    lbl_auto_fill_ticket_number = Label(frame_group_kktix, text=translate[language_code]['auto_fill_ticket_number'])
    lbl_auto_fill_ticket_number.grid(column=0, row=group_row_count, sticky = E)

    global chk_state_auto_fill_ticket_number
    chk_state_auto_fill_ticket_number = BooleanVar()
    chk_state_auto_fill_ticket_number.set(auto_fill_ticket_number)

    global chk_auto_fill_ticket_number
    chk_auto_fill_ticket_number = Checkbutton(frame_group_kktix, text=translate[language_code]['enable'], variable=chk_state_auto_fill_ticket_number)
    chk_auto_fill_ticket_number.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    global lbl_kktix_area_mode
    lbl_kktix_area_mode = Label(frame_group_kktix, text=translate[language_code]['area_select_order'])
    lbl_kktix_area_mode.grid(column=0, row=group_row_count, sticky = E)

    global combo_kktix_area_mode
    global combo_kktix_area_mode_index
    combo_kktix_area_mode_index = group_row_count
    combo_kktix_area_mode = ttk.Combobox(frame_group_kktix, state="readonly")
    combo_kktix_area_mode['values']= CONST_SELECT_OPTIONS_DEFAULT
    combo_kktix_area_mode.set(kktix_area_mode)
    combo_kktix_area_mode.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    global lbl_kktix_area_keyword_1
    lbl_kktix_area_keyword_1 = Label(frame_group_kktix, text=translate[language_code]['area_keyword_1'])
    lbl_kktix_area_keyword_1.grid(column=0, row=group_row_count, sticky = E)

    global txt_kktix_area_keyword_1
    txt_kktix_area_keyword_1_value = StringVar(frame_group_kktix, value=kktix_area_keyword_1)
    txt_kktix_area_keyword_1 = Entry(frame_group_kktix, width=20, textvariable = txt_kktix_area_keyword_1_value)
    txt_kktix_area_keyword_1.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    lbl_kktix_area_keyword_1_and_label = Label(frame_group_kktix, text="")
    lbl_kktix_area_keyword_1_and_label.grid(column=0, row=group_row_count, sticky = E)

    global lbl_kktix_area_keyword_1_and_text
    lbl_kktix_area_keyword_1_and_text = Label(frame_group_kktix, text=translate[language_code]['and'])
    lbl_kktix_area_keyword_1_and_text.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    lbl_kktix_area_keyword_1_tmp = Label(frame_group_kktix, text="")
    lbl_kktix_area_keyword_1_tmp.grid(column=0, row=group_row_count, sticky = E)

    global txt_kktix_area_keyword_1_and
    txt_kktix_area_keyword_1_and_value = StringVar(frame_group_kktix, value=kktix_area_keyword_1_and)
    txt_kktix_area_keyword_1_and = Entry(frame_group_kktix, width=20, textvariable = txt_kktix_area_keyword_1_and_value)
    txt_kktix_area_keyword_1_and.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    global lbl_kktix_area_keyword_2
    lbl_kktix_area_keyword_2 = Label(frame_group_kktix, text=translate[language_code]['area_keyword_2'])
    lbl_kktix_area_keyword_2.grid(column=0, row=group_row_count, sticky = E)

    global txt_kktix_area_keyword_2
    txt_kktix_area_keyword_2_value = StringVar(frame_group_kktix, value=kktix_area_keyword_2)
    txt_kktix_area_keyword_2 = Entry(frame_group_kktix, width=20, textvariable = txt_kktix_area_keyword_2_value)
    txt_kktix_area_keyword_2.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    lbl_kktix_area_keyword_2_and_label = Label(frame_group_kktix, text="")
    lbl_kktix_area_keyword_2_and_label.grid(column=0, row=group_row_count, sticky = E)

    global lbl_kktix_area_keyword_2_and_text
    lbl_kktix_area_keyword_2_and_text = Label(frame_group_kktix, text=translate[language_code]['and'])
    lbl_kktix_area_keyword_2_and_text.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    lbl_kktix_area_keyword_2_tmp = Label(frame_group_kktix, text="")
    lbl_kktix_area_keyword_2_tmp.grid(column=0, row=group_row_count, sticky = E)

    global txt_kktix_area_keyword_2_and
    txt_kktix_area_keyword_2_and_value = StringVar(frame_group_kktix, value=kktix_area_keyword_2_and)
    txt_kktix_area_keyword_2_and = Entry(frame_group_kktix, width=20, textvariable = txt_kktix_area_keyword_2_and_value)
    txt_kktix_area_keyword_2_and.grid(column=1, row=group_row_count, sticky = W)

    #group_row_count+=1

    # disable password brute force attack
    global lbl_kktix_answer_dictionary
    #lbl_kktix_answer_dictionary = Label(frame_group_kktix, text="Answer Dictionary")
    #lbl_kktix_answer_dictionary.grid(column=0, row=group_row_count, sticky = E)

    global txt_kktix_answer_dictionary
    global txt_kktix_answer_dictionary_index
    txt_kktix_answer_dictionary_index = group_row_count
    #txt_kktix_answer_dictionary_value = StringVar(frame_group_kktix, value=kktix_answer_dictionary)
    #txt_kktix_answer_dictionary = Entry(frame_group_kktix, width=20, textvariable = txt_kktix_answer_dictionary_value)
    #txt_kktix_answer_dictionary.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    global lbl_auto_guess_options
    lbl_auto_guess_options = Label(frame_group_kktix, text=translate[language_code]['auto_guess_options'])
    lbl_auto_guess_options.grid(column=0, row=group_row_count, sticky = E)

    global chk_state_auto_guess_options
    chk_state_auto_guess_options = BooleanVar()
    chk_state_auto_guess_options.set(auto_guess_options)

    global chk_auto_guess_options
    chk_auto_guess_options = Checkbutton(frame_group_kktix, text=translate[language_code]['enable'], variable=chk_state_auto_guess_options)
    chk_auto_guess_options.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    global lbl_user_guess_string
    lbl_user_guess_string = Label(frame_group_kktix, text=translate[language_code]['user_guess_string'])
    lbl_user_guess_string.grid(column=0, row=group_row_count, sticky = E)

    global txt_kktix_user_guess_string
    txt_kktix_user_guess_string_value = StringVar(frame_group_kktix, value=user_guess_string)
    txt_kktix_user_guess_string = Entry(frame_group_kktix, width=20, textvariable = txt_kktix_user_guess_string_value)
    txt_kktix_user_guess_string.grid(column=1, row=group_row_count, sticky = W)


    global frame_group_kktix_index
    frame_group_kktix_index = row_count
    #PS: don't need show when onload(), because show/hide block will load again.
    #frame_group_kktix.grid(column=0, row=row_count, sticky = W, padx=UI_PADDING_X)

    row_count+=1

    # for sub group tixcraft.
    global frame_group_tixcraft
    frame_group_tixcraft = Frame(root)
    group_row_count = 0

    # start sub group.
    group_row_count+=1

    global lbl_date_auto_select
    lbl_date_auto_select = Label(frame_group_tixcraft, text=translate[language_code]['date_auto_select'])
    lbl_date_auto_select.grid(column=0, row=group_row_count, sticky = E)

    global chk_state_date_auto_select
    chk_state_date_auto_select = BooleanVar()
    chk_state_date_auto_select.set(date_auto_select_enable)

    global chk_date_auto_select
    chk_date_auto_select = Checkbutton(frame_group_tixcraft, text=translate[language_code]['enable'], variable=chk_state_date_auto_select, command=callbackDateAutoOnChange)
    chk_date_auto_select.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    global date_auto_select_mode_index
    date_auto_select_mode_index = group_row_count

    global lbl_date_auto_select_mode
    lbl_date_auto_select_mode = Label(frame_group_tixcraft, text=translate[language_code]['date_select_order'])
    lbl_date_auto_select_mode.grid(column=0, row=date_auto_select_mode_index, sticky = E)

    global combo_date_auto_select_mode
    combo_date_auto_select_mode = ttk.Combobox(frame_group_tixcraft, state="readonly")
    combo_date_auto_select_mode['values']= (CONST_FROM_TOP_TO_BOTTOM, CONST_FROM_BOTTOM_TO_TOP)
    combo_date_auto_select_mode.set(date_auto_select_mode)
    combo_date_auto_select_mode.grid(column=1, row=date_auto_select_mode_index, sticky = W)

    group_row_count+=1

    global date_keyword_index
    date_keyword_index = group_row_count

    global lbl_date_keyword
    lbl_date_keyword = Label(frame_group_tixcraft, text=translate[language_code]['date_keyword'])
    lbl_date_keyword.grid(column=0, row=date_keyword_index, sticky = E)

    global txt_date_keyword
    txt_date_keyword_value = StringVar(frame_group_tixcraft, value=date_keyword)
    txt_date_keyword = Entry(frame_group_tixcraft, width=20, textvariable = txt_date_keyword_value)
    txt_date_keyword.grid(column=1, row=date_keyword_index, sticky = W)

    group_row_count+=1

    global lbl_pass_date_is_sold_out
    lbl_pass_date_is_sold_out = Label(frame_group_tixcraft, text=translate[language_code]['pass_date_is_sold_out'])
    lbl_pass_date_is_sold_out.grid(column=0, row=group_row_count, sticky = E)

    global chk_state_pass_date_is_sold_out
    chk_state_pass_date_is_sold_out = BooleanVar()
    chk_state_pass_date_is_sold_out.set(pass_date_is_sold_out_enable)

    global chk_pass_date_is_sold_out
    chk_pass_date_is_sold_out = Checkbutton(frame_group_tixcraft, text=translate[language_code]['enable'], variable=chk_state_pass_date_is_sold_out)
    chk_pass_date_is_sold_out.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    global lbl_auto_reload_coming_soon_page
    lbl_auto_reload_coming_soon_page = Label(frame_group_tixcraft, text=translate[language_code]['auto_reload_coming_soon_page'])
    lbl_auto_reload_coming_soon_page.grid(column=0, row=group_row_count, sticky = E)

    global chk_state_auto_reload_coming_soon_page
    chk_state_auto_reload_coming_soon_page = BooleanVar()
    chk_state_auto_reload_coming_soon_page.set(auto_reload_coming_soon_page_enable)

    global chk_auto_reload_coming_soon_page
    chk_auto_reload_coming_soon_page = Checkbutton(frame_group_tixcraft, text=translate[language_code]['enable'], variable=chk_state_auto_reload_coming_soon_page)
    chk_auto_reload_coming_soon_page.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    global lbl_date_hr
    lbl_date_hr = Label(frame_group_tixcraft, text='')
    lbl_date_hr.grid(column=0, row=group_row_count, sticky = E, columnspan=2)

    group_row_count+=1

    global lbl_area_auto_select
    lbl_area_auto_select = Label(frame_group_tixcraft, text=translate[language_code]['area_auto_select'])
    lbl_area_auto_select.grid(column=0, row=group_row_count, sticky = E)

    global chk_state_area_auto_select
    chk_state_area_auto_select = BooleanVar()
    chk_state_area_auto_select.set(area_auto_select_enable)

    global chk_area_auto_select
    chk_area_auto_select = Checkbutton(frame_group_tixcraft, text=translate[language_code]['enable'], variable=chk_state_area_auto_select, command=callbackDateAutoOnChange)
    chk_area_auto_select.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    global area_auto_select_index
    area_auto_select_index = group_row_count

    global lbl_area_auto_select_mode
    lbl_area_auto_select_mode = Label(frame_group_tixcraft, text=translate[language_code]['area_auto_select'])
    lbl_area_auto_select_mode.grid(column=0, row=area_auto_select_index, sticky = E)

    global combo_area_auto_select_mode
    combo_area_auto_select_mode = ttk.Combobox(frame_group_tixcraft, state="readonly")
    combo_area_auto_select_mode['values']= CONST_SELECT_OPTIONS_DEFAULT
    combo_area_auto_select_mode.set(area_auto_select_mode)
    combo_area_auto_select_mode.grid(column=1, row=area_auto_select_index, sticky = W)

    group_row_count+=1

    global area_keyword_1_index
    area_keyword_1_index = group_row_count

    global lbl_area_keyword_1
    lbl_area_keyword_1 = Label(frame_group_tixcraft, text=translate[language_code]['area_keyword_1'])
    lbl_area_keyword_1.grid(column=0, row=area_keyword_1_index, sticky = E)

    global txt_area_keyword_1
    txt_area_keyword_1_value = StringVar(frame_group_tixcraft, value=area_keyword_1)
    txt_area_keyword_1 = Entry(frame_group_tixcraft, width=20, textvariable = txt_area_keyword_1_value)
    txt_area_keyword_1.grid(column=1, row=area_keyword_1_index, sticky = W)

    group_row_count+=1

    global area_keyword_2_index
    area_keyword_2_index = group_row_count

    global lbl_area_keyword_2
    lbl_area_keyword_2 = Label(frame_group_tixcraft, text=translate[language_code]['area_keyword_2'])
    lbl_area_keyword_2.grid(column=0, row=area_keyword_2_index, sticky = E)

    global txt_area_keyword_2
    txt_area_keyword_2_value = StringVar(frame_group_tixcraft, value=area_keyword_2)
    txt_area_keyword_2 = Entry(frame_group_tixcraft, width=20, textvariable = txt_area_keyword_2_value)
    txt_area_keyword_2.grid(column=1, row=area_keyword_2_index, sticky = W)

    group_row_count+=1

    global area_keyword_3_index
    area_keyword_3_index = group_row_count

    global lbl_area_keyword_3
    lbl_area_keyword_3 = Label(frame_group_tixcraft, text=translate[language_code]['area_keyword_3'])
    lbl_area_keyword_3.grid(column=0, row=area_keyword_3_index, sticky = E)

    global txt_area_keyword_3
    txt_area_keyword_3_value = StringVar(frame_group_tixcraft, value=area_keyword_3)
    txt_area_keyword_3 = Entry(frame_group_tixcraft, width=20, textvariable = txt_area_keyword_3_value)
    txt_area_keyword_3.grid(column=1, row=area_keyword_3_index, sticky = W)

    group_row_count+=1

    global area_keyword_4_index
    area_keyword_4_index = group_row_count

    global lbl_area_keyword_4
    lbl_area_keyword_4 = Label(frame_group_tixcraft, text=translate[language_code]['area_keyword_4'])
    lbl_area_keyword_4.grid(column=0, row=area_keyword_4_index, sticky = E)

    global txt_area_keyword_4
    txt_area_keyword_4_value = StringVar(frame_group_tixcraft, value=area_keyword_4)
    txt_area_keyword_4 = Entry(frame_group_tixcraft, width=20, textvariable = txt_area_keyword_4_value)
    txt_area_keyword_4.grid(column=1, row=area_keyword_4_index, sticky = W)

    group_row_count+=1

    global lbl_presale_code
    lbl_presale_code = Label(frame_group_tixcraft, text=translate[language_code]['user_guess_string'])
    lbl_presale_code.grid(column=0, row=group_row_count, sticky = E)

    global txt_presale_code
    txt_presale_code_value = StringVar(frame_group_tixcraft, value=presale_code)
    txt_presale_code = Entry(frame_group_tixcraft, width=20, textvariable = txt_presale_code_value)
    txt_presale_code.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    global lbl_ocr_captcha
    lbl_ocr_captcha = Label(frame_group_tixcraft, text=translate[language_code]['ocr_captcha'])
    lbl_ocr_captcha.grid(column=0, row=group_row_count, sticky = E)

    global chk_state_ocr_captcha
    chk_state_ocr_captcha = BooleanVar()
    chk_state_ocr_captcha.set(config_dict['ocr_captcha']["enable"])

    global chk_ocr_captcha
    chk_ocr_captcha = Checkbutton(frame_group_tixcraft, text=translate[language_code]['enable'], variable=chk_state_ocr_captcha, command=showHideOcrCaptchaWithSubmit)
    chk_ocr_captcha.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    global ocr_captcha_with_submit_index
    ocr_captcha_with_submit_index = group_row_count

    global lbl_ocr_captcha_with_submit
    lbl_ocr_captcha_with_submit = Label(frame_group_tixcraft, text=translate[language_code]['ocr_captcha_with_submit'])
    lbl_ocr_captcha_with_submit.grid(column=0, row=ocr_captcha_with_submit_index, sticky = E)

    global chk_state_ocr_captcha_with_submit
    chk_state_ocr_captcha_with_submit = BooleanVar()
    chk_state_ocr_captcha_with_submit.set(config_dict['ocr_captcha']["auto_submit"])

    global chk_ocr_captcha_with_sumit
    chk_ocr_captcha_with_sumit = Checkbutton(frame_group_tixcraft, text=translate[language_code]['enable'], variable=chk_state_ocr_captcha_with_submit, command=showHideOcrCaptchaWithSubmit)
    chk_ocr_captcha_with_sumit.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    global ocr_captcha_force_submit_index
    ocr_captcha_force_submit_index = group_row_count

    global lbl_ocr_captcha_force_submit
    lbl_ocr_captcha_force_submit = Label(frame_group_tixcraft, text=translate[language_code]['ocr_captcha_force_submit'])
    lbl_ocr_captcha_force_submit.grid(column=0, row=ocr_captcha_force_submit_index, sticky = E)

    global chk_state_ocr_captcha_force_submit
    chk_state_ocr_captcha_force_submit = BooleanVar()
    chk_state_ocr_captcha_force_submit.set(config_dict['ocr_captcha']["force_submit"])

    global chk_ocr_captcha_force_sumit
    chk_ocr_captcha_force_sumit = Checkbutton(frame_group_tixcraft, text=translate[language_code]['enable'], variable=chk_state_ocr_captcha_force_submit)
    chk_ocr_captcha_force_sumit.grid(column=1, row=group_row_count, sticky = W)

    # final flush.
    global frame_group_tixcraft_index
    frame_group_tixcraft_index = row_count
    #PS: don't need show when onload(), because show/hide block will load again.
    #frame_group_tixcraft.grid(column=0, row=row_count, sticky = W, padx=UI_PADDING_X)

    showHideBlocks()

def AdvancedTab(root, config_dict, language_code, UI_PADDING_X):
    row_count = 0

    frame_group_header = Frame(root)
    group_row_count = 0

    facebook_account = ""
    kktix_account = ""
    play_captcha_sound = False
    captcha_sound_filename = CONST_CAPTCHA_SOUND_FILENAME_DEFAULT
    adblock_plus_enable = False

    if 'advanced' in config_dict:
        facebook_account = config_dict["advanced"]["facebook_account"].strip()
        kktix_account = config_dict["advanced"]["kktix_account"].strip()
        if 'play_captcha_sound' in config_dict["advanced"]:
            if 'enable' in config_dict["advanced"]["play_captcha_sound"]:
                play_captcha_sound = config_dict["advanced"]["play_captcha_sound"]["enable"]
            if 'filename' in config_dict["advanced"]["play_captcha_sound"]:
                captcha_sound_filename = config_dict["advanced"]["play_captcha_sound"]["filename"].strip()
        if 'adblock_plus_enable' in config_dict["advanced"]:
            adblock_plus_enable = config_dict["advanced"]["adblock_plus_enable"]

    # for kktix
    print("==[advanced]==")
    print("browser", config_dict['browser'])
    print("language", config_dict['language'])
    print("facebook_account", facebook_account)
    print("kktix_account", kktix_account)
    print("play_captcha_sound", play_captcha_sound)
    print("captcha_sound_filename", captcha_sound_filename)
    print("adblock_plus_enable", adblock_plus_enable)

    # assign default value.
    if captcha_sound_filename is None:
        captcha_sound_filename = ""
    if len(captcha_sound_filename)==0:
        captcha_sound_filename = captcha_sound_filename_default


    global lbl_browser
    lbl_browser = Label(frame_group_header, text=translate[language_code]['browser'])
    lbl_browser.grid(column=0, row=group_row_count, sticky = E)

    global combo_browser
    combo_browser = ttk.Combobox(frame_group_header, state="readonly")
    combo_browser['values']= ("chrome","firefox")
    #combo_browser.current(0)
    combo_browser.set(config_dict['browser'])
    combo_browser.grid(column=1, row=group_row_count, sticky = W)

    group_row_count+=1

    global lbl_language
    lbl_language = Label(frame_group_header, text=translate[language_code]['language'])
    lbl_language.grid(column=0, row=group_row_count, sticky = E)

    global combo_language
    combo_language = ttk.Combobox(frame_group_header, state="readonly")
    combo_language['values']= ("English","繁體中文","簡体中文","日本語")
    #combo_language.current(0)
    combo_language.set(config_dict['language'])
    combo_language.bind("<<ComboboxSelected>>", callbackLanguageOnChange)
    combo_language.grid(column=1, row=group_row_count, sticky = W)

    group_row_count +=1

    global lbl_facebook_account
    lbl_facebook_account = Label(frame_group_header, text=translate[language_code]['facebook_account'])
    lbl_facebook_account.grid(column=0, row=group_row_count, sticky = E)

    global txt_facebook_account
    txt_facebook_account_value = StringVar(frame_group_header, value=facebook_account)
    txt_facebook_account = Entry(frame_group_header, width=20, textvariable = txt_facebook_account_value)
    txt_facebook_account.grid(column=1, row=group_row_count, sticky = W)

    group_row_count +=1

    global lbl_kktix_account
    lbl_kktix_account = Label(frame_group_header, text=translate[language_code]['kktix_account'])
    lbl_kktix_account.grid(column=0, row=group_row_count, sticky = E)

    global txt_kktix_account
    txt_kktix_account_value = StringVar(frame_group_header, value=kktix_account)
    txt_kktix_account = Entry(frame_group_header, width=20, textvariable = txt_kktix_account_value)
    txt_kktix_account.grid(column=1, row=group_row_count, sticky = W)

    group_row_count +=1

    global lbl_play_captcha_sound
    lbl_play_captcha_sound = Label(frame_group_header, text=translate[language_code]['play_captcha_sound'])
    lbl_play_captcha_sound.grid(column=0, row=group_row_count, sticky = E)

    global chk_state_play_captcha_sound
    chk_state_play_captcha_sound = BooleanVar()
    chk_state_play_captcha_sound.set(play_captcha_sound)

    global chk_play_captcha_sound
    chk_play_captcha_sound = Checkbutton(frame_group_header, text=translate[language_code]['enable'], variable=chk_state_play_captcha_sound)
    chk_play_captcha_sound.grid(column=1, row=group_row_count, sticky = W)

    group_row_count +=1

    global lbl_captcha_sound_filename
    lbl_captcha_sound_filename = Label(frame_group_header, text=translate[language_code]['captcha_sound_filename'])
    lbl_captcha_sound_filename.grid(column=0, row=group_row_count, sticky = E)

    #print("captcha_sound_filename:", captcha_sound_filename)
    global txt_captcha_sound_filename
    txt_captcha_sound_filename_value = StringVar(frame_group_header, value=captcha_sound_filename)
    txt_captcha_sound_filename = Entry(frame_group_header, width=20, textvariable = txt_captcha_sound_filename_value)
    txt_captcha_sound_filename.grid(column=1, row=group_row_count, sticky = W)

    icon_play_filename = "icon_play_1.gif"
    icon_play_img = PhotoImage(file=icon_play_filename)

    lbl_icon_play = Label(frame_group_header, image=icon_play_img, cursor="hand2")
    lbl_icon_play.image = icon_play_img
    lbl_icon_play.grid(column=3, row=group_row_count)
    lbl_icon_play.bind("<Button-1>", lambda e: btn_preview_sound_clicked())

    group_row_count +=1

    global lbl_adblock_plus
    lbl_adblock_plus = Label(frame_group_header, text=translate[language_code]['adblock_plus_enable'])
    lbl_adblock_plus.grid(column=0, row=group_row_count, sticky = E)

    global chk_state_adblock_plus
    chk_state_adblock_plus = BooleanVar()
    chk_state_adblock_plus.set(adblock_plus_enable)

    global chk_adblock_plus
    chk_adblock_plus = Checkbutton(frame_group_header, text=translate[language_code]['enable'], variable=chk_state_adblock_plus)
    chk_adblock_plus.grid(column=1, row=group_row_count, sticky = W)

    group_row_count +=1

    lbl_adblock_plus_ps = Label(frame_group_header, text='')
    lbl_adblock_plus_ps.grid(column=0, row=group_row_count, sticky = E)

    global lbl_adblock_plus_memo
    lbl_adblock_plus_memo = Label(frame_group_header, text=translate[language_code]['adblock_plus_memo'])
    lbl_adblock_plus_memo.grid(column=1, row=group_row_count, sticky = W)

    group_row_count +=1

    global lbl_adblock_plus_settings
    lbl_adblock_plus_settings = Label(frame_group_header, text=translate[language_code]['adblock_plus_settings'])
    lbl_adblock_plus_settings.grid(column=0, row=group_row_count, sticky = E+N)

    txt_adblock_plus_settings = Text(frame_group_header, width=20, height=5)
    txt_adblock_plus_settings.grid(column=1, row=group_row_count, sticky = W)
    txt_adblock_plus_settings.insert("1.0", CONST_ADBLOCK_PLUS_ADVANCED_FILTER_DEFAULT)

    icon_copy_filename = "icon_copy_2.gif"
    icon_copy_img = PhotoImage(file=icon_copy_filename)

    lbl_icon_copy = Label(frame_group_header, image=icon_copy_img, cursor="hand2")
    lbl_icon_copy.image = icon_copy_img
    lbl_icon_copy.grid(column=3, row=group_row_count, sticky = W+N)
    lbl_icon_copy.bind("<Button-1>", lambda e: btn_copy_clicked())

    frame_group_header.grid(column=0, row=row_count, padx=UI_PADDING_X)


def AboutTab(root, language_code):
    row_count = 0

    frame_group_header = Frame(root)
    group_row_count = 0

    logo_filename = "maxbot_logo2_single.ppm"
    logo_img = PhotoImage(file=logo_filename)

    lbl_logo = Label(frame_group_header, image=logo_img)
    lbl_logo.image = logo_img
    lbl_logo.grid(column=0, row=group_row_count, columnspan=2)

    group_row_count +=1

    global lbl_slogan
    global lbl_help
    global lbl_donate
    global lbl_release

    lbl_slogan = Label(frame_group_header, text=translate[language_code]['maxbot_slogan'], wraplength=400, justify="center")
    lbl_slogan.grid(column=0, row=group_row_count, columnspan=2)

    group_row_count +=1

    lbl_help = Label(frame_group_header, text=translate[language_code]['help'])
    lbl_help.grid(column=0, row=group_row_count, sticky = E)

    lbl_help_url = Label(frame_group_header, text=URL_HELP, fg="blue", cursor="hand2")
    lbl_help_url.grid(column=1, row=group_row_count, sticky = W)
    lbl_help_url.bind("<Button-1>", lambda e: open_url(URL_HELP))

    group_row_count +=1

    lbl_donate = Label(frame_group_header, text=translate[language_code]['donate'])
    lbl_donate.grid(column=0, row=group_row_count, sticky = E)

    lbl_donate_url = Label(frame_group_header, text=URL_DONATE, fg="blue", cursor="hand2")
    lbl_donate_url.grid(column=1, row=group_row_count, sticky = W)
    lbl_donate_url.bind("<Button-1>", lambda e: open_url(URL_DONATE))

    group_row_count +=1

    lbl_release = Label(frame_group_header, text=translate[language_code]['release'])
    lbl_release.grid(column=0, row=group_row_count, sticky = E)

    lbl_release_url = Label(frame_group_header, text=URL_RELEASE, fg="blue", cursor="hand2")
    lbl_release_url.grid(column=1, row=group_row_count, sticky = W)
    lbl_release_url.bind("<Button-1>", lambda e: open_url(URL_RELEASE))

    group_row_count +=1

    lbl_fb_fans = Label(frame_group_header, text=u'Facebook')
    lbl_fb_fans.grid(column=0, row=group_row_count, sticky = E)

    lbl_fb_fans_url = Label(frame_group_header, text=URL_FB, fg="blue", cursor="hand2")
    lbl_fb_fans_url.grid(column=1, row=group_row_count, sticky = W)
    lbl_fb_fans_url.bind("<Button-1>", lambda e: open_url(URL_FB))

    frame_group_header.grid(column=0, row=row_count)

def get_action_bar(root, language_code):
    frame_action = Frame(root)

    global btn_run
    global btn_save
    global btn_exit
    global btn_restore_defaults

    btn_run = ttk.Button(frame_action, text=translate[language_code]['run'], command= lambda: btn_run_clicked(language_code))
    btn_run.grid(column=0, row=0)

    btn_save = ttk.Button(frame_action, text=translate[language_code]['save'], command= lambda: btn_save_clicked(language_code) )
    btn_save.grid(column=1, row=0)

    btn_exit = ttk.Button(frame_action, text=translate[language_code]['exit'], command=btn_exit_clicked)
    #btn_exit.grid(column=2, row=0)

    btn_restore_defaults = ttk.Button(frame_action, text=translate[language_code]['restore_defaults'], command= lambda: btn_restore_defaults_clicked(language_code))
    btn_restore_defaults.grid(column=2, row=0)

    return frame_action

def clearFrame(frame):
    # destroy all widgets from frame
    for widget in frame.winfo_children():
       widget.destroy()

def load_GUI(root, config_dict):
    clearFrame(root)

    language_code="en_us"
    if not config_dict is None:
        if u'language' in config_dict:
            language_code = get_language_code_by_name(config_dict["language"])

    row_count = 0

    global tabControl
    tabControl = ttk.Notebook(root)
    tab1 = Frame(tabControl)
    tabControl.add(tab1, text=translate[language_code]['preference'])
    tab2 = Frame(tabControl)
    tabControl.add(tab2, text=translate[language_code]['advanced'])
    tab3 = Frame(tabControl)
    tabControl.add(tab3, text=translate[language_code]['about'])
    tabControl.grid(column=0, row=row_count)
    tabControl.select(tab1)

    row_count+=1

    frame_action = get_action_bar(root, language_code)
    frame_action.grid(column=0, row=row_count)

    global UI_PADDING_X
    PreferenctTab(tab1, config_dict, language_code, UI_PADDING_X)
    AdvancedTab(tab2, config_dict, language_code, UI_PADDING_X)
    AboutTab(tab3, language_code)


def main():
    global translate
    # only need to load translate once.
    translate = load_translate()

    global config_filepath
    global config_dict
    # only need to load json file once.
    config_filepath, config_dict = load_json()

    global root
    root = Tk()
    root.title(CONST_APP_VERSION)

    global UI_PADDING_X
    UI_PADDING_X = 15

    load_GUI(root, config_dict)

    GUI_SIZE_WIDTH = 460
    GUI_SIZE_HEIGHT = 615

    GUI_SIZE_MACOS = str(GUI_SIZE_WIDTH) + 'x' + str(GUI_SIZE_HEIGHT)
    GUI_SIZE_WINDOWS=str(GUI_SIZE_WIDTH-60) + 'x' + str(GUI_SIZE_HEIGHT-90)

    GUI_SIZE =GUI_SIZE_MACOS

    if platform.system() == 'Windows':
        GUI_SIZE = GUI_SIZE_WINDOWS

    root.geometry(GUI_SIZE)

    # for icon.
    icon_filepath = 'tmp.ico'
    import base64

    # icon format.
    iconImg = ''
    if platform.system() == 'Linux':
        # PNG format.
        iconImg = ''

    tmpIcon = open(icon_filepath, 'wb+')
    tmpIcon.write(base64.b64decode(iconImg))
    tmpIcon.close()
    if platform.system() == 'Windows':
        root.iconbitmap(icon_filepath)
    if platform.system() == 'Darwin':
        #from PIL import Image, ImageTk
        #logo = ImageTk.PhotoImage(Image.open(icon_filepath).convert('RGB'))
        #root.call('wm', 'iconphoto', root._w, logo)
        pass
    if platform.system() == 'Linux':
        logo = PhotoImage(file=icon_filepath)
        root.call('wm', 'iconphoto', root._w, logo)
    os.remove(icon_filepath)

    root.mainloop()

if __name__ == "__main__":
    main()
